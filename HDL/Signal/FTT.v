/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 2 complex words per cycle
//   Throughput: one transform every 2323 cycles
//   Latency: 2559 cycles

//   Resources required:
//     4 multipliers (32 x 32 bit)
//     1 adders (9 x 9 bit)
//     6 adders (32 x 32 bit)
//     4 RAMs (512 words, 64 bits per word)
//     2 ROMs (512 words, 32 bits per word)

// Generated on Wed Dec 20 16:40:42 UTC 2023

// Latency: 2559 clock cycles
// Throughput: 1 transform every 2323 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 2323 cycles.  This means that
// 2323 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 2559 cycles.  This means that
// the 'next_out' will be asserted 2559 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [31:0] in [3:0];
   wire [31:0] X0;
   wire [31:0] Y0;
   wire [31:0] X1;
   wire [31:0] Y1;
   wire [31:0] X2;
   wire [31:0] Y2;
   wire [31:0] X3;
   wire [31:0] Y3;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 512 complex data points enter the system over 256 cycles
      for (j=0; j < 255; j = j+1) begin
          // Input: 2 complex words per cycle
         for (k=0; k < 4; k = k+1) begin
            in[k] <= j*4 + k;
         end
         @(posedge clk);
      end
      j = 255;
      for (k=0; k < 4; k = k+1) begin
         in[k] <= j*4 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 2321)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 255; j = j+1) begin
         // Input 4 words per cycle
         for (k=0; k < 4; k = k+1) begin
            in[k] <= 1024 + j*4 + k;
          end
          @(posedge clk);
       end
       j = 255;
       for (k=0; k < 4; k = k+1) begin
          in[k] <= 1024 + j*4 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 255; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 255; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $finish;
   end
endmodule

// Latency: 2559
// Gap: 2323
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [31:0] t0_0;
   wire [31:0] t0_1;
   wire [31:0] t0_2;
   wire [31:0] t0_3;
   wire next_0;
   wire [31:0] t1_0;
   wire [31:0] t1_1;
   wire [31:0] t1_2;
   wire [31:0] t1_3;
   wire next_1;
   wire [31:0] t2_0;
   wire [31:0] t2_1;
   wire [31:0] t2_2;
   wire [31:0] t2_3;
   wire next_2;
   assign t0_0 = X0;
   assign Y0 = t2_0;
   assign t0_1 = X1;
   assign Y1 = t2_1;
   assign t0_2 = X2;
   assign Y2 = t2_2;
   assign t0_3 = X3;
   assign Y3 = t2_3;
   assign next_0 = next;
   assign next_out = next_2;

// latency=236, gap=256
   rc41860 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3));


// latency=2323, gap=2323
   ICompose_43113 IComposeInst43356(.next(next_1), .clk(clk), .reset(reset), .next_out(next_2),
       .X0(t1_0), .Y0(t2_0),
       .X1(t1_1), .Y1(t2_1),
       .X2(t1_2), .Y2(t2_2),
       .X3(t1_3), .Y3(t2_3));


endmodule

// Latency: 236
// Gap: 256
module rc41860(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm41858 instPerm43357(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 236
// Gap: 256
module perm41858(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 256;
   parameter logDepth = 8;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[8] ^ addr0[0];
   assign inAddr0[0] = addr0[7];
   assign inAddr0[1] = addr0[6];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[4];
   assign inAddr0[4] = addr0[3];
   assign inAddr0[5] = addr0[2];
   assign inAddr0[6] = addr0[1];
   assign inAddr0[7] = addr0[0];
   assign outBank0[0] = addr0b[8] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outAddr0[6] = addr0b[7];
   assign outAddr0[7] = addr0b[8];
   assign outBank_a0[0] = addr0c[8] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];
   assign outAddr_a0[6] = addr0c[7];
   assign outAddr_a0[7] = addr0c[8];

   assign inBank1[0] = addr1[8] ^ addr1[0];
   assign inAddr1[0] = addr1[7];
   assign inAddr1[1] = addr1[6];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[4];
   assign inAddr1[4] = addr1[3];
   assign inAddr1[5] = addr1[2];
   assign inAddr1[6] = addr1[1];
   assign inAddr1[7] = addr1[0];
   assign outBank1[0] = addr1b[8] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outAddr1[6] = addr1b[7];
   assign outAddr1[7] = addr1b[8];
   assign outBank_a1[0] = addr1c[8] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];
   assign outAddr_a1[6] = addr1c[7];
   assign outAddr_a1[7] = addr1c[8];

   nextReg #(234, 8) nextReg_43362(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_43365(.X(next0), .Y(next_out), .clk(clk));


   memArray512_41858 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 233)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 235)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 233) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 255) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 233)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[7];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[7];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[7];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray512_41858(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 256;
   parameter logDepth = 8;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(256, 8) nextReg_43370(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 2323
// Gap: 2323
module ICompose_43113(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   reg next_out;
   input clk, reset, next;

   reg [8:0] cycle_count;
   reg [8:0] count;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   reg [31:0] Y0,
      Y1,
      Y2,
      Y3;

   reg int_next;
   reg state;
   wire [31:0] t0; 
   reg [31:0] s0;
   wire [31:0] t1; 
   reg [31:0] s1;
   wire [31:0] t2; 
   reg [31:0] s2;
   wire [31:0] t3; 
   reg [31:0] s3;

   reg [1:0] iri_state;
   wire int_next_out;
   reg [4:0] i1;

   statementList43111 instList43375 (.clk(clk), .reset(reset), .next(int_next), .next_out(int_next_out),
      .i1_in(i1),
    .X0(s0), .Y0(t0),
    .X1(s1), .Y1(t1),
    .X2(s2), .Y2(t2),
    .X3(s3), .Y3(t3));

   always @(posedge clk) begin
      if (reset == 1) begin
         int_next <= 0;
         i1 <= 8;
         cycle_count <= 0;
         next_out <= 0;
         iri_state <= 0;
         Y0 <= 0;
         Y1 <= 0;
         Y2 <= 0;
         Y3 <= 0;
      end
      else begin
         Y0 <= t0;
         Y1 <= t1;
         Y2 <= t2;
         Y3 <= t3;
         next_out <= 0;
         case (iri_state)
            0: begin
               i1 <= 8;
               cycle_count <= 0;
               if (next == 1) begin
                  int_next <= 1;
                  iri_state <= 1;
                  
               end
               else begin
                  int_next <= 0;
                  iri_state <= 0;
               end
            end
            1: begin
               int_next <= 0;
               cycle_count <= cycle_count + 1;
               i1 <= i1;
               if (cycle_count < 256)
                  iri_state <= 1;
               else
                  iri_state <= 2;
            end
            2: begin
               cycle_count <= 0;
               i1 <= i1 - 1;
               if (i1 > 0) begin
                  iri_state <= 1;
                  int_next <= 1;
               end
               else begin
                  iri_state <= 0;
                  next_out <= 1;
                  int_next <= 0;
               end
            end
         endcase               
      end
   end

   always @(posedge clk) begin
      if (reset == 1) begin
         state <= 0;
         count <= 0;
         s0 <= 0;
         s1 <= 0;
         s2 <= 0;
         s3 <= 0;
      end      
      else begin
         case (state)
            0: begin
               count <= 0;
               if (next == 1) begin
                  state <= 1;
                  count <= 0;
                  s0 <= X0; 
                  s1 <= X1; 
                  s2 <= X2; 
                  s3 <= X3; 
               end
               else begin
                  state <= 0;
                  count <= 0;
                  s0 <= t0; 
                  s1 <= t1; 
                  s2 <= t2; 
                  s3 <= t3; 
               end               
            end
            1: begin
               count <= count + 1;
               if (count < 256) begin
                  s0 <= X0; 
                  s1 <= X1; 
                  s2 <= X2; 
                  s3 <= X3; 
                  state <= 1;                    
               end
               else begin
                  s0 <= t0; 
                  s1 <= t1; 
                  s2 <= t2; 
                  s3 <= t3; 
                  state <= 0;
               end
            end
         endcase               
      end
   end
endmodule

// Latency: 257
// Gap: 256
// module_name_is:statementList43111
module statementList43111(clk, reset, next, next_out,
   i1_in,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [4:0] i1_in;
   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [31:0] t0_0;
   wire [31:0] t0_1;
   wire [31:0] t0_2;
   wire [31:0] t0_3;
   wire next_0;
   wire [31:0] t1_0;
   wire [31:0] t1_1;
   wire [31:0] t1_2;
   wire [31:0] t1_3;
   wire next_1;
   wire [31:0] t2_0;
   wire [31:0] t2_1;
   wire [31:0] t2_2;
   wire [31:0] t2_3;
   wire next_2;
   wire [31:0] t3_0;
   wire [31:0] t3_1;
   wire [31:0] t3_2;
   wire [31:0] t3_3;
   wire next_3;
   wire [4:0] i1;
   wire [4:0] i1_0;
   assign t0_0 = X0;
   assign Y0 = t3_0;
   assign t0_1 = X1;
   assign Y1 = t3_1;
   assign t0_2 = X2;
   assign Y2 = t3_2;
   assign t0_3 = X3;
   assign Y3 = t3_3;
   assign next_0 = next;
   assign next_out = next_3;

   assign i1_0 = i1_in;

// latency=15, gap=256
   DirSum_43026 DirSumInst43378(.next(next_0), .clk(clk), .reset(reset), .next_out(next_1),
.i1(i1_0),
       .X0(t0_0), .Y0(t1_0),
       .X1(t0_1), .Y1(t1_1),
       .X2(t0_2), .Y2(t1_2),
       .X3(t0_3), .Y3(t1_3));


// latency=2, gap=256
   codeBlock43028 codeBlockIsnt43379(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3));


// latency=240, gap=256
   rc43109 instrc43380(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3));


endmodule

// Latency: 15
// Gap: 256
module DirSum_43026(clk, reset, next, next_out,
      i1,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3);

   output next_out;
   input clk, reset, next;

   input [4:0] i1;
   reg [7:0] i2;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 255)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock41862 codeBlockIsnt43381(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3));

endmodule

module D1_42510(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [8:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h40000000;
      1: out3 <= 32'h3ffec42d;
      2: out3 <= 32'h3ffb10c1;
      3: out3 <= 32'h3ff4e5e0;
      4: out3 <= 32'h3fec43c7;
      5: out3 <= 32'h3fe12acb;
      6: out3 <= 32'h3fd39b5a;
      7: out3 <= 32'h3fc395f9;
      8: out3 <= 32'h3fb11b48;
      9: out3 <= 32'h3f9c2bfb;
      10: out3 <= 32'h3f84c8e2;
      11: out3 <= 32'h3f6af2e3;
      12: out3 <= 32'h3f4eaafe;
      13: out3 <= 32'h3f2ff24a;
      14: out3 <= 32'h3f0ec9f5;
      15: out3 <= 32'h3eeb3347;
      16: out3 <= 32'h3ec52fa0;
      17: out3 <= 32'h3e9cc076;
      18: out3 <= 32'h3e71e759;
      19: out3 <= 32'h3e44a5ef;
      20: out3 <= 32'h3e14fdf7;
      21: out3 <= 32'h3de2f148;
      22: out3 <= 32'h3dae81cf;
      23: out3 <= 32'h3d77b192;
      24: out3 <= 32'h3d3e82ae;
      25: out3 <= 32'h3d02f757;
      26: out3 <= 32'h3cc511d9;
      27: out3 <= 32'h3c84d496;
      28: out3 <= 32'h3c42420a;
      29: out3 <= 32'h3bfd5cc4;
      30: out3 <= 32'h3bb6276e;
      31: out3 <= 32'h3b6ca4c4;
      32: out3 <= 32'h3b20d79e;
      33: out3 <= 32'h3ad2c2e8;
      34: out3 <= 32'h3a8269a3;
      35: out3 <= 32'h3a2fcee8;
      36: out3 <= 32'h39daf5e8;
      37: out3 <= 32'h3983e1e8;
      38: out3 <= 32'h392a9642;
      39: out3 <= 32'h38cf1669;
      40: out3 <= 32'h387165e3;
      41: out3 <= 32'h3811884d;
      42: out3 <= 32'h37af8159;
      43: out3 <= 32'h374b54ce;
      44: out3 <= 32'h36e5068a;
      45: out3 <= 32'h367c9a7e;
      46: out3 <= 32'h361214b0;
      47: out3 <= 32'h35a5793c;
      48: out3 <= 32'h3536cc52;
      49: out3 <= 32'h34c61236;
      50: out3 <= 32'h34534f41;
      51: out3 <= 32'h33de87de;
      52: out3 <= 32'h3367c090;
      53: out3 <= 32'h32eefdea;
      54: out3 <= 32'h32744493;
      55: out3 <= 32'h31f79948;
      56: out3 <= 32'h317900d6;
      57: out3 <= 32'h30f8801f;
      58: out3 <= 32'h30761c18;
      59: out3 <= 32'h2ff1d9c7;
      60: out3 <= 32'h2f6bbe45;
      61: out3 <= 32'h2ee3cebe;
      62: out3 <= 32'h2e5a1070;
      63: out3 <= 32'h2dce88aa;
      64: out3 <= 32'h2d413ccd;
      65: out3 <= 32'h2cb2324c;
      66: out3 <= 32'h2c216eaa;
      67: out3 <= 32'h2b8ef77d;
      68: out3 <= 32'h2afad269;
      69: out3 <= 32'h2a650525;
      70: out3 <= 32'h29cd9578;
      71: out3 <= 32'h29348937;
      72: out3 <= 32'h2899e64a;
      73: out3 <= 32'h27fdb2a7;
      74: out3 <= 32'h275ff452;
      75: out3 <= 32'h26c0b162;
      76: out3 <= 32'h261feffa;
      77: out3 <= 32'h257db64c;
      78: out3 <= 32'h24da0a9a;
      79: out3 <= 32'h2434f332;
      80: out3 <= 32'h238e7673;
      81: out3 <= 32'h22e69ac8;
      82: out3 <= 32'h223d66a8;
      83: out3 <= 32'h2192e09b;
      84: out3 <= 32'h20e70f32;
      85: out3 <= 32'h2039f90f;
      86: out3 <= 32'h1f8ba4dc;
      87: out3 <= 32'h1edc1953;
      88: out3 <= 32'h1e2b5d38;
      89: out3 <= 32'h1d79775c;
      90: out3 <= 32'h1cc66e99;
      91: out3 <= 32'h1c1249d8;
      92: out3 <= 32'h1b5d100a;
      93: out3 <= 32'h1aa6c82b;
      94: out3 <= 32'h19ef7944;
      95: out3 <= 32'h19372a64;
      96: out3 <= 32'h187de2a7;
      97: out3 <= 32'h17c3a931;
      98: out3 <= 32'h17088531;
      99: out3 <= 32'h164c7ddd;
      100: out3 <= 32'h158f9a76;
      101: out3 <= 32'h14d1e242;
      102: out3 <= 32'h14135c94;
      103: out3 <= 32'h135410c3;
      104: out3 <= 32'h1294062f;
      105: out3 <= 32'h11d3443f;
      106: out3 <= 32'h1111d263;
      107: out3 <= 32'h104fb80e;
      108: out3 <= 32'hf8cfcbe;
      109: out3 <= 32'hec9a7f3;
      110: out3 <= 32'he05c135;
      111: out3 <= 32'hd415013;
      112: out3 <= 32'hc7c5c1e;
      113: out3 <= 32'hbb6ecef;
      114: out3 <= 32'haf10a22;
      115: out3 <= 32'ha2abb59;
      116: out3 <= 32'h9640837;
      117: out3 <= 32'h89cf867;
      118: out3 <= 32'h7d59396;
      119: out3 <= 32'h70de172;
      120: out3 <= 32'h645e9af;
      121: out3 <= 32'h57db403;
      122: out3 <= 32'h4b54825;
      123: out3 <= 32'h3ecadcf;
      124: out3 <= 32'h323ecbe;
      125: out3 <= 32'h25b0caf;
      126: out3 <= 32'h192155f;
      127: out3 <= 32'hc90e90;
      128: out3 <= 32'h0;
      129: out3 <= 32'hff36f170;
      130: out3 <= 32'hfe6deaa1;
      131: out3 <= 32'hfda4f351;
      132: out3 <= 32'hfcdc1342;
      133: out3 <= 32'hfc135231;
      134: out3 <= 32'hfb4ab7db;
      135: out3 <= 32'hfa824bfd;
      136: out3 <= 32'hf9ba1651;
      137: out3 <= 32'hf8f21e8e;
      138: out3 <= 32'hf82a6c6a;
      139: out3 <= 32'hf7630799;
      140: out3 <= 32'hf69bf7c9;
      141: out3 <= 32'hf5d544a7;
      142: out3 <= 32'hf50ef5de;
      143: out3 <= 32'hf4491311;
      144: out3 <= 32'hf383a3e2;
      145: out3 <= 32'hf2beafed;
      146: out3 <= 32'hf1fa3ecb;
      147: out3 <= 32'hf136580d;
      148: out3 <= 32'hf0730342;
      149: out3 <= 32'hefb047f2;
      150: out3 <= 32'heeee2d9d;
      151: out3 <= 32'hee2cbbc1;
      152: out3 <= 32'hed6bf9d1;
      153: out3 <= 32'hecabef3d;
      154: out3 <= 32'hebeca36c;
      155: out3 <= 32'heb2e1dbe;
      156: out3 <= 32'hea70658a;
      157: out3 <= 32'he9b38223;
      158: out3 <= 32'he8f77acf;
      159: out3 <= 32'he83c56cf;
      160: out3 <= 32'he7821d59;
      161: out3 <= 32'he6c8d59c;
      162: out3 <= 32'he61086bc;
      163: out3 <= 32'he55937d5;
      164: out3 <= 32'he4a2eff6;
      165: out3 <= 32'he3edb628;
      166: out3 <= 32'he3399167;
      167: out3 <= 32'he28688a4;
      168: out3 <= 32'he1d4a2c8;
      169: out3 <= 32'he123e6ad;
      170: out3 <= 32'he0745b24;
      171: out3 <= 32'hdfc606f1;
      172: out3 <= 32'hdf18f0ce;
      173: out3 <= 32'hde6d1f65;
      174: out3 <= 32'hddc29958;
      175: out3 <= 32'hdd196538;
      176: out3 <= 32'hdc71898d;
      177: out3 <= 32'hdbcb0cce;
      178: out3 <= 32'hdb25f566;
      179: out3 <= 32'hda8249b4;
      180: out3 <= 32'hd9e01006;
      181: out3 <= 32'hd93f4e9e;
      182: out3 <= 32'hd8a00bae;
      183: out3 <= 32'hd8024d59;
      184: out3 <= 32'hd76619b6;
      185: out3 <= 32'hd6cb76c9;
      186: out3 <= 32'hd6326a88;
      187: out3 <= 32'hd59afadb;
      188: out3 <= 32'hd5052d97;
      189: out3 <= 32'hd4710883;
      190: out3 <= 32'hd3de9156;
      191: out3 <= 32'hd34dcdb4;
      192: out3 <= 32'hd2bec333;
      193: out3 <= 32'hd2317756;
      194: out3 <= 32'hd1a5ef90;
      195: out3 <= 32'hd11c3142;
      196: out3 <= 32'hd09441bb;
      197: out3 <= 32'hd00e2639;
      198: out3 <= 32'hcf89e3e8;
      199: out3 <= 32'hcf077fe1;
      200: out3 <= 32'hce86ff2a;
      201: out3 <= 32'hce0866b8;
      202: out3 <= 32'hcd8bbb6d;
      203: out3 <= 32'hcd110216;
      204: out3 <= 32'hcc983f70;
      205: out3 <= 32'hcc217822;
      206: out3 <= 32'hcbacb0bf;
      207: out3 <= 32'hcb39edca;
      208: out3 <= 32'hcac933ae;
      209: out3 <= 32'hca5a86c4;
      210: out3 <= 32'hc9edeb50;
      211: out3 <= 32'hc9836582;
      212: out3 <= 32'hc91af976;
      213: out3 <= 32'hc8b4ab32;
      214: out3 <= 32'hc8507ea7;
      215: out3 <= 32'hc7ee77b3;
      216: out3 <= 32'hc78e9a1d;
      217: out3 <= 32'hc730e997;
      218: out3 <= 32'hc6d569be;
      219: out3 <= 32'hc67c1e18;
      220: out3 <= 32'hc6250a18;
      221: out3 <= 32'hc5d03118;
      222: out3 <= 32'hc57d965d;
      223: out3 <= 32'hc52d3d18;
      224: out3 <= 32'hc4df2862;
      225: out3 <= 32'hc4935b3c;
      226: out3 <= 32'hc449d892;
      227: out3 <= 32'hc402a33c;
      228: out3 <= 32'hc3bdbdf6;
      229: out3 <= 32'hc37b2b6a;
      230: out3 <= 32'hc33aee27;
      231: out3 <= 32'hc2fd08a9;
      232: out3 <= 32'hc2c17d52;
      233: out3 <= 32'hc2884e6e;
      234: out3 <= 32'hc2517e31;
      235: out3 <= 32'hc21d0eb8;
      236: out3 <= 32'hc1eb0209;
      237: out3 <= 32'hc1bb5a11;
      238: out3 <= 32'hc18e18a7;
      239: out3 <= 32'hc1633f8a;
      240: out3 <= 32'hc13ad060;
      241: out3 <= 32'hc114ccb9;
      242: out3 <= 32'hc0f1360b;
      243: out3 <= 32'hc0d00db6;
      244: out3 <= 32'hc0b15502;
      245: out3 <= 32'hc0950d1d;
      246: out3 <= 32'hc07b371e;
      247: out3 <= 32'hc063d405;
      248: out3 <= 32'hc04ee4b8;
      249: out3 <= 32'hc03c6a07;
      250: out3 <= 32'hc02c64a6;
      251: out3 <= 32'hc01ed535;
      252: out3 <= 32'hc013bc39;
      253: out3 <= 32'hc00b1a20;
      254: out3 <= 32'hc004ef3f;
      255: out3 <= 32'hc0013bd3;
      256: out3 <= 32'h40000000;
      257: out3 <= 32'h3ffb10c1;
      258: out3 <= 32'h3fec43c7;
      259: out3 <= 32'h3fd39b5a;
      260: out3 <= 32'h3fb11b48;
      261: out3 <= 32'h3f84c8e2;
      262: out3 <= 32'h3f4eaafe;
      263: out3 <= 32'h3f0ec9f5;
      264: out3 <= 32'h3ec52fa0;
      265: out3 <= 32'h3e71e759;
      266: out3 <= 32'h3e14fdf7;
      267: out3 <= 32'h3dae81cf;
      268: out3 <= 32'h3d3e82ae;
      269: out3 <= 32'h3cc511d9;
      270: out3 <= 32'h3c42420a;
      271: out3 <= 32'h3bb6276e;
      272: out3 <= 32'h3b20d79e;
      273: out3 <= 32'h3a8269a3;
      274: out3 <= 32'h39daf5e8;
      275: out3 <= 32'h392a9642;
      276: out3 <= 32'h387165e3;
      277: out3 <= 32'h37af8159;
      278: out3 <= 32'h36e5068a;
      279: out3 <= 32'h361214b0;
      280: out3 <= 32'h3536cc52;
      281: out3 <= 32'h34534f41;
      282: out3 <= 32'h3367c090;
      283: out3 <= 32'h32744493;
      284: out3 <= 32'h317900d6;
      285: out3 <= 32'h30761c18;
      286: out3 <= 32'h2f6bbe45;
      287: out3 <= 32'h2e5a1070;
      288: out3 <= 32'h2d413ccd;
      289: out3 <= 32'h2c216eaa;
      290: out3 <= 32'h2afad269;
      291: out3 <= 32'h29cd9578;
      292: out3 <= 32'h2899e64a;
      293: out3 <= 32'h275ff452;
      294: out3 <= 32'h261feffa;
      295: out3 <= 32'h24da0a9a;
      296: out3 <= 32'h238e7673;
      297: out3 <= 32'h223d66a8;
      298: out3 <= 32'h20e70f32;
      299: out3 <= 32'h1f8ba4dc;
      300: out3 <= 32'h1e2b5d38;
      301: out3 <= 32'h1cc66e99;
      302: out3 <= 32'h1b5d100a;
      303: out3 <= 32'h19ef7944;
      304: out3 <= 32'h187de2a7;
      305: out3 <= 32'h17088531;
      306: out3 <= 32'h158f9a76;
      307: out3 <= 32'h14135c94;
      308: out3 <= 32'h1294062f;
      309: out3 <= 32'h1111d263;
      310: out3 <= 32'hf8cfcbe;
      311: out3 <= 32'he05c135;
      312: out3 <= 32'hc7c5c1e;
      313: out3 <= 32'haf10a22;
      314: out3 <= 32'h9640837;
      315: out3 <= 32'h7d59396;
      316: out3 <= 32'h645e9af;
      317: out3 <= 32'h4b54825;
      318: out3 <= 32'h323ecbe;
      319: out3 <= 32'h192155f;
      320: out3 <= 32'h0;
      321: out3 <= 32'hfe6deaa1;
      322: out3 <= 32'hfcdc1342;
      323: out3 <= 32'hfb4ab7db;
      324: out3 <= 32'hf9ba1651;
      325: out3 <= 32'hf82a6c6a;
      326: out3 <= 32'hf69bf7c9;
      327: out3 <= 32'hf50ef5de;
      328: out3 <= 32'hf383a3e2;
      329: out3 <= 32'hf1fa3ecb;
      330: out3 <= 32'hf0730342;
      331: out3 <= 32'heeee2d9d;
      332: out3 <= 32'hed6bf9d1;
      333: out3 <= 32'hebeca36c;
      334: out3 <= 32'hea70658a;
      335: out3 <= 32'he8f77acf;
      336: out3 <= 32'he7821d59;
      337: out3 <= 32'he61086bc;
      338: out3 <= 32'he4a2eff6;
      339: out3 <= 32'he3399167;
      340: out3 <= 32'he1d4a2c8;
      341: out3 <= 32'he0745b24;
      342: out3 <= 32'hdf18f0ce;
      343: out3 <= 32'hddc29958;
      344: out3 <= 32'hdc71898d;
      345: out3 <= 32'hdb25f566;
      346: out3 <= 32'hd9e01006;
      347: out3 <= 32'hd8a00bae;
      348: out3 <= 32'hd76619b6;
      349: out3 <= 32'hd6326a88;
      350: out3 <= 32'hd5052d97;
      351: out3 <= 32'hd3de9156;
      352: out3 <= 32'hd2bec333;
      353: out3 <= 32'hd1a5ef90;
      354: out3 <= 32'hd09441bb;
      355: out3 <= 32'hcf89e3e8;
      356: out3 <= 32'hce86ff2a;
      357: out3 <= 32'hcd8bbb6d;
      358: out3 <= 32'hcc983f70;
      359: out3 <= 32'hcbacb0bf;
      360: out3 <= 32'hcac933ae;
      361: out3 <= 32'hc9edeb50;
      362: out3 <= 32'hc91af976;
      363: out3 <= 32'hc8507ea7;
      364: out3 <= 32'hc78e9a1d;
      365: out3 <= 32'hc6d569be;
      366: out3 <= 32'hc6250a18;
      367: out3 <= 32'hc57d965d;
      368: out3 <= 32'hc4df2862;
      369: out3 <= 32'hc449d892;
      370: out3 <= 32'hc3bdbdf6;
      371: out3 <= 32'hc33aee27;
      372: out3 <= 32'hc2c17d52;
      373: out3 <= 32'hc2517e31;
      374: out3 <= 32'hc1eb0209;
      375: out3 <= 32'hc18e18a7;
      376: out3 <= 32'hc13ad060;
      377: out3 <= 32'hc0f1360b;
      378: out3 <= 32'hc0b15502;
      379: out3 <= 32'hc07b371e;
      380: out3 <= 32'hc04ee4b8;
      381: out3 <= 32'hc02c64a6;
      382: out3 <= 32'hc013bc39;
      383: out3 <= 32'hc004ef3f;
      384: out3 <= 32'hc0000000;
      385: out3 <= 32'hc004ef3f;
      386: out3 <= 32'hc013bc39;
      387: out3 <= 32'hc02c64a6;
      388: out3 <= 32'hc04ee4b8;
      389: out3 <= 32'hc07b371e;
      390: out3 <= 32'hc0b15502;
      391: out3 <= 32'hc0f1360b;
      392: out3 <= 32'hc13ad060;
      393: out3 <= 32'hc18e18a7;
      394: out3 <= 32'hc1eb0209;
      395: out3 <= 32'hc2517e31;
      396: out3 <= 32'hc2c17d52;
      397: out3 <= 32'hc33aee27;
      398: out3 <= 32'hc3bdbdf6;
      399: out3 <= 32'hc449d892;
      400: out3 <= 32'hc4df2862;
      401: out3 <= 32'hc57d965d;
      402: out3 <= 32'hc6250a18;
      403: out3 <= 32'hc6d569be;
      404: out3 <= 32'hc78e9a1d;
      405: out3 <= 32'hc8507ea7;
      406: out3 <= 32'hc91af976;
      407: out3 <= 32'hc9edeb50;
      408: out3 <= 32'hcac933ae;
      409: out3 <= 32'hcbacb0bf;
      410: out3 <= 32'hcc983f70;
      411: out3 <= 32'hcd8bbb6d;
      412: out3 <= 32'hce86ff2a;
      413: out3 <= 32'hcf89e3e8;
      414: out3 <= 32'hd09441bb;
      415: out3 <= 32'hd1a5ef90;
      416: out3 <= 32'hd2bec333;
      417: out3 <= 32'hd3de9156;
      418: out3 <= 32'hd5052d97;
      419: out3 <= 32'hd6326a88;
      420: out3 <= 32'hd76619b6;
      421: out3 <= 32'hd8a00bae;
      422: out3 <= 32'hd9e01006;
      423: out3 <= 32'hdb25f566;
      424: out3 <= 32'hdc71898d;
      425: out3 <= 32'hddc29958;
      426: out3 <= 32'hdf18f0ce;
      427: out3 <= 32'he0745b24;
      428: out3 <= 32'he1d4a2c8;
      429: out3 <= 32'he3399167;
      430: out3 <= 32'he4a2eff6;
      431: out3 <= 32'he61086bc;
      432: out3 <= 32'he7821d59;
      433: out3 <= 32'he8f77acf;
      434: out3 <= 32'hea70658a;
      435: out3 <= 32'hebeca36c;
      436: out3 <= 32'hed6bf9d1;
      437: out3 <= 32'heeee2d9d;
      438: out3 <= 32'hf0730342;
      439: out3 <= 32'hf1fa3ecb;
      440: out3 <= 32'hf383a3e2;
      441: out3 <= 32'hf50ef5de;
      442: out3 <= 32'hf69bf7c9;
      443: out3 <= 32'hf82a6c6a;
      444: out3 <= 32'hf9ba1651;
      445: out3 <= 32'hfb4ab7db;
      446: out3 <= 32'hfcdc1342;
      447: out3 <= 32'hfe6deaa1;
      448: out3 <= 32'h0;
      449: out3 <= 32'h192155f;
      450: out3 <= 32'h323ecbe;
      451: out3 <= 32'h4b54825;
      452: out3 <= 32'h645e9af;
      453: out3 <= 32'h7d59396;
      454: out3 <= 32'h9640837;
      455: out3 <= 32'haf10a22;
      456: out3 <= 32'hc7c5c1e;
      457: out3 <= 32'he05c135;
      458: out3 <= 32'hf8cfcbe;
      459: out3 <= 32'h1111d263;
      460: out3 <= 32'h1294062f;
      461: out3 <= 32'h14135c94;
      462: out3 <= 32'h158f9a76;
      463: out3 <= 32'h17088531;
      464: out3 <= 32'h187de2a7;
      465: out3 <= 32'h19ef7944;
      466: out3 <= 32'h1b5d100a;
      467: out3 <= 32'h1cc66e99;
      468: out3 <= 32'h1e2b5d38;
      469: out3 <= 32'h1f8ba4dc;
      470: out3 <= 32'h20e70f32;
      471: out3 <= 32'h223d66a8;
      472: out3 <= 32'h238e7673;
      473: out3 <= 32'h24da0a9a;
      474: out3 <= 32'h261feffa;
      475: out3 <= 32'h275ff452;
      476: out3 <= 32'h2899e64a;
      477: out3 <= 32'h29cd9578;
      478: out3 <= 32'h2afad269;
      479: out3 <= 32'h2c216eaa;
      480: out3 <= 32'h2d413ccd;
      481: out3 <= 32'h2e5a1070;
      482: out3 <= 32'h2f6bbe45;
      483: out3 <= 32'h30761c18;
      484: out3 <= 32'h317900d6;
      485: out3 <= 32'h32744493;
      486: out3 <= 32'h3367c090;
      487: out3 <= 32'h34534f41;
      488: out3 <= 32'h3536cc52;
      489: out3 <= 32'h361214b0;
      490: out3 <= 32'h36e5068a;
      491: out3 <= 32'h37af8159;
      492: out3 <= 32'h387165e3;
      493: out3 <= 32'h392a9642;
      494: out3 <= 32'h39daf5e8;
      495: out3 <= 32'h3a8269a3;
      496: out3 <= 32'h3b20d79e;
      497: out3 <= 32'h3bb6276e;
      498: out3 <= 32'h3c42420a;
      499: out3 <= 32'h3cc511d9;
      500: out3 <= 32'h3d3e82ae;
      501: out3 <= 32'h3dae81cf;
      502: out3 <= 32'h3e14fdf7;
      503: out3 <= 32'h3e71e759;
      504: out3 <= 32'h3ec52fa0;
      505: out3 <= 32'h3f0ec9f5;
      506: out3 <= 32'h3f4eaafe;
      507: out3 <= 32'h3f84c8e2;
      508: out3 <= 32'h3fb11b48;
      509: out3 <= 32'h3fd39b5a;
      510: out3 <= 32'h3fec43c7;
      511: out3 <= 32'h3ffb10c1;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D2_43024(addr, out, clk);
   input clk;
   output [31:0] out;
   reg [31:0] out, out2, out3;
   input [8:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 32'h0;
      1: out3 <= 32'hff36f170;
      2: out3 <= 32'hfe6deaa1;
      3: out3 <= 32'hfda4f351;
      4: out3 <= 32'hfcdc1342;
      5: out3 <= 32'hfc135231;
      6: out3 <= 32'hfb4ab7db;
      7: out3 <= 32'hfa824bfd;
      8: out3 <= 32'hf9ba1651;
      9: out3 <= 32'hf8f21e8e;
      10: out3 <= 32'hf82a6c6a;
      11: out3 <= 32'hf7630799;
      12: out3 <= 32'hf69bf7c9;
      13: out3 <= 32'hf5d544a7;
      14: out3 <= 32'hf50ef5de;
      15: out3 <= 32'hf4491311;
      16: out3 <= 32'hf383a3e2;
      17: out3 <= 32'hf2beafed;
      18: out3 <= 32'hf1fa3ecb;
      19: out3 <= 32'hf136580d;
      20: out3 <= 32'hf0730342;
      21: out3 <= 32'hefb047f2;
      22: out3 <= 32'heeee2d9d;
      23: out3 <= 32'hee2cbbc1;
      24: out3 <= 32'hed6bf9d1;
      25: out3 <= 32'hecabef3d;
      26: out3 <= 32'hebeca36c;
      27: out3 <= 32'heb2e1dbe;
      28: out3 <= 32'hea70658a;
      29: out3 <= 32'he9b38223;
      30: out3 <= 32'he8f77acf;
      31: out3 <= 32'he83c56cf;
      32: out3 <= 32'he7821d59;
      33: out3 <= 32'he6c8d59c;
      34: out3 <= 32'he61086bc;
      35: out3 <= 32'he55937d5;
      36: out3 <= 32'he4a2eff6;
      37: out3 <= 32'he3edb628;
      38: out3 <= 32'he3399167;
      39: out3 <= 32'he28688a4;
      40: out3 <= 32'he1d4a2c8;
      41: out3 <= 32'he123e6ad;
      42: out3 <= 32'he0745b24;
      43: out3 <= 32'hdfc606f1;
      44: out3 <= 32'hdf18f0ce;
      45: out3 <= 32'hde6d1f65;
      46: out3 <= 32'hddc29958;
      47: out3 <= 32'hdd196538;
      48: out3 <= 32'hdc71898d;
      49: out3 <= 32'hdbcb0cce;
      50: out3 <= 32'hdb25f566;
      51: out3 <= 32'hda8249b4;
      52: out3 <= 32'hd9e01006;
      53: out3 <= 32'hd93f4e9e;
      54: out3 <= 32'hd8a00bae;
      55: out3 <= 32'hd8024d59;
      56: out3 <= 32'hd76619b6;
      57: out3 <= 32'hd6cb76c9;
      58: out3 <= 32'hd6326a88;
      59: out3 <= 32'hd59afadb;
      60: out3 <= 32'hd5052d97;
      61: out3 <= 32'hd4710883;
      62: out3 <= 32'hd3de9156;
      63: out3 <= 32'hd34dcdb4;
      64: out3 <= 32'hd2bec333;
      65: out3 <= 32'hd2317756;
      66: out3 <= 32'hd1a5ef90;
      67: out3 <= 32'hd11c3142;
      68: out3 <= 32'hd09441bb;
      69: out3 <= 32'hd00e2639;
      70: out3 <= 32'hcf89e3e8;
      71: out3 <= 32'hcf077fe1;
      72: out3 <= 32'hce86ff2a;
      73: out3 <= 32'hce0866b8;
      74: out3 <= 32'hcd8bbb6d;
      75: out3 <= 32'hcd110216;
      76: out3 <= 32'hcc983f70;
      77: out3 <= 32'hcc217822;
      78: out3 <= 32'hcbacb0bf;
      79: out3 <= 32'hcb39edca;
      80: out3 <= 32'hcac933ae;
      81: out3 <= 32'hca5a86c4;
      82: out3 <= 32'hc9edeb50;
      83: out3 <= 32'hc9836582;
      84: out3 <= 32'hc91af976;
      85: out3 <= 32'hc8b4ab32;
      86: out3 <= 32'hc8507ea7;
      87: out3 <= 32'hc7ee77b3;
      88: out3 <= 32'hc78e9a1d;
      89: out3 <= 32'hc730e997;
      90: out3 <= 32'hc6d569be;
      91: out3 <= 32'hc67c1e18;
      92: out3 <= 32'hc6250a18;
      93: out3 <= 32'hc5d03118;
      94: out3 <= 32'hc57d965d;
      95: out3 <= 32'hc52d3d18;
      96: out3 <= 32'hc4df2862;
      97: out3 <= 32'hc4935b3c;
      98: out3 <= 32'hc449d892;
      99: out3 <= 32'hc402a33c;
      100: out3 <= 32'hc3bdbdf6;
      101: out3 <= 32'hc37b2b6a;
      102: out3 <= 32'hc33aee27;
      103: out3 <= 32'hc2fd08a9;
      104: out3 <= 32'hc2c17d52;
      105: out3 <= 32'hc2884e6e;
      106: out3 <= 32'hc2517e31;
      107: out3 <= 32'hc21d0eb8;
      108: out3 <= 32'hc1eb0209;
      109: out3 <= 32'hc1bb5a11;
      110: out3 <= 32'hc18e18a7;
      111: out3 <= 32'hc1633f8a;
      112: out3 <= 32'hc13ad060;
      113: out3 <= 32'hc114ccb9;
      114: out3 <= 32'hc0f1360b;
      115: out3 <= 32'hc0d00db6;
      116: out3 <= 32'hc0b15502;
      117: out3 <= 32'hc0950d1d;
      118: out3 <= 32'hc07b371e;
      119: out3 <= 32'hc063d405;
      120: out3 <= 32'hc04ee4b8;
      121: out3 <= 32'hc03c6a07;
      122: out3 <= 32'hc02c64a6;
      123: out3 <= 32'hc01ed535;
      124: out3 <= 32'hc013bc39;
      125: out3 <= 32'hc00b1a20;
      126: out3 <= 32'hc004ef3f;
      127: out3 <= 32'hc0013bd3;
      128: out3 <= 32'hc0000000;
      129: out3 <= 32'hc0013bd3;
      130: out3 <= 32'hc004ef3f;
      131: out3 <= 32'hc00b1a20;
      132: out3 <= 32'hc013bc39;
      133: out3 <= 32'hc01ed535;
      134: out3 <= 32'hc02c64a6;
      135: out3 <= 32'hc03c6a07;
      136: out3 <= 32'hc04ee4b8;
      137: out3 <= 32'hc063d405;
      138: out3 <= 32'hc07b371e;
      139: out3 <= 32'hc0950d1d;
      140: out3 <= 32'hc0b15502;
      141: out3 <= 32'hc0d00db6;
      142: out3 <= 32'hc0f1360b;
      143: out3 <= 32'hc114ccb9;
      144: out3 <= 32'hc13ad060;
      145: out3 <= 32'hc1633f8a;
      146: out3 <= 32'hc18e18a7;
      147: out3 <= 32'hc1bb5a11;
      148: out3 <= 32'hc1eb0209;
      149: out3 <= 32'hc21d0eb8;
      150: out3 <= 32'hc2517e31;
      151: out3 <= 32'hc2884e6e;
      152: out3 <= 32'hc2c17d52;
      153: out3 <= 32'hc2fd08a9;
      154: out3 <= 32'hc33aee27;
      155: out3 <= 32'hc37b2b6a;
      156: out3 <= 32'hc3bdbdf6;
      157: out3 <= 32'hc402a33c;
      158: out3 <= 32'hc449d892;
      159: out3 <= 32'hc4935b3c;
      160: out3 <= 32'hc4df2862;
      161: out3 <= 32'hc52d3d18;
      162: out3 <= 32'hc57d965d;
      163: out3 <= 32'hc5d03118;
      164: out3 <= 32'hc6250a18;
      165: out3 <= 32'hc67c1e18;
      166: out3 <= 32'hc6d569be;
      167: out3 <= 32'hc730e997;
      168: out3 <= 32'hc78e9a1d;
      169: out3 <= 32'hc7ee77b3;
      170: out3 <= 32'hc8507ea7;
      171: out3 <= 32'hc8b4ab32;
      172: out3 <= 32'hc91af976;
      173: out3 <= 32'hc9836582;
      174: out3 <= 32'hc9edeb50;
      175: out3 <= 32'hca5a86c4;
      176: out3 <= 32'hcac933ae;
      177: out3 <= 32'hcb39edca;
      178: out3 <= 32'hcbacb0bf;
      179: out3 <= 32'hcc217822;
      180: out3 <= 32'hcc983f70;
      181: out3 <= 32'hcd110216;
      182: out3 <= 32'hcd8bbb6d;
      183: out3 <= 32'hce0866b8;
      184: out3 <= 32'hce86ff2a;
      185: out3 <= 32'hcf077fe1;
      186: out3 <= 32'hcf89e3e8;
      187: out3 <= 32'hd00e2639;
      188: out3 <= 32'hd09441bb;
      189: out3 <= 32'hd11c3142;
      190: out3 <= 32'hd1a5ef90;
      191: out3 <= 32'hd2317756;
      192: out3 <= 32'hd2bec333;
      193: out3 <= 32'hd34dcdb4;
      194: out3 <= 32'hd3de9156;
      195: out3 <= 32'hd4710883;
      196: out3 <= 32'hd5052d97;
      197: out3 <= 32'hd59afadb;
      198: out3 <= 32'hd6326a88;
      199: out3 <= 32'hd6cb76c9;
      200: out3 <= 32'hd76619b6;
      201: out3 <= 32'hd8024d59;
      202: out3 <= 32'hd8a00bae;
      203: out3 <= 32'hd93f4e9e;
      204: out3 <= 32'hd9e01006;
      205: out3 <= 32'hda8249b4;
      206: out3 <= 32'hdb25f566;
      207: out3 <= 32'hdbcb0cce;
      208: out3 <= 32'hdc71898d;
      209: out3 <= 32'hdd196538;
      210: out3 <= 32'hddc29958;
      211: out3 <= 32'hde6d1f65;
      212: out3 <= 32'hdf18f0ce;
      213: out3 <= 32'hdfc606f1;
      214: out3 <= 32'he0745b24;
      215: out3 <= 32'he123e6ad;
      216: out3 <= 32'he1d4a2c8;
      217: out3 <= 32'he28688a4;
      218: out3 <= 32'he3399167;
      219: out3 <= 32'he3edb628;
      220: out3 <= 32'he4a2eff6;
      221: out3 <= 32'he55937d5;
      222: out3 <= 32'he61086bc;
      223: out3 <= 32'he6c8d59c;
      224: out3 <= 32'he7821d59;
      225: out3 <= 32'he83c56cf;
      226: out3 <= 32'he8f77acf;
      227: out3 <= 32'he9b38223;
      228: out3 <= 32'hea70658a;
      229: out3 <= 32'heb2e1dbe;
      230: out3 <= 32'hebeca36c;
      231: out3 <= 32'hecabef3d;
      232: out3 <= 32'hed6bf9d1;
      233: out3 <= 32'hee2cbbc1;
      234: out3 <= 32'heeee2d9d;
      235: out3 <= 32'hefb047f2;
      236: out3 <= 32'hf0730342;
      237: out3 <= 32'hf136580d;
      238: out3 <= 32'hf1fa3ecb;
      239: out3 <= 32'hf2beafed;
      240: out3 <= 32'hf383a3e2;
      241: out3 <= 32'hf4491311;
      242: out3 <= 32'hf50ef5de;
      243: out3 <= 32'hf5d544a7;
      244: out3 <= 32'hf69bf7c9;
      245: out3 <= 32'hf7630799;
      246: out3 <= 32'hf82a6c6a;
      247: out3 <= 32'hf8f21e8e;
      248: out3 <= 32'hf9ba1651;
      249: out3 <= 32'hfa824bfd;
      250: out3 <= 32'hfb4ab7db;
      251: out3 <= 32'hfc135231;
      252: out3 <= 32'hfcdc1342;
      253: out3 <= 32'hfda4f351;
      254: out3 <= 32'hfe6deaa1;
      255: out3 <= 32'hff36f170;
      256: out3 <= 32'h0;
      257: out3 <= 32'hfe6deaa1;
      258: out3 <= 32'hfcdc1342;
      259: out3 <= 32'hfb4ab7db;
      260: out3 <= 32'hf9ba1651;
      261: out3 <= 32'hf82a6c6a;
      262: out3 <= 32'hf69bf7c9;
      263: out3 <= 32'hf50ef5de;
      264: out3 <= 32'hf383a3e2;
      265: out3 <= 32'hf1fa3ecb;
      266: out3 <= 32'hf0730342;
      267: out3 <= 32'heeee2d9d;
      268: out3 <= 32'hed6bf9d1;
      269: out3 <= 32'hebeca36c;
      270: out3 <= 32'hea70658a;
      271: out3 <= 32'he8f77acf;
      272: out3 <= 32'he7821d59;
      273: out3 <= 32'he61086bc;
      274: out3 <= 32'he4a2eff6;
      275: out3 <= 32'he3399167;
      276: out3 <= 32'he1d4a2c8;
      277: out3 <= 32'he0745b24;
      278: out3 <= 32'hdf18f0ce;
      279: out3 <= 32'hddc29958;
      280: out3 <= 32'hdc71898d;
      281: out3 <= 32'hdb25f566;
      282: out3 <= 32'hd9e01006;
      283: out3 <= 32'hd8a00bae;
      284: out3 <= 32'hd76619b6;
      285: out3 <= 32'hd6326a88;
      286: out3 <= 32'hd5052d97;
      287: out3 <= 32'hd3de9156;
      288: out3 <= 32'hd2bec333;
      289: out3 <= 32'hd1a5ef90;
      290: out3 <= 32'hd09441bb;
      291: out3 <= 32'hcf89e3e8;
      292: out3 <= 32'hce86ff2a;
      293: out3 <= 32'hcd8bbb6d;
      294: out3 <= 32'hcc983f70;
      295: out3 <= 32'hcbacb0bf;
      296: out3 <= 32'hcac933ae;
      297: out3 <= 32'hc9edeb50;
      298: out3 <= 32'hc91af976;
      299: out3 <= 32'hc8507ea7;
      300: out3 <= 32'hc78e9a1d;
      301: out3 <= 32'hc6d569be;
      302: out3 <= 32'hc6250a18;
      303: out3 <= 32'hc57d965d;
      304: out3 <= 32'hc4df2862;
      305: out3 <= 32'hc449d892;
      306: out3 <= 32'hc3bdbdf6;
      307: out3 <= 32'hc33aee27;
      308: out3 <= 32'hc2c17d52;
      309: out3 <= 32'hc2517e31;
      310: out3 <= 32'hc1eb0209;
      311: out3 <= 32'hc18e18a7;
      312: out3 <= 32'hc13ad060;
      313: out3 <= 32'hc0f1360b;
      314: out3 <= 32'hc0b15502;
      315: out3 <= 32'hc07b371e;
      316: out3 <= 32'hc04ee4b8;
      317: out3 <= 32'hc02c64a6;
      318: out3 <= 32'hc013bc39;
      319: out3 <= 32'hc004ef3f;
      320: out3 <= 32'hc0000000;
      321: out3 <= 32'hc004ef3f;
      322: out3 <= 32'hc013bc39;
      323: out3 <= 32'hc02c64a6;
      324: out3 <= 32'hc04ee4b8;
      325: out3 <= 32'hc07b371e;
      326: out3 <= 32'hc0b15502;
      327: out3 <= 32'hc0f1360b;
      328: out3 <= 32'hc13ad060;
      329: out3 <= 32'hc18e18a7;
      330: out3 <= 32'hc1eb0209;
      331: out3 <= 32'hc2517e31;
      332: out3 <= 32'hc2c17d52;
      333: out3 <= 32'hc33aee27;
      334: out3 <= 32'hc3bdbdf6;
      335: out3 <= 32'hc449d892;
      336: out3 <= 32'hc4df2862;
      337: out3 <= 32'hc57d965d;
      338: out3 <= 32'hc6250a18;
      339: out3 <= 32'hc6d569be;
      340: out3 <= 32'hc78e9a1d;
      341: out3 <= 32'hc8507ea7;
      342: out3 <= 32'hc91af976;
      343: out3 <= 32'hc9edeb50;
      344: out3 <= 32'hcac933ae;
      345: out3 <= 32'hcbacb0bf;
      346: out3 <= 32'hcc983f70;
      347: out3 <= 32'hcd8bbb6d;
      348: out3 <= 32'hce86ff2a;
      349: out3 <= 32'hcf89e3e8;
      350: out3 <= 32'hd09441bb;
      351: out3 <= 32'hd1a5ef90;
      352: out3 <= 32'hd2bec333;
      353: out3 <= 32'hd3de9156;
      354: out3 <= 32'hd5052d97;
      355: out3 <= 32'hd6326a88;
      356: out3 <= 32'hd76619b6;
      357: out3 <= 32'hd8a00bae;
      358: out3 <= 32'hd9e01006;
      359: out3 <= 32'hdb25f566;
      360: out3 <= 32'hdc71898d;
      361: out3 <= 32'hddc29958;
      362: out3 <= 32'hdf18f0ce;
      363: out3 <= 32'he0745b24;
      364: out3 <= 32'he1d4a2c8;
      365: out3 <= 32'he3399167;
      366: out3 <= 32'he4a2eff6;
      367: out3 <= 32'he61086bc;
      368: out3 <= 32'he7821d59;
      369: out3 <= 32'he8f77acf;
      370: out3 <= 32'hea70658a;
      371: out3 <= 32'hebeca36c;
      372: out3 <= 32'hed6bf9d1;
      373: out3 <= 32'heeee2d9d;
      374: out3 <= 32'hf0730342;
      375: out3 <= 32'hf1fa3ecb;
      376: out3 <= 32'hf383a3e2;
      377: out3 <= 32'hf50ef5de;
      378: out3 <= 32'hf69bf7c9;
      379: out3 <= 32'hf82a6c6a;
      380: out3 <= 32'hf9ba1651;
      381: out3 <= 32'hfb4ab7db;
      382: out3 <= 32'hfcdc1342;
      383: out3 <= 32'hfe6deaa1;
      384: out3 <= 32'h0;
      385: out3 <= 32'h192155f;
      386: out3 <= 32'h323ecbe;
      387: out3 <= 32'h4b54825;
      388: out3 <= 32'h645e9af;
      389: out3 <= 32'h7d59396;
      390: out3 <= 32'h9640837;
      391: out3 <= 32'haf10a22;
      392: out3 <= 32'hc7c5c1e;
      393: out3 <= 32'he05c135;
      394: out3 <= 32'hf8cfcbe;
      395: out3 <= 32'h1111d263;
      396: out3 <= 32'h1294062f;
      397: out3 <= 32'h14135c94;
      398: out3 <= 32'h158f9a76;
      399: out3 <= 32'h17088531;
      400: out3 <= 32'h187de2a7;
      401: out3 <= 32'h19ef7944;
      402: out3 <= 32'h1b5d100a;
      403: out3 <= 32'h1cc66e99;
      404: out3 <= 32'h1e2b5d38;
      405: out3 <= 32'h1f8ba4dc;
      406: out3 <= 32'h20e70f32;
      407: out3 <= 32'h223d66a8;
      408: out3 <= 32'h238e7673;
      409: out3 <= 32'h24da0a9a;
      410: out3 <= 32'h261feffa;
      411: out3 <= 32'h275ff452;
      412: out3 <= 32'h2899e64a;
      413: out3 <= 32'h29cd9578;
      414: out3 <= 32'h2afad269;
      415: out3 <= 32'h2c216eaa;
      416: out3 <= 32'h2d413ccd;
      417: out3 <= 32'h2e5a1070;
      418: out3 <= 32'h2f6bbe45;
      419: out3 <= 32'h30761c18;
      420: out3 <= 32'h317900d6;
      421: out3 <= 32'h32744493;
      422: out3 <= 32'h3367c090;
      423: out3 <= 32'h34534f41;
      424: out3 <= 32'h3536cc52;
      425: out3 <= 32'h361214b0;
      426: out3 <= 32'h36e5068a;
      427: out3 <= 32'h37af8159;
      428: out3 <= 32'h387165e3;
      429: out3 <= 32'h392a9642;
      430: out3 <= 32'h39daf5e8;
      431: out3 <= 32'h3a8269a3;
      432: out3 <= 32'h3b20d79e;
      433: out3 <= 32'h3bb6276e;
      434: out3 <= 32'h3c42420a;
      435: out3 <= 32'h3cc511d9;
      436: out3 <= 32'h3d3e82ae;
      437: out3 <= 32'h3dae81cf;
      438: out3 <= 32'h3e14fdf7;
      439: out3 <= 32'h3e71e759;
      440: out3 <= 32'h3ec52fa0;
      441: out3 <= 32'h3f0ec9f5;
      442: out3 <= 32'h3f4eaafe;
      443: out3 <= 32'h3f84c8e2;
      444: out3 <= 32'h3fb11b48;
      445: out3 <= 32'h3fd39b5a;
      446: out3 <= 32'h3fec43c7;
      447: out3 <= 32'h3ffb10c1;
      448: out3 <= 32'h40000000;
      449: out3 <= 32'h3ffb10c1;
      450: out3 <= 32'h3fec43c7;
      451: out3 <= 32'h3fd39b5a;
      452: out3 <= 32'h3fb11b48;
      453: out3 <= 32'h3f84c8e2;
      454: out3 <= 32'h3f4eaafe;
      455: out3 <= 32'h3f0ec9f5;
      456: out3 <= 32'h3ec52fa0;
      457: out3 <= 32'h3e71e759;
      458: out3 <= 32'h3e14fdf7;
      459: out3 <= 32'h3dae81cf;
      460: out3 <= 32'h3d3e82ae;
      461: out3 <= 32'h3cc511d9;
      462: out3 <= 32'h3c42420a;
      463: out3 <= 32'h3bb6276e;
      464: out3 <= 32'h3b20d79e;
      465: out3 <= 32'h3a8269a3;
      466: out3 <= 32'h39daf5e8;
      467: out3 <= 32'h392a9642;
      468: out3 <= 32'h387165e3;
      469: out3 <= 32'h37af8159;
      470: out3 <= 32'h36e5068a;
      471: out3 <= 32'h361214b0;
      472: out3 <= 32'h3536cc52;
      473: out3 <= 32'h34534f41;
      474: out3 <= 32'h3367c090;
      475: out3 <= 32'h32744493;
      476: out3 <= 32'h317900d6;
      477: out3 <= 32'h30761c18;
      478: out3 <= 32'h2f6bbe45;
      479: out3 <= 32'h2e5a1070;
      480: out3 <= 32'h2d413ccd;
      481: out3 <= 32'h2c216eaa;
      482: out3 <= 32'h2afad269;
      483: out3 <= 32'h29cd9578;
      484: out3 <= 32'h2899e64a;
      485: out3 <= 32'h275ff452;
      486: out3 <= 32'h261feffa;
      487: out3 <= 32'h24da0a9a;
      488: out3 <= 32'h238e7673;
      489: out3 <= 32'h223d66a8;
      490: out3 <= 32'h20e70f32;
      491: out3 <= 32'h1f8ba4dc;
      492: out3 <= 32'h1e2b5d38;
      493: out3 <= 32'h1cc66e99;
      494: out3 <= 32'h1b5d100a;
      495: out3 <= 32'h19ef7944;
      496: out3 <= 32'h187de2a7;
      497: out3 <= 32'h17088531;
      498: out3 <= 32'h158f9a76;
      499: out3 <= 32'h14135c94;
      500: out3 <= 32'h1294062f;
      501: out3 <= 32'h1111d263;
      502: out3 <= 32'hf8cfcbe;
      503: out3 <= 32'he05c135;
      504: out3 <= 32'hc7c5c1e;
      505: out3 <= 32'haf10a22;
      506: out3 <= 32'h9640837;
      507: out3 <= 32'h7d59396;
      508: out3 <= 32'h645e9af;
      509: out3 <= 32'h4b54825;
      510: out3 <= 32'h323ecbe;
      511: out3 <= 32'h192155f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 15
// Gap: 1
module codeBlock41862(clk, reset, next_in, next_out,
   i2_in,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [7:0] i2_in;
   reg [7:0] i2;
   input [4:0] i1_in;
   reg [4:0] i1;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(14, 1) shiftFIFO_43384(.X(next), .Y(next_out), .clk(clk));


   wire  [8:0] a57;
   wire  [7:0] a59;
   wire  [8:0] a60;
   wire signed [31:0] a70;
   wire signed [31:0] a71;
   wire  [9:0] a58;
   reg  [8:0] tm11;
   reg signed [31:0] tm12;
   reg signed [31:0] tm19;
   reg signed [31:0] tm40;
   reg signed [31:0] tm54;
   reg  [9:0] a61;
   wire  [8:0] a62;
   reg signed [31:0] tm13;
   reg signed [31:0] tm20;
   reg signed [31:0] tm41;
   reg signed [31:0] tm55;
   wire  [9:0] a63;
   reg signed [31:0] tm14;
   reg signed [31:0] tm21;
   reg signed [31:0] tm42;
   reg signed [31:0] tm56;
   reg signed [31:0] tm15;
   reg signed [31:0] tm22;
   reg signed [31:0] tm43;
   reg signed [31:0] tm57;
   reg signed [31:0] tm16;
   reg signed [31:0] tm23;
   reg signed [31:0] tm44;
   reg signed [31:0] tm58;
   wire signed [31:0] tm5;
   wire signed [31:0] a64;
   wire signed [31:0] tm6;
   wire signed [31:0] a66;
   reg signed [31:0] tm17;
   reg signed [31:0] tm24;
   reg signed [31:0] tm45;
   reg signed [31:0] tm59;
   reg signed [31:0] tm7;
   reg signed [31:0] tm8;
   reg signed [31:0] tm18;
   reg signed [31:0] tm25;
   reg signed [31:0] tm46;
   reg signed [31:0] tm60;
   reg signed [31:0] tm47;
   reg signed [31:0] tm61;
   reg signed [31:0] tm48;
   reg signed [31:0] tm62;
   reg signed [31:0] tm49;
   reg signed [31:0] tm63;
   reg signed [31:0] tm50;
   reg signed [31:0] tm64;
   reg signed [31:0] tm51;
   reg signed [31:0] tm65;
   wire signed [31:0] a65;
   wire signed [31:0] a67;
   wire signed [31:0] a68;
   wire signed [31:0] a69;
   reg signed [31:0] tm52;
   reg signed [31:0] tm66;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;
   reg signed [31:0] tm53;
   reg signed [31:0] tm67;

   wire [0:0] tm1;
   assign tm1 = 1'h1;
   wire [7:0] tm2;
   assign tm2 = 8'hff;
   wire [8:0] tm4;
   assign tm4 = 9'h100;

   assign a57 = i2 << 1;
   assign a59 = tm2 << i1;
   assign a60 = {a59, tm1[0:0]};
   assign a70 = X2;
   assign a71 = X3;
   assign a62 = {a61[0:0], a61[8:1]};
   assign a64 = tm5;
   assign a66 = tm6;
   assign Y0 = tm53;
   assign Y1 = tm67;

   D1_42510 instD1inst0_42510(.addr(a63[8:0]), .out(tm5), .clk(clk));

   D2_43024 instD2inst0_43024(.addr(a63[8:0]), .out(tm6), .clk(clk));

    addfxp #(10, 1) add41881(.a({1'b0, a57}), .b({9'b0, tm1}), .clk(clk), .q(a58));    // 0
    subfxp #(10, 1) sub41913(.a({1'b0, a62}), .b({1'b0, tm4}), .clk(clk), .q(a63));    // 2
    multfix #(32, 6) m41935(.a(tm7), .b(tm18), .clk(clk), .q_sc(a65), .q_unsc(), .rst(reset));
    multfix #(32, 6) m41957(.a(tm8), .b(tm25), .clk(clk), .q_sc(a67), .q_unsc(), .rst(reset));
    multfix #(32, 6) m41975(.a(tm8), .b(tm18), .clk(clk), .q_sc(a68), .q_unsc(), .rst(reset));
    multfix #(32, 6) m41986(.a(tm7), .b(tm25), .clk(clk), .q_sc(a69), .q_unsc(), .rst(reset));
    subfxp #(32, 1) sub41964(.a(a65), .b(a67), .clk(clk), .q(Y2));    // 13
    addfxp #(32, 1) add41993(.a(a68), .b(a69), .clk(clk), .q(Y3));    // 13


   always @(posedge clk) begin
      if (reset == 1) begin
         tm7 <= 0;
         tm18 <= 0;
         tm8 <= 0;
         tm25 <= 0;
         tm8 <= 0;
         tm18 <= 0;
         tm7 <= 0;
         tm25 <= 0;
      end
      else begin
         i2 <= i2_in;
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
         tm11 <= a60;
         tm12 <= a70;
         tm19 <= a71;
         tm40 <= X0;
         tm54 <= X1;
         a61 <= (a58 & tm11);
         tm13 <= tm12;
         tm20 <= tm19;
         tm41 <= tm40;
         tm55 <= tm54;
         tm14 <= tm13;
         tm21 <= tm20;
         tm42 <= tm41;
         tm56 <= tm55;
         tm15 <= tm14;
         tm22 <= tm21;
         tm43 <= tm42;
         tm57 <= tm56;
         tm16 <= tm15;
         tm23 <= tm22;
         tm44 <= tm43;
         tm58 <= tm57;
         tm17 <= tm16;
         tm24 <= tm23;
         tm45 <= tm44;
         tm59 <= tm58;
         tm7 <= a64;
         tm8 <= a66;
         tm18 <= tm17;
         tm25 <= tm24;
         tm46 <= tm45;
         tm60 <= tm59;
         tm47 <= tm46;
         tm61 <= tm60;
         tm48 <= tm47;
         tm62 <= tm61;
         tm49 <= tm48;
         tm63 <= tm62;
         tm50 <= tm49;
         tm64 <= tm63;
         tm51 <= tm50;
         tm65 <= tm64;
         tm52 <= tm51;
         tm66 <= tm65;
         tm53 <= tm52;
         tm67 <= tm66;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock43028(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [31:0] X0_in,
      X1_in,
      X2_in,
      X3_in;

   reg   [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   shiftRegFIFO #(1, 1) shiftFIFO_43387(.X(next), .Y(next_out), .clk(clk));


   wire signed [31:0] a9;
   wire signed [31:0] a10;
   wire signed [31:0] a11;
   wire signed [31:0] a12;
   wire signed [31:0] t21;
   wire signed [31:0] t22;
   wire signed [31:0] t23;
   wire signed [31:0] t24;
   wire signed [31:0] Y0;
   wire signed [31:0] Y1;
   wire signed [31:0] Y2;
   wire signed [31:0] Y3;


   assign a9 = X0;
   assign a10 = X2;
   assign a11 = X1;
   assign a12 = X3;
   assign Y0 = t21;
   assign Y1 = t22;
   assign Y2 = t23;
   assign Y3 = t24;

    addfxp #(32, 1) add43040(.a(a9), .b(a10), .clk(clk), .q(t21));    // 0
    addfxp #(32, 1) add43055(.a(a11), .b(a12), .clk(clk), .q(t22));    // 0
    subfxp #(32, 1) sub43070(.a(a9), .b(a10), .clk(clk), .q(t23));    // 0
    subfxp #(32, 1) sub43085(.a(a11), .b(a12), .clk(clk), .q(t24));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 240
// Gap: 256
module rc43109(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3);

   output next_out;
   input clk, reset, next;

   input [31:0] X0,
      X1,
      X2,
      X3;

   output [31:0] Y0,
      Y1,
      Y2,
      Y3;

   wire [63:0] t0;
   wire [63:0] s0;
   assign t0 = {X0, X1};
   wire [63:0] t1;
   wire [63:0] s1;
   assign t1 = {X2, X3};
   assign Y0 = s0[63:32];
   assign Y1 = s0[31:0];
   assign Y2 = s1[63:32];
   assign Y3 = s1[31:0];

   perm43107 instPerm43388(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 240
// Gap: 256
module perm43107(clk, next, reset, next_out,
   x0, y0,
   x1, y1);
   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 256;
   parameter logDepth = 8;
   parameter width = 64;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 1'd0};
   assign    addr0b = {outCount, 1'd0};
   assign    addr0c = {outCount_for_rd_addr, 1'd0};
   assign    addr1 = {inCount, 1'd1};
   assign    addr1b = {outCount, 1'd1};
   assign    addr1c = {outCount_for_rd_addr, 1'd1};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_1_0, w_1_1;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    wire [width-1:0] z_1_0, z_1_1;

    wire [logDepth-1:0] u_0_0, u_0_1, u_1_0, u_1_1;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[1] ^ addr0[0];
   assign inAddr0[0] = addr0[2];
   assign inAddr0[1] = addr0[3];
   assign inAddr0[2] = addr0[4];
   assign inAddr0[3] = addr0[5];
   assign inAddr0[4] = addr0[6];
   assign inAddr0[5] = addr0[7];
   assign inAddr0[6] = addr0[8];
   assign inAddr0[7] = addr0[0];
   assign outBank0[0] = addr0b[8] ^ addr0b[0];
   assign outAddr0[0] = addr0b[1];
   assign outAddr0[1] = addr0b[2];
   assign outAddr0[2] = addr0b[3];
   assign outAddr0[3] = addr0b[4];
   assign outAddr0[4] = addr0b[5];
   assign outAddr0[5] = addr0b[6];
   assign outAddr0[6] = addr0b[7];
   assign outAddr0[7] = addr0b[8];
   assign outBank_a0[0] = addr0c[8] ^ addr0c[0];
   assign outAddr_a0[0] = addr0c[1];
   assign outAddr_a0[1] = addr0c[2];
   assign outAddr_a0[2] = addr0c[3];
   assign outAddr_a0[3] = addr0c[4];
   assign outAddr_a0[4] = addr0c[5];
   assign outAddr_a0[5] = addr0c[6];
   assign outAddr_a0[6] = addr0c[7];
   assign outAddr_a0[7] = addr0c[8];

   assign inBank1[0] = addr1[1] ^ addr1[0];
   assign inAddr1[0] = addr1[2];
   assign inAddr1[1] = addr1[3];
   assign inAddr1[2] = addr1[4];
   assign inAddr1[3] = addr1[5];
   assign inAddr1[4] = addr1[6];
   assign inAddr1[5] = addr1[7];
   assign inAddr1[6] = addr1[8];
   assign inAddr1[7] = addr1[0];
   assign outBank1[0] = addr1b[8] ^ addr1b[0];
   assign outAddr1[0] = addr1b[1];
   assign outAddr1[1] = addr1b[2];
   assign outAddr1[2] = addr1b[3];
   assign outAddr1[3] = addr1b[4];
   assign outAddr1[4] = addr1b[5];
   assign outAddr1[5] = addr1b[6];
   assign outAddr1[6] = addr1b[7];
   assign outAddr1[7] = addr1b[8];
   assign outBank_a1[0] = addr1c[8] ^ addr1c[0];
   assign outAddr_a1[0] = addr1c[1];
   assign outAddr_a1[1] = addr1c[2];
   assign outAddr_a1[2] = addr1c[3];
   assign outAddr_a1[3] = addr1c[4];
   assign outAddr_a1[4] = addr1c[5];
   assign outAddr_a1[5] = addr1c[6];
   assign outAddr_a1[6] = addr1c[7];
   assign outAddr_a1[7] = addr1c[8];

   nextReg #(238, 8) nextReg_43393(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_43396(.X(next0), .Y(next_out), .clk(clk));


   memArray512_43107 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 237)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 239)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
         if (inCount == 237) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 255) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 237)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[7];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_1), .y0(z_1_0), .y1(z_1_1), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[7];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_1), .y0(u_1_0), .y1(u_1_1), .ctrl(rda_ctrl_st_0));
endmodule

module memArray512_43107(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                clk, inFlip, outFlip);

   parameter numBanks = 2;
   parameter logBanks = 1;
   parameter depth = 256;
   parameter logDepth = 8;
   parameter width = 64;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   nextReg #(256, 8) nextReg_43401(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
endmodule



						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
