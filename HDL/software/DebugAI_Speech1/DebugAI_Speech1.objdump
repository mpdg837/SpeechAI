
DebugAI_Speech1.elf:     file format elf32-littlenios2
DebugAI_Speech1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00060180

Program Header:
    LOAD off    0x00001000 vaddr 0x00060000 paddr 0x00060000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00060020 paddr 0x00060020 align 2**12
         filesz 0x00004f54 memsz 0x00004f54 flags r-x
    LOAD off    0x00005f74 vaddr 0x00064f74 paddr 0x00064f80 align 2**12
         filesz 0x0000000c memsz 0x0000000c flags rw-
    LOAD off    0x00005f8c vaddr 0x00064f8c paddr 0x00064f8c align 2**12
         filesz 0x00000000 memsz 0x0000bcb4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00060000  00060000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00060020  00060020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004bc4  00060180  00060180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000230  00064d44  00064d44  00005d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000000c  00064f74  00064f80  00005f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000bcb4  00064f8c  00064f8c  00005f8c  2**2
                  ALLOC, SMALL_DATA
  6 .SysRAM       00000000  00070c40  00070c40  00005f80  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005f80  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000670  00000000  00000000  00005fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00010c6d  00000000  00000000  00006618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003591  00000000  00000000  00017285  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005bcf  00000000  00000000  0001a816  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000013fc  00000000  00000000  000203e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002f3e  00000000  00000000  000217e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b58  00000000  00000000  00024722  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0002927c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006a8  00000000  00000000  00029290  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002bbd2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002bbd5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002bbd8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002bbd9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000005  00000000  00000000  0002bbda  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000005  00000000  00000000  0002bbdf  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000005  00000000  00000000  0002bbe4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0002bbe9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000018  00000000  00000000  0002bbef  2**0
                  CONTENTS, READONLY
 26 .jdi          00004234  00000000  00000000  0002bc07  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00097456  00000000  00000000  0002fe3b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00060000 l    d  .entry	00000000 .entry
00060020 l    d  .exceptions	00000000 .exceptions
00060180 l    d  .text	00000000 .text
00064d44 l    d  .rodata	00000000 .rodata
00064f74 l    d  .rwdata	00000000 .rwdata
00064f8c l    d  .bss	00000000 .bss
00070c40 l    d  .SysRAM	00000000 .SysRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DebugAI_Speech1_bsp//obj/HAL/src/crt0.o
000601b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 ai.c
00060398 l     F .text	00000018 ai_isr
00000000 l    df *ABS*	00000000 ai_db.c
00000000 l    df *ABS*	00000000 ai_group.c
00000000 l    df *ABS*	00000000 dma.c
00061068 l     F .text	00000014 dma_isr
00000000 l    df *ABS*	00000000 detect.c
00000000 l    df *ABS*	00000000 ai_fs.c
00000000 l    df *ABS*	00000000 disk.c
000617c8 l     F .text	00000018 spi_isr
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 microphone.c
00061e44 l     F .text	000000bc mic_isr
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 recorder.c
00000000 l    df *ABS*	00000000 BLE.c
0006249c l     F .text	00000144 ble_isr
00000000 l    df *ABS*	00000000 communication.c
00000000 l    df *ABS*	00000000 exception.c
00000000 l    df *ABS*	00000000 gpio_distance.c
00000000 l    df *ABS*	00000000 gpio_distance_measure.c
00000000 l    df *ABS*	00000000 gpio_status_animations.c
00000000 l    df *ABS*	00000000 normalisation.c
0006364c l     F .text	00000018 nor_isr
00000000 l    df *ABS*	00000000 spectrogram.c
00063790 l     F .text	00000010 sig_isr
00000000 l    df *ABS*	00000000 loud.c
00000000 l    df *ABS*	00000000 scalex.c
00000000 l    df *ABS*	00000000 selfchecks.c
00000000 l    df *ABS*	00000000 sound.c
00000000 l    df *ABS*	00000000 speaker.c
00063fac l     F .text	00000018 audio_isr
00000000 l    df *ABS*	00000000 control_sum.c
00000000 l    df *ABS*	00000000 datatypes.c
00000000 l    df *ABS*	00000000 printnum.c
00000000 l    df *ABS*	00000000 reset.c
00000000 l    df *ABS*	00000000 timer.c
000644a0 l     F .text	000000c0 timer_isr
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00064fb0 g     O .bss	00000004 alt_instruction_exception_handler
0006425c g     F .text	00000024 is_empty_str
00061200 g     F .text	00000024 selfcheck
000606e8 g     F .text	000000fc load_linker_list
00064a84 g     F .text	0000002c alt_main
00062fb0 g     F .text	00000060 gpio_set_pin
00063ef0 g     F .text	000000bc say
00070b40 g     O .bss	00000100 alt_irq
00064f80 g       *ABS*	00000000 __flash_rwdata_start
000605dc g     F .text	00000060 isDatabase
00063e6c g     F .text	00000068 Speaker_preload
000617e0 g     F .text	000000e0 q_start_cards
00060b80 g     F .text	00000204 ai_group_selfcheck
00063118 g     F .text	00000014 person_detected
00062074 g     F .text	00000060 put_on_queue
000636f4 g     F .text	0000006c Nor_log_normalisation
000620d4 g     F .text	0000006c pick_from_queue
00064494 g     F .text	0000000c reset_processor
0006271c g     F .text	000000c8 BLE_read_data
00063ed4 g     F .text	0000001c start_speaker
00063540 g     F .text	00000094 animate_flash
000614c0 g     F .text	00000050 Prepare_file_system_list
00064d3c g     F .text	00000008 altera_nios2_gen2_irq_init
00060000 g     F .entry	0000000c __reset
000603b0 g     F .text	00000030 AI_init
00060020 g       *ABS*	00000000 __flash_exceptions_start
00064f90 g     O .bss	00000004 audio_flag
00064fa8 g     O .bss	00000004 alt_argv
0006cf74 g       *ABS*	00000000 _gp
00062ddc g     F .text	000000d0 wait_for_connection_recorder
00064888 g     F .text	00000028 memcpy
00062ebc g     F .text	00000010 gpio_button_status
000625e0 g     F .text	00000050 Is_connected
00061f38 g     F .text	000000d0 MIC_getSample
00064cc8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00064f74 g     O .rwdata	00000004 swap
000630d4 g     F .text	00000044 gpio_stop_flash
00064108 g     F .text	0000004c from64toChar
000647a4 g     F .text	00000064 .hidden __udivsi3
00070b34 g     O .bss	0000000c queue
00064f7c g     O .rwdata	00000004 JUART
0006408c g     F .text	00000040 Speaker_init
000640cc g     F .text	0000003c Control_count_sum
00064154 g     F .text	000000d4 from64toBytes
000607e4 g     F .text	00000150 load_list
0006326c g     F .text	0000008c distance_measurement
00060af0 g     F .text	00000058 selectBestSuit
00063068 g     F .text	0000006c gpio_pulse_pin
00063fc4 g     F .text	00000054 Speaker_read_first_half
00070c40 g       *ABS*	00000000 __bss_end
0006493c g     F .text	00000068 alt_iic_isr_register
0006423c g     F .text	00000020 read_32_value
0006290c g     F .text	00000098 parse_command
00064924 g     F .text	00000018 alt_ic_irq_enabled
00061f00 g     F .text	00000038 value_reducer
00063bcc g     F .text	000000fc app_selfcheck
00064fa0 g     O .bss	00000004 alt_irq_active
000603e4 g     F .text	00000078 count_diffrence
000600fc g     F .exceptions	00000060 alt_irq_handler
00060d84 g     F .text	000002e4 ai_group_analyse
00064fb4 g     O .bss	0000bb80 table
00064308 g     F .text	000000bc printnum
00064cc0 g     F .text	00000004 alt_dcache_flush_all
00064018 g     F .text	00000058 Speaker_second_first_half
00064660 g     F .text	0000004c Timer_get_time
00064f80 g       *ABS*	00000000 __ram_rwdata_end
00063304 g     F .text	000000a0 in_proper_distance
00060a94 g     F .text	0000002c isDetected
00064f74 g       *ABS*	00000000 __ram_rodata_end
00063d7c g     F .text	00000058 playing
00064808 g     F .text	00000058 .hidden __umodsi3
00064f8c g     O .bss	00000004 dma_flag
00061510 g     F .text	00000158 File_exists
00064228 g     F .text	00000014 read_16_value
00063cc8 g     F .text	000000b4 record_selfcheck
00070c40 g       *ABS*	00000000 end
00061438 g     F .text	00000048 isProperFilesystem
0006015c g     F .exceptions	00000024 alt_instruction_exception_entry
00063194 g     F .text	000000d8 irq_distance_measurement
00060ac0 g     F .text	00000030 isNotDetected
00074000 g       *ABS*	00000000 __alt_stack_pointer
00064c8c g     F .text	00000034 altera_avalon_jtag_uart_write
000603e0 g     F .text	00000004 AI_debug_report
00064ab0 g     F .text	00000170 alt_printf
00063178 g     F .text	0000001c init_measurement
00060180 g     F .text	0000003c _start
00062630 g     F .text	000000ec BLE_send_data
00063a34 g     F .text	00000190 Scale_scaleX
00064c88 g     F .text	00000004 alt_sys_init
0006045c g     F .text	00000180 AI_compare
00062eac g     F .text	00000010 gpio_start_distance_measure
00064f9c g     O .bss	00000004 timess
00063760 g     F .text	00000030 Nor_init
000637a0 g     F .text	00000134 Signal_spectrogram
00064860 g     F .text	00000028 .hidden __mulsi3
00064f74 g       *ABS*	00000000 __ram_rwdata_start
00064d44 g       *ABS*	00000000 __ram_rodata_start
00064070 g     F .text	0000001c Speaker_wait_for_finish
000638d4 g     F .text	00000030 Signal_init
00063664 g     F .text	00000090 Nor_normalizeSamples
00062ca4 g     F .text	000000bc panic
000618c0 g     F .text	0000004c load_disk
00070c40 g       *ABS*	00000000 __alt_stack_base
00063bc4 g     F .text	00000008 check_files
00061668 g     F .text	00000160 Read_file_system
00064560 g     F .text	00000060 Timer_init
00061480 g     F .text	00000040 Is_filesystem
00064f8c g       *ABS*	00000000 __bss_start
000601bc g     F .text	000001dc main
00062844 g     F .text	000000c8 init_BLE
00062ecc g     F .text	00000060 gpio_button_buffered_status
00064fa4 g     O .bss	00000004 alt_envp
00063dd4 g     F .text	00000098 Speaker_play_music
0006202c g     F .text	00000048 MIC_init
000642d4 g     F .text	00000034 compare
0006063c g     F .text	000000ac isProperDatabase
000635d4 g     F .text	00000078 animate_gpio_status
000646ac g     F .text	00000084 .hidden __divsi3
00062164 g     F .text	00000338 Recorder_record
00064298 g     F .text	0000003c str_cpy
00060000 g       *ABS*	00000000 __alt_mem_SysRAM
000629a4 g     F .text	00000084 BLE_add_word
00064d44 g       *ABS*	00000000 __flash_rodata_start
00062c2c g     F .text	00000078 startup_panic
00064280 g     F .text	00000018 str_clr
00064c68 g     F .text	00000020 alt_irq_init
0006190c g     F .text	0000001c wait_for_disk
0006107c g     F .text	00000030 DMA_init
000643c4 g     F .text	000000d0 snprintnum
000633a4 g     F .text	000000ac do_button
00061124 g     F .text	00000070 DMA_copy_to_swap
00064fac g     O .bss	00000004 alt_argc
00062f2c g     F .text	00000010 gpio_distance_check
00060020 g       .exceptions	00000000 alt_irq_entry
00061224 g     F .text	00000214 get_word
00062d60 g     F .text	0000007c wait_for_connection
00062f3c g     F .text	00000074 gpio_set_pin_irq
00060020 g       *ABS*	00000000 __ram_exceptions_start
00061928 g     F .text	00000024 check_disk
000648b0 g     F .text	00000004 alt_ic_isr_register
00064f94 g     O .bss	00000004 nor_flag
00064f80 g       *ABS*	00000000 _edata
00070c40 g       *ABS*	00000000 _end
00060180 g       *ABS*	00000000 __ram_exceptions_end
000619c8 g     F .text	0000047c app
00060b48 g     F .text	00000038 analyse_load_errors
000648ec g     F .text	00000038 alt_ic_irq_disable
000632f8 g     F .text	0000000c init_distance_measurement
00063904 g     F .text	00000130 selectLoud
00060a7c g     F .text	00000018 make_linker_table
00064730 g     F .text	00000074 .hidden __modsi3
000627e4 g     F .text	00000060 BLE_print_str
00074000 g       *ABS*	00000000 __alt_data_end
00060020 g     F .exceptions	00000000 alt_exception
00061194 g     F .text	0000006c DMA_paste_from_swap
00060934 g     F .text	00000148 readDatabase
0006000c g       .entry	00000000 _exit
00063010 g     F .text	00000058 gpio_flash_pin
00062a28 g     F .text	00000204 BLE_console
000610ac g     F .text	00000078 DMA_copy_to_ai
0006194c g     F .text	0000007c init_disk
00064c20 g     F .text	00000048 alt_putchar
00062008 g     F .text	00000014 MIC_start
00064cc4 g     F .text	00000004 alt_icache_flush_all
00064f78 g     O .rwdata	00000004 alt_priority_mask
0006312c g     F .text	0000004c gpio_init
00064f98 g     O .bss	00000004 sig_flag
000648b4 g     F .text	00000038 alt_ic_irq_enable
00063450 g     F .text	00000078 do_vbutton
000634c8 g     F .text	00000078 animate_pulse
0006201c g     F .text	00000010 MIC_stop
00062140 g     F .text	00000024 queue_init
000645c0 g     F .text	00000044 Timer_reset
000649a4 g     F .text	000000e0 alt_load
00064604 g     F .text	0000005c Timer_get_datetime



Disassembly of section .entry:

00060000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   60000:	004001b4 	movhi	at,6
    ori r1, r1, %lo(_start)
   60004:	08406014 	ori	at,at,384
    jmp r1
   60008:	0800683a 	jmp	at

0006000c <_exit>:
	...

Disassembly of section .exceptions:

00060020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   60020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   60024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   60028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   6002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   60030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   60034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   60038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   6003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   60040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   60044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   60048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   6004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   60050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   60054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   60058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   6005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   60060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   60064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   60068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   6006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   60070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   60074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   60078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   6007c:	10000326 	beq	r2,zero,6008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   60080:	20000226 	beq	r4,zero,6008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   60084:	00600fc0 	call	600fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   60088:	00000706 	br	600a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   6008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   60090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   60094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   60098:	006015c0 	call	6015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   6009c:	1000021e 	bne	r2,zero,600a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   600a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   600a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   600a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   600ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   600b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   600b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   600b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   600bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   600c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   600c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   600c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   600cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   600d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   600d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   600d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   600dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   600e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   600e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   600e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   600ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   600f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   600f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   600f8:	ef80083a 	eret

000600fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   600fc:	defffe04 	addi	sp,sp,-8
   60100:	dfc00115 	stw	ra,4(sp)
   60104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   60108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   6010c:	040001f4 	movhi	r16,7
   60110:	8402d004 	addi	r16,r16,2880

  active = alt_irq_pending ();

  do
  {
    i = 0;
   60114:	0005883a 	mov	r2,zero
    mask = 1;
   60118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   6011c:	20ca703a 	and	r5,r4,r3
   60120:	28000b26 	beq	r5,zero,60150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   60124:	100490fa 	slli	r2,r2,3
   60128:	8085883a 	add	r2,r16,r2
   6012c:	10c00017 	ldw	r3,0(r2)
   60130:	11000117 	ldw	r4,4(r2)
   60134:	183ee83a 	callr	r3
   60138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   6013c:	203ff51e 	bne	r4,zero,60114 <__alt_data_end+0xfffec114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   60140:	dfc00117 	ldw	ra,4(sp)
   60144:	dc000017 	ldw	r16,0(sp)
   60148:	dec00204 	addi	sp,sp,8
   6014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   60150:	18c7883a 	add	r3,r3,r3
      i++;
   60154:	10800044 	addi	r2,r2,1

    } while (1);
   60158:	003ff006 	br	6011c <__alt_data_end+0xfffec11c>

0006015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   6015c:	d0a00f17 	ldw	r2,-32708(gp)
   60160:	10000426 	beq	r2,zero,60174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   60164:	200b883a 	mov	r5,r4
   60168:	000d883a 	mov	r6,zero
   6016c:	013fffc4 	movi	r4,-1
   60170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   60174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   60178:	0005883a 	mov	r2,zero
   6017c:	f800283a 	ret

Disassembly of section .text:

00060180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   60180:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   60184:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
   60188:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   6018c:	d6b3dd14 	ori	gp,gp,53108
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   60190:	008001b4 	movhi	r2,6
    ori r2, r2, %lo(__bss_start)
   60194:	1093e314 	ori	r2,r2,20364

    movhi r3, %hi(__bss_end)
   60198:	00c001f4 	movhi	r3,7
    ori r3, r3, %lo(__bss_end)
   6019c:	18c31014 	ori	r3,r3,3136

    beq r2, r3, 1f
   601a0:	10c00326 	beq	r2,r3,601b0 <_start+0x30>

0:
    stw zero, (r2)
   601a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   601a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   601ac:	10fffd36 	bltu	r2,r3,601a4 <__alt_data_end+0xfffec1a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   601b0:	00649a40 	call	649a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   601b4:	0064a840 	call	64a84 <alt_main>

000601b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   601b8:	003fff06 	br	601b8 <__alt_data_end+0xfffec1b8>

000601bc <main>:

volatile uint16_t table[SWAP_SIZE_MEM];
volatile uint8_t* swap = (volatile uint8_t*) 0x10000;

int main()
{
   601bc:	deff8d04 	addi	sp,sp,-460
   601c0:	ddc07015 	stw	r23,448(sp)
   601c4:	dc406a15 	stw	r17,424(sp)
   601c8:	dc006915 	stw	r16,420(sp)
   601cc:	dfc07215 	stw	ra,456(sp)
   601d0:	df007115 	stw	fp,452(sp)
   601d4:	dd806f15 	stw	r22,444(sp)
   601d8:	dd406e15 	stw	r21,440(sp)
   601dc:	dd006d15 	stw	r20,436(sp)
   601e0:	dcc06c15 	stw	r19,432(sp)
   601e4:	dc806b15 	stw	r18,428(sp)
  Gpio_distance_t distancer;


  while(1){

	  gpio_init(&distancer);
   601e8:	dc401004 	addi	r17,sp,64

	  timer.gpio = &distancer;

	  Gpio_distance_measure_t mdistance;
	  init_measurement(&mdistance);
   601ec:	ddc03104 	addi	r23,sp,196
	  timer.mdistance = &mdistance;

	  Timer_init(&timer);
   601f0:	dc003804 	addi	r16,sp,224
  Gpio_distance_t distancer;


  while(1){

	  gpio_init(&distancer);
   601f4:	8809883a 	mov	r4,r17
   601f8:	006312c0 	call	6312c <gpio_init>

	  timer.gpio = &distancer;

	  Gpio_distance_measure_t mdistance;
	  init_measurement(&mdistance);
   601fc:	b809883a 	mov	r4,r23

  while(1){

	  gpio_init(&distancer);

	  timer.gpio = &distancer;
   60200:	dc403e15 	stw	r17,248(sp)

	  Gpio_distance_measure_t mdistance;
	  init_measurement(&mdistance);
   60204:	00631780 	call	63178 <init_measurement>
	  timer.mdistance = &mdistance;

	  Timer_init(&timer);
   60208:	8009883a 	mov	r4,r16

	  timer.gpio = &distancer;

	  Gpio_distance_measure_t mdistance;
	  init_measurement(&mdistance);
	  timer.mdistance = &mdistance;
   6020c:	ddc03d15 	stw	r23,244(sp)

	  Timer_init(&timer);
   60210:	00645600 	call	64560 <Timer_init>
	  gpio_flash_pin(&distancer,GPIO_PIN_READY);
   60214:	000b883a 	mov	r5,zero
   60218:	8809883a 	mov	r4,r17
   6021c:	00630100 	call	63010 <gpio_flash_pin>
	  comparer.flag = AI_FLAG_DOWN;
	  comparer.timer = &timer;
	  comparer.compression = AI_COMPRESSION_FOUR;


	  AI_init(&comparer);
   60220:	dd806404 	addi	r22,sp,400
	  timer.mdistance = &mdistance;

	  Timer_init(&timer);
	  gpio_flash_pin(&distancer,GPIO_PIN_READY);

	  comparer.flag = AI_FLAG_DOWN;
   60224:	d8006515 	stw	zero,404(sp)
	  comparer.timer = &timer;
	  comparer.compression = AI_COMPRESSION_FOUR;
   60228:	05000044 	movi	r20,1

	  Timer_init(&timer);
	  gpio_flash_pin(&distancer,GPIO_PIN_READY);

	  comparer.flag = AI_FLAG_DOWN;
	  comparer.timer = &timer;
   6022c:	dc006415 	stw	r16,400(sp)
	  comparer.compression = AI_COMPRESSION_FOUR;


	  AI_init(&comparer);
   60230:	b009883a 	mov	r4,r22
	  Timer_init(&timer);
	  gpio_flash_pin(&distancer,GPIO_PIN_READY);

	  comparer.flag = AI_FLAG_DOWN;
	  comparer.timer = &timer;
	  comparer.compression = AI_COMPRESSION_FOUR;
   60234:	dd006615 	stw	r20,408(sp)


	  AI_init(&comparer);
   60238:	00603b00 	call	603b0 <AI_init>


	  memories.flag = DMA_FLAG_DOWN;
	  memories.swap = swap;
   6023c:	d0a00017 	ldw	r2,-32768(gp)


	  AI_init(&comparer);


	  memories.flag = DMA_FLAG_DOWN;
   60240:	d8005a15 	stw	zero,360(sp)
	  memories.table = table;

	  memories.table_size = SWAP_SIZE_MEM;
	  memories.swap_size = SWAP_SIZE_MEM;

	  DMA_init(&memories);
   60244:	dc805804 	addi	r18,sp,352

	  AI_init(&comparer);


	  memories.flag = DMA_FLAG_DOWN;
	  memories.swap = swap;
   60248:	d8805915 	stw	r2,356(sp)
	  memories.table = table;
   6024c:	008001b4 	movhi	r2,6
   60250:	1093ed04 	addi	r2,r2,20404
   60254:	d8805815 	stw	r2,352(sp)

	  memories.table_size = SWAP_SIZE_MEM;
   60258:	00977004 	movi	r2,24000
   6025c:	d8805b15 	stw	r2,364(sp)
	  memories.swap_size = SWAP_SIZE_MEM;

	  DMA_init(&memories);
   60260:	9009883a 	mov	r4,r18
	  memories.flag = DMA_FLAG_DOWN;
	  memories.swap = swap;
	  memories.table = table;

	  memories.table_size = SWAP_SIZE_MEM;
	  memories.swap_size = SWAP_SIZE_MEM;
   60264:	d8805c15 	stw	r2,368(sp)

	  DMA_init(&memories);

	  normaliser.flag = NORMALISATION_FLAG_DOWN;
	  Nor_init(&normaliser);
   60268:	dcc06704 	addi	r19,sp,412
	  memories.table = table;

	  memories.table_size = SWAP_SIZE_MEM;
	  memories.swap_size = SWAP_SIZE_MEM;

	  DMA_init(&memories);
   6026c:	006107c0 	call	6107c <DMA_init>

	  normaliser.flag = NORMALISATION_FLAG_DOWN;
	  Nor_init(&normaliser);
   60270:	9809883a 	mov	r4,r19
	  memories.table_size = SWAP_SIZE_MEM;
	  memories.swap_size = SWAP_SIZE_MEM;

	  DMA_init(&memories);

	  normaliser.flag = NORMALISATION_FLAG_DOWN;
   60274:	d8006715 	stw	zero,412(sp)
	  Nor_init(&normaliser);
   60278:	00637600 	call	63760 <Nor_init>

	  spectrogramer.flag = SPECTROGRAM_FLAG_DOWN;
   6027c:	dd005d15 	stw	r20,372(sp)
	  spectrogramer.memories = &memories;
   60280:	dc805e15 	stw	r18,376(sp)
	  spectrogramer.normaliser = &normaliser;
	  Signal_init(&spectrogramer);
   60284:	d9005d04 	addi	r4,sp,372
	  normaliser.flag = NORMALISATION_FLAG_DOWN;
	  Nor_init(&normaliser);

	  spectrogramer.flag = SPECTROGRAM_FLAG_DOWN;
	  spectrogramer.memories = &memories;
	  spectrogramer.normaliser = &normaliser;
   60288:	dcc05f15 	stw	r19,380(sp)

	  microphone.flag = MICROPHONE_FLAG_DOWN;
	  microphone.sound = 0;
	  microphone.mic_queue = &mic_queue;

	  MIC_init(&microphone);
   6028c:	dd405304 	addi	r21,sp,332
	  Nor_init(&normaliser);

	  spectrogramer.flag = SPECTROGRAM_FLAG_DOWN;
	  spectrogramer.memories = &memories;
	  spectrogramer.normaliser = &normaliser;
	  Signal_init(&spectrogramer);
   60290:	00638d40 	call	638d4 <Signal_init>
	  Microphone_huge_sound_t sounds[STANDARD_QUEUE_SIZE];
	  Queue_t mic_queue;

	  mic_queue.fifo_sound = sounds;

	  microphone.flag = MICROPHONE_FLAG_DOWN;
   60294:	d8005315 	stw	zero,332(sp)
	  microphone.sound = 0;
	  microphone.mic_queue = &mic_queue;
   60298:	d8806104 	addi	r2,sp,388
	  Queue_t mic_queue;

	  mic_queue.fifo_sound = sounds;

	  microphone.flag = MICROPHONE_FLAG_DOWN;
	  microphone.sound = 0;
   6029c:	d8005415 	stw	zero,336(sp)
	  microphone.mic_queue = &mic_queue;

	  MIC_init(&microphone);
   602a0:	a809883a 	mov	r4,r21

	  mic_queue.fifo_sound = sounds;

	  microphone.flag = MICROPHONE_FLAG_DOWN;
	  microphone.sound = 0;
	  microphone.mic_queue = &mic_queue;
   602a4:	d8805615 	stw	r2,344(sp)
	  Signal_init(&spectrogramer);

	  Microphone_huge_sound_t sounds[STANDARD_QUEUE_SIZE];
	  Queue_t mic_queue;

	  mic_queue.fifo_sound = sounds;
   602a8:	dec06115 	stw	sp,388(sp)

	  microphone.flag = MICROPHONE_FLAG_DOWN;
	  microphone.sound = 0;
	  microphone.mic_queue = &mic_queue;

	  MIC_init(&microphone);
   602ac:	006202c0 	call	6202c <MIC_init>

	  disk.card = DISK_SD_ALL_CARD;
   602b0:	d8005115 	stw	zero,324(sp)
	  disk.flag = DISK_FLAG_DOWN;
   602b4:	d8004f15 	stw	zero,316(sp)
	  disk.memories = &memories;
   602b8:	dc805215 	stw	r18,328(sp)
	  disk.status = DISK_STATUS_NONE;
   602bc:	d8005015 	stw	zero,320(sp)

	  speaker.flag = SPEAKER_FLAG_DOWN;
   602c0:	d8004a15 	stw	zero,296(sp)
	  speaker.disk = &disk;
   602c4:	dd004e04 	addi	r20,sp,312
   602c8:	dd004b15 	stw	r20,300(sp)
	  speaker.volume = 15;
   602cc:	008003c4 	movi	r2,15
   602d0:	d8804d05 	stb	r2,308(sp)
	  speaker.gpio = &distancer;
	  Speaker_init(&speaker);
   602d4:	d9004904 	addi	r4,sp,292
	  disk.status = DISK_STATUS_NONE;

	  speaker.flag = SPEAKER_FLAG_DOWN;
	  speaker.disk = &disk;
	  speaker.volume = 15;
	  speaker.gpio = &distancer;
   602d8:	dc404c15 	stw	r17,304(sp)
	  Speaker_init(&speaker);
   602dc:	006408c0 	call	6408c <Speaker_init>

	  disk.timer = &timer;



	  Disk_status_t d_status = init_disk(&disk);
   602e0:	a009883a 	mov	r4,r20
	  speaker.disk = &disk;
	  speaker.volume = 15;
	  speaker.gpio = &distancer;
	  Speaker_init(&speaker);

	  disk.timer = &timer;
   602e4:	dc004e15 	stw	r16,312(sp)



	  Disk_status_t d_status = init_disk(&disk);
   602e8:	006194c0 	call	6194c <init_disk>

	  Timer_reset(&timer);
   602ec:	8009883a 	mov	r4,r16

	  disk.timer = &timer;



	  Disk_status_t d_status = init_disk(&disk);
   602f0:	1039883a 	mov	fp,r2

	  Timer_reset(&timer);
   602f4:	00645c00 	call	645c0 <Timer_reset>
	  while(Timer_get_time(&timer) < 500);
   602f8:	00c07cc4 	movi	r3,499
   602fc:	8009883a 	mov	r4,r16
   60300:	d8c06815 	stw	r3,416(sp)
   60304:	00646600 	call	64660 <Timer_get_time>
   60308:	d8c06817 	ldw	r3,416(sp)
   6030c:	18bffb2e 	bgeu	r3,r2,602fc <__alt_data_end+0xfffec2fc>

	  if(d_status == DISK_STATUS_ERROR){
   60310:	00800084 	movi	r2,2
   60314:	e080051e 	bne	fp,r2,6032c <main+0x170>
		  startup_panic(&buart,&distancer ,PANIC_NO_DISK);
   60318:	01800044 	movi	r6,1
   6031c:	880b883a 	mov	r5,r17
   60320:	d9001c04 	addi	r4,sp,112
   60324:	0062c2c0 	call	62c2c <startup_panic>
   60328:	003fb206 	br	601f4 <__alt_data_end+0xfffec1f4>
		  continue;
	  }

	  Timer_reset(&timer);
   6032c:	8009883a 	mov	r4,r16
   60330:	00645c00 	call	645c0 <Timer_reset>
	  while(Timer_get_time(&timer) < 500);
   60334:	07007cc4 	movi	fp,499
   60338:	8009883a 	mov	r4,r16
   6033c:	00646600 	call	64660 <Timer_get_time>
   60340:	e0bffd2e 	bgeu	fp,r2,60338 <__alt_data_end+0xfffec338>


	  uint8_t buffer_in[STANDARD_BLE_BUFFER_SIZE];
	  uint8_t buffer_out[STANDARD_BLE_BUFFER_SIZE];

	  buart.message_in = buffer_in;
   60344:	d8804404 	addi	r2,sp,272
   60348:	d8801e15 	stw	r2,120(sp)
	  buart.message_out = buffer_out;
   6034c:	d8803f04 	addi	r2,sp,252
   60350:	d8802215 	stw	r2,136(sp)
	  buart.timer = &timer;
   60354:	dc002615 	stw	r16,152(sp)

	  volatile Device_tree_t tree;

	  tree.comparer = &comparer;
   60358:	dd802715 	stw	r22,156(sp)
	  tree.disk = &disk;
   6035c:	dd002c15 	stw	r20,176(sp)
	  tree.memories = &memories;
   60360:	dc802815 	stw	r18,160(sp)
	  tree.microphone = &microphone;
   60364:	dd402b15 	stw	r21,172(sp)
	  tree.normaliser = &normaliser;
   60368:	dcc02915 	stw	r19,164(sp)
	  tree.speaker = &speaker;
   6036c:	d8804904 	addi	r2,sp,292
   60370:	d8802d15 	stw	r2,180(sp)
	  tree.spectrogramer = &spectrogramer;
   60374:	d8805d04 	addi	r2,sp,372
   60378:	d8802a15 	stw	r2,168(sp)
	  tree.distancer = &distancer;
   6037c:	dc403015 	stw	r17,192(sp)
	  tree.timer = &timer;
   60380:	dc002e15 	stw	r16,184(sp)
	  tree.buart = &buart;
   60384:	d8801c04 	addi	r2,sp,112

	  app(&tree);
   60388:	d9002704 	addi	r4,sp,156
	  tree.normaliser = &normaliser;
	  tree.speaker = &speaker;
	  tree.spectrogramer = &spectrogramer;
	  tree.distancer = &distancer;
	  tree.timer = &timer;
	  tree.buart = &buart;
   6038c:	d8802f15 	stw	r2,188(sp)

	  app(&tree);
   60390:	00619c80 	call	619c8 <app>
   60394:	003f9706 	br	601f4 <__alt_data_end+0xfffec1f4>

00060398 <ai_isr>:


static void ai_isr(void* context){

	AI_comparer_t* comparer = (AI_comparer_t*) context;
	comparer -> flag = AI_FLAG_UP;
   60398:	00800044 	movi	r2,1
   6039c:	20800115 	stw	r2,4(r4)

	*AI_RET_IRQ = 0;
   603a0:	00800134 	movhi	r2,4
   603a4:	10800504 	addi	r2,r2,20
   603a8:	10000015 	stw	zero,0(r2)
   603ac:	f800283a 	ret

000603b0 <AI_init>:
}

void AI_init(volatile AI_comparer_t* comparer){
   603b0:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(AI_COMPARER_0_IRQ_INTERRUPT_CONTROLLER_ID, AI_COMPARER_0_IRQ, ai_isr, (AI_comparer_t*)comparer, 0);
   603b4:	018001b4 	movhi	r6,6
   603b8:	200f883a 	mov	r7,r4
   603bc:	d8000015 	stw	zero,0(sp)
   603c0:	3180e604 	addi	r6,r6,920
   603c4:	014000c4 	movi	r5,3
   603c8:	0009883a 	mov	r4,zero
	comparer -> flag = AI_FLAG_UP;

	*AI_RET_IRQ = 0;
}

void AI_init(volatile AI_comparer_t* comparer){
   603cc:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(AI_COMPARER_0_IRQ_INTERRUPT_CONTROLLER_ID, AI_COMPARER_0_IRQ, ai_isr, (AI_comparer_t*)comparer, 0);
   603d0:	00648b00 	call	648b0 <alt_ic_isr_register>

}
   603d4:	dfc00117 	ldw	ra,4(sp)
   603d8:	dec00204 	addi	sp,sp,8
   603dc:	f800283a 	ret

000603e0 <AI_debug_report>:

void AI_debug_report(AI_comparasion_operation_t* operation){
   603e0:	f800283a 	ret

000603e4 <count_diffrence>:
}

AI_amount_t count_diffrence(){
	AI_amount_t diff = 0;

	AI_decision_t decision_inside = *AI_RESULT;
   603e4:	00800134 	movhi	r2,4
   603e8:	10800e04 	addi	r2,r2,56
	AI_amount_t number = 0;

	AI_delta_t last_delta = 0x0;

	volatile AI_properties_t* mem = (AI_properties_t*) AI_SUM1;
   603ec:	01000134 	movhi	r4,4

	for(AI_enum_t n=0;n<8;n++){
		AI_spect_num_t spect = (*mem >> 24) & 0xF;
		AI_delta_t delta = (*mem) & 0xFFFFFF;
   603f0:	02404034 	movhi	r9,256

	AI_delta_t last_delta = 0x0;

	volatile AI_properties_t* mem = (AI_properties_t*) AI_SUM1;

	for(AI_enum_t n=0;n<8;n++){
   603f4:	01c00134 	movhi	r7,4
}

AI_amount_t count_diffrence(){
	AI_amount_t diff = 0;

	AI_decision_t decision_inside = *AI_RESULT;
   603f8:	12000017 	ldw	r8,0(r2)
	AI_amount_t number = 0;

	AI_delta_t last_delta = 0x0;

	volatile AI_properties_t* mem = (AI_properties_t*) AI_SUM1;
   603fc:	21000404 	addi	r4,r4,16
	AI_amount_t diff = 0;

	AI_decision_t decision_inside = *AI_RESULT;
	AI_amount_t number = 0;

	AI_delta_t last_delta = 0x0;
   60400:	000d883a 	mov	r6,zero

AI_amount_t count_diffrence(){
	AI_amount_t diff = 0;

	AI_decision_t decision_inside = *AI_RESULT;
	AI_amount_t number = 0;
   60404:	0007883a 	mov	r3,zero
#endif

}

AI_amount_t count_diffrence(){
	AI_amount_t diff = 0;
   60408:	0005883a 	mov	r2,zero

	volatile AI_properties_t* mem = (AI_properties_t*) AI_SUM1;

	for(AI_enum_t n=0;n<8;n++){
		AI_spect_num_t spect = (*mem >> 24) & 0xF;
		AI_delta_t delta = (*mem) & 0xFFFFFF;
   6040c:	4a7fffc4 	addi	r9,r9,-1

		if(spect == decision_inside){
			  diff += delta;
			  number ++;

			  if(number == DIFF_MAX_SPECTS){
   60410:	02800204 	movi	r10,8

	AI_delta_t last_delta = 0x0;

	volatile AI_properties_t* mem = (AI_properties_t*) AI_SUM1;

	for(AI_enum_t n=0;n<8;n++){
   60414:	39c00c04 	addi	r7,r7,48
		AI_spect_num_t spect = (*mem >> 24) & 0xF;
   60418:	21400017 	ldw	r5,0(r4)
		AI_delta_t delta = (*mem) & 0xFFFFFF;
   6041c:	22c00017 	ldw	r11,0(r4)

		if(spect == decision_inside){
   60420:	280ad63a 	srli	r5,r5,24
   60424:	294003cc 	andi	r5,r5,15
   60428:	4140041e 	bne	r8,r5,6043c <count_diffrence+0x58>

	volatile AI_properties_t* mem = (AI_properties_t*) AI_SUM1;

	for(AI_enum_t n=0;n<8;n++){
		AI_spect_num_t spect = (*mem >> 24) & 0xF;
		AI_delta_t delta = (*mem) & 0xFFFFFF;
   6042c:	5a4c703a 	and	r6,r11,r9

		if(spect == decision_inside){
			  diff += delta;
			  number ++;
   60430:	18c00044 	addi	r3,r3,1
	for(AI_enum_t n=0;n<8;n++){
		AI_spect_num_t spect = (*mem >> 24) & 0xF;
		AI_delta_t delta = (*mem) & 0xFFFFFF;

		if(spect == decision_inside){
			  diff += delta;
   60434:	1185883a 	add	r2,r2,r6
			  number ++;

			  if(number == DIFF_MAX_SPECTS){
   60438:	1a800726 	beq	r3,r10,60458 <count_diffrence+0x74>
				  return diff;
			  }
			  last_delta = delta;
		 }

		 mem ++;
   6043c:	21000104 	addi	r4,r4,4

	AI_delta_t last_delta = 0x0;

	volatile AI_properties_t* mem = (AI_properties_t*) AI_SUM1;

	for(AI_enum_t n=0;n<8;n++){
   60440:	21fff51e 	bne	r4,r7,60418 <__alt_data_end+0xfffec418>

		 mem ++;

	}

	while(number < DIFF_MAX_SPECTS){
   60444:	010001c4 	movi	r4,7
   60448:	20c00336 	bltu	r4,r3,60458 <count_diffrence+0x74>
		number ++;
   6044c:	18c00044 	addi	r3,r3,1
   60450:	1185883a 	add	r2,r2,r6
   60454:	003ffc06 	br	60448 <__alt_data_end+0xfffec448>
		diff += last_delta;
	}

	return diff;
}
   60458:	f800283a 	ret

0006045c <AI_compare>:

AI_state_t AI_compare(AI_decision_result_t* decision, volatile AI_comparer_t* comparer, AI_comparasion_t* comparasion){
   6045c:	defffa04 	addi	sp,sp,-24
   60460:	dc800215 	stw	r18,8(sp)

	AI_comparasion_operation_t operation = {0,0,0,0};

	operation.packet = comparasion -> packet_size - 1;
	operation.size = ((comparasion -> kb_spect_size) * AI_KB_SIZE) - 1;
   60464:	34800417 	ldw	r18,16(r6)
	}

	return diff;
}

AI_state_t AI_compare(AI_decision_result_t* decision, volatile AI_comparer_t* comparer, AI_comparasion_t* comparasion){
   60468:	dd000415 	stw	r20,16(sp)
   6046c:	2829883a 	mov	r20,r5

	AI_comparasion_operation_t operation = {0,0,0,0};

	operation.packet = comparasion -> packet_size - 1;
	operation.size = ((comparasion -> kb_spect_size) * AI_KB_SIZE) - 1;
	operation.kB_size = (comparasion -> kb_spect_size) * comparasion -> spects;
   60470:	31400117 	ldw	r5,4(r6)
	}

	return diff;
}

AI_state_t AI_compare(AI_decision_result_t* decision, volatile AI_comparer_t* comparer, AI_comparasion_t* comparasion){
   60474:	dcc00315 	stw	r19,12(sp)
   60478:	2027883a 	mov	r19,r4

	AI_comparasion_operation_t operation = {0,0,0,0};

	operation.packet = comparasion -> packet_size - 1;
	operation.size = ((comparasion -> kb_spect_size) * AI_KB_SIZE) - 1;
	operation.kB_size = (comparasion -> kb_spect_size) * comparasion -> spects;
   6047c:	9009883a 	mov	r4,r18
	}

	return diff;
}

AI_state_t AI_compare(AI_decision_result_t* decision, volatile AI_comparer_t* comparer, AI_comparasion_t* comparasion){
   60480:	dfc00515 	stw	ra,20(sp)
   60484:	dc400115 	stw	r17,4(sp)
   60488:	dc000015 	stw	r16,0(sp)

	AI_comparasion_operation_t operation = {0,0,0,0};

	operation.packet = comparasion -> packet_size - 1;
   6048c:	34400217 	ldw	r17,8(r6)
	}

	return diff;
}

AI_state_t AI_compare(AI_decision_result_t* decision, volatile AI_comparer_t* comparer, AI_comparasion_t* comparasion){
   60490:	3021883a 	mov	r16,r6

	AI_comparasion_operation_t operation = {0,0,0,0};

	operation.packet = comparasion -> packet_size - 1;
	operation.size = ((comparasion -> kb_spect_size) * AI_KB_SIZE) - 1;
	operation.kB_size = (comparasion -> kb_spect_size) * comparasion -> spects;
   60494:	00648600 	call	64860 <__mulsi3>

	*AI_LIMIT = 15;
   60498:	00c00134 	movhi	r3,4
   6049c:	010003c4 	movi	r4,15
   604a0:	18c00104 	addi	r3,r3,4
   604a4:	19000015 	stw	r4,0(r3)
	*AI_COMPRESS = comparer -> compression;
   604a8:	a1000217 	ldw	r4,8(r20)

AI_state_t AI_compare(AI_decision_result_t* decision, volatile AI_comparer_t* comparer, AI_comparasion_t* comparasion){

	AI_comparasion_operation_t operation = {0,0,0,0};

	operation.packet = comparasion -> packet_size - 1;
   604ac:	8c7fffc4 	addi	r17,r17,-1
	operation.kB_size = (comparasion -> kb_spect_size) * comparasion -> spects;

	*AI_LIMIT = 15;
	*AI_COMPRESS = comparer -> compression;

	*AI_CONFIG = (operation.packet << 16) | operation.size;
   604b0:	902492ba 	slli	r18,r18,10
	operation.packet = comparasion -> packet_size - 1;
	operation.size = ((comparasion -> kb_spect_size) * AI_KB_SIZE) - 1;
	operation.kB_size = (comparasion -> kb_spect_size) * comparasion -> spects;

	*AI_LIMIT = 15;
	*AI_COMPRESS = comparer -> compression;
   604b4:	00c00134 	movhi	r3,4

	*AI_CONFIG = (operation.packet << 16) | operation.size;
   604b8:	8822943a 	slli	r17,r17,16
	operation.packet = comparasion -> packet_size - 1;
	operation.size = ((comparasion -> kb_spect_size) * AI_KB_SIZE) - 1;
	operation.kB_size = (comparasion -> kb_spect_size) * comparasion -> spects;

	*AI_LIMIT = 15;
	*AI_COMPRESS = comparer -> compression;
   604bc:	18c00404 	addi	r3,r3,16
   604c0:	19000015 	stw	r4,0(r3)

	*AI_CONFIG = (operation.packet << 16) | operation.size;
   604c4:	94bfffc4 	addi	r18,r18,-1
   604c8:	00c00134 	movhi	r3,4
   604cc:	9462b03a 	or	r17,r18,r17
   604d0:	18c00204 	addi	r3,r3,8
   604d4:	1c400015 	stw	r17,0(r3)
	*AI_MAX_VAL = comparasion -> max_diffrence;
   604d8:	80c00317 	ldw	r3,12(r16)
   604dc:	04400134 	movhi	r17,4
   604e0:	8c400304 	addi	r17,r17,12
   604e4:	88c00015 	stw	r3,0(r17)


	operation.sectors = (operation.kB_size << 1) + 1;

	*AI_REG = ( comparasion -> start << 16) | (operation.sectors);
   604e8:	80c00017 	ldw	r3,0(r16)
   604ec:	1085883a 	add	r2,r2,r2
   604f0:	10800044 	addi	r2,r2,1
   604f4:	1806943a 	slli	r3,r3,16
   604f8:	10c4b03a 	or	r2,r2,r3
   604fc:	00c00134 	movhi	r3,4
   60500:	18800015 	stw	r2,0(r3)

	 Timer_reset(comparer ->timer);
   60504:	a1000017 	ldw	r4,0(r20)
   60508:	00645c00 	call	645c0 <Timer_reset>
	 comparer -> flag = AI_FLAG_DOWN;
   6050c:	a0000115 	stw	zero,4(r20)
	 while(comparer -> flag == AI_FLAG_DOWN){
   60510:	a0800117 	ldw	r2,4(r20)
   60514:	1000121e 	bne	r2,zero,60560 <AI_compare+0x104>
		  if(*AI_ERROR != 0){
   60518:	88c00017 	ldw	r3,0(r17)
   6051c:	00800134 	movhi	r2,4
   60520:	10800304 	addi	r2,r2,12
   60524:	183ffa26 	beq	r3,zero,60510 <__alt_data_end+0xfffec510>
			  if((*AI_ERROR & 0x1) == 0x1){
   60528:	10c00017 	ldw	r3,0(r2)
   6052c:	18c0004c 	andi	r3,r3,1
   60530:	1800211e 	bne	r3,zero,605b8 <AI_compare+0x15c>

				  return AI_DISK_ERROR;
			  }
			  if((*AI_ERROR & 0x2) == 0x2){
   60534:	10c00017 	ldw	r3,0(r2)
   60538:	18c0008c 	andi	r3,r3,2
   6053c:	18001c1e 	bne	r3,zero,605b0 <AI_compare+0x154>
				  return AI_NO_DISK_DETECT;
			  }
			  if((*AI_ERROR & 0x4) == 0x4){
   60540:	10c00017 	ldw	r3,0(r2)
   60544:	18c0010c 	andi	r3,r3,4
   60548:	18001b1e 	bne	r3,zero,605b8 <AI_compare+0x15c>
				  return AI_DISK_ERROR;
			  }
			  if((*AI_ERROR & 0x8) == 0x8){
   6054c:	10800017 	ldw	r2,0(r2)
   60550:	1080020c 	andi	r2,r2,8
   60554:	103fee26 	beq	r2,zero,60510 <__alt_data_end+0xfffec510>
				  return AI_FIFO_OVERFLOW;
   60558:	00bfff04 	movi	r2,-4
   6055c:	00001706 	br	605bc <AI_compare+0x160>

	 }

	 AI_debug_report(&operation);

	 AI_decision_t decision_inside = *AI_RESULT;
   60560:	00800134 	movhi	r2,4
   60564:	10800e04 	addi	r2,r2,56
   60568:	14800017 	ldw	r18,0(r2)
   6056c:	04400134 	movhi	r17,4

	  if(decision_inside < AI_SPECTS_AMOUNT){
   60570:	008001c4 	movi	r2,7
   60574:	8c400f04 	addi	r17,r17,60
   60578:	14800736 	bltu	r2,r18,60598 <AI_compare+0x13c>
		  comparasion -> diffrence = count_diffrence();
   6057c:	00603e40 	call	603e4 <count_diffrence>
   60580:	80800515 	stw	r2,20(r16)

		  decision -> decision = decision_inside;
   60584:	9c800015 	stw	r18,0(r19)
		  decision -> crc = *AI_CRC_32;
   60588:	88800017 	ldw	r2,0(r17)
   6058c:	98800115 	stw	r2,4(r19)

		  return AI_OK;
   60590:	0005883a 	mov	r2,zero
   60594:	00000906 	br	605bc <AI_compare+0x160>
	  }else{
		  decision -> decision = 0;
   60598:	98000015 	stw	zero,0(r19)
		  decision -> crc = *AI_CRC_32;
   6059c:	88800017 	ldw	r2,0(r17)
   605a0:	98800115 	stw	r2,4(r19)

		  comparasion -> diffrence = 0;
   605a4:	80000515 	stw	zero,20(r16)
	  }

	  return AI_CANT_DETECT;
   605a8:	00bfff84 	movi	r2,-2
   605ac:	00000306 	br	605bc <AI_compare+0x160>
			  if((*AI_ERROR & 0x1) == 0x1){

				  return AI_DISK_ERROR;
			  }
			  if((*AI_ERROR & 0x2) == 0x2){
				  return AI_NO_DISK_DETECT;
   605b0:	00bfff44 	movi	r2,-3
   605b4:	00000106 	br	605bc <AI_compare+0x160>
	 comparer -> flag = AI_FLAG_DOWN;
	 while(comparer -> flag == AI_FLAG_DOWN){
		  if(*AI_ERROR != 0){
			  if((*AI_ERROR & 0x1) == 0x1){

				  return AI_DISK_ERROR;
   605b8:	00bfffc4 	movi	r2,-1

		  comparasion -> diffrence = 0;
	  }

	  return AI_CANT_DETECT;
}
   605bc:	dfc00517 	ldw	ra,20(sp)
   605c0:	dd000417 	ldw	r20,16(sp)
   605c4:	dcc00317 	ldw	r19,12(sp)
   605c8:	dc800217 	ldw	r18,8(sp)
   605cc:	dc400117 	ldw	r17,4(sp)
   605d0:	dc000017 	ldw	r16,0(sp)
   605d4:	dec00604 	addi	sp,sp,24
   605d8:	f800283a 	ret

000605dc <isDatabase>:
#define IS_CORRECT_SECTOR(sector)		(sector < 0xFFFF)




AI_bool_t isDatabase(uint8_t* read){
   605dc:	defffe04 	addi	sp,sp,-8
   605e0:	dc000015 	stw	r16,0(sp)

	if(compare(AI_HEADER,read,MAX_HEADER)){
   605e4:	200b883a 	mov	r5,r4
#define IS_CORRECT_SECTOR(sector)		(sector < 0xFFFF)




AI_bool_t isDatabase(uint8_t* read){
   605e8:	2021883a 	mov	r16,r4

	if(compare(AI_HEADER,read,MAX_HEADER)){
   605ec:	010001b4 	movhi	r4,6
   605f0:	01800104 	movi	r6,4
   605f4:	21135104 	addi	r4,r4,19780
#define IS_CORRECT_SECTOR(sector)		(sector < 0xFFFF)




AI_bool_t isDatabase(uint8_t* read){
   605f8:	dfc00115 	stw	ra,4(sp)

	if(compare(AI_HEADER,read,MAX_HEADER)){
   605fc:	00642d40 	call	642d4 <compare>
   60600:	10000926 	beq	r2,zero,60628 <isDatabase+0x4c>
		uint8_t version = (VERSION << 4) | SUBVERSION;

		if(read[4] >= version){
   60604:	80800103 	ldbu	r2,4(r16)
   60608:	00c003c4 	movi	r3,15
   6060c:	1880062e 	bgeu	r3,r2,60628 <isDatabase+0x4c>

			if(read[6] != PHASE_PATTERN_1){
   60610:	80c00183 	ldbu	r3,6(r16)
   60614:	00802a84 	movi	r2,170
   60618:	1880031e 	bne	r3,r2,60628 <isDatabase+0x4c>
				return AI_FALSE;
			}

			return AI_TRUE;
		}else{
			return AI_FALSE;
   6061c:	808001c3 	ldbu	r2,7(r16)
   60620:	10802ee0 	cmpeqi	r2,r2,187
   60624:	00000106 	br	6062c <isDatabase+0x50>
		}
	}else{
		return AI_FALSE;
   60628:	0005883a 	mov	r2,zero
	}

}
   6062c:	dfc00117 	ldw	ra,4(sp)
   60630:	dc000017 	ldw	r16,0(sp)
   60634:	dec00204 	addi	sp,sp,8
   60638:	f800283a 	ret

0006063c <isProperDatabase>:

AI_bool_t isProperDatabase(uint8_t* read){
   6063c:	deffea04 	addi	sp,sp,-88
   60640:	dc001415 	stw	r16,80(sp)
	uint8_t app_name[16];
	uint8_t vendor_name[32];
	uint8_t database_name[32];

	if(from64toBytes(&read[8],app_name,12)){
   60644:	01800304 	movi	r6,12
		return AI_FALSE;
	}

}

AI_bool_t isProperDatabase(uint8_t* read){
   60648:	2021883a 	mov	r16,r4
	uint8_t app_name[16];
	uint8_t vendor_name[32];
	uint8_t database_name[32];

	if(from64toBytes(&read[8],app_name,12)){
   6064c:	d9401004 	addi	r5,sp,64
   60650:	21000204 	addi	r4,r4,8
		return AI_FALSE;
	}

}

AI_bool_t isProperDatabase(uint8_t* read){
   60654:	dfc01515 	stw	ra,84(sp)
	uint8_t app_name[16];
	uint8_t vendor_name[32];
	uint8_t database_name[32];

	if(from64toBytes(&read[8],app_name,12)){
   60658:	00641540 	call	64154 <from64toBytes>
   6065c:	10001d1e 	bne	r2,zero,606d4 <isProperDatabase+0x98>
		return AI_FALSE;
	}

	if(!compare(APP_NAME,app_name,16)){
   60660:	010001b4 	movhi	r4,6
   60664:	01800404 	movi	r6,16
   60668:	d9401004 	addi	r5,sp,64
   6066c:	21135304 	addi	r4,r4,19788
   60670:	00642d40 	call	642d4 <compare>
   60674:	10001726 	beq	r2,zero,606d4 <isProperDatabase+0x98>
		return AI_FALSE;
	}

	if(from64toBytes(&read[21],vendor_name,24)){
   60678:	01800604 	movi	r6,24
   6067c:	d9400804 	addi	r5,sp,32
   60680:	81000544 	addi	r4,r16,21
   60684:	00641540 	call	64154 <from64toBytes>
   60688:	1000121e 	bne	r2,zero,606d4 <isProperDatabase+0x98>
		return AI_FALSE;
	}

	if(!compare(VENDOR_NAME,vendor_name,32)){
   6068c:	01800804 	movi	r6,32
   60690:	010001b4 	movhi	r4,6
   60694:	d98b883a 	add	r5,sp,r6
   60698:	21135604 	addi	r4,r4,19800
   6069c:	00642d40 	call	642d4 <compare>
   606a0:	10000c26 	beq	r2,zero,606d4 <isProperDatabase+0x98>
		return AI_FALSE;
	}


	if(from64toBytes(&read[45],database_name,24)){
   606a4:	01800604 	movi	r6,24
   606a8:	d80b883a 	mov	r5,sp
   606ac:	81000b44 	addi	r4,r16,45
   606b0:	00641540 	call	64154 <from64toBytes>
   606b4:	1000071e 	bne	r2,zero,606d4 <isProperDatabase+0x98>
		return AI_FALSE;
	}

	if(!compare(DATABASE_NAME,database_name,32)){
   606b8:	010001b4 	movhi	r4,6
   606bc:	01800804 	movi	r6,32
   606c0:	d80b883a 	mov	r5,sp
   606c4:	21135b04 	addi	r4,r4,19820
   606c8:	00642d40 	call	642d4 <compare>
		return AI_FALSE;
	}


	if(from64toBytes(&read[45],database_name,24)){
		return AI_FALSE;
   606cc:	1004c03a 	cmpne	r2,r2,zero
   606d0:	00000106 	br	606d8 <isProperDatabase+0x9c>
   606d4:	0005883a 	mov	r2,zero
	if(!compare(DATABASE_NAME,database_name,32)){
		return AI_FALSE;
	}

	return AI_TRUE;
}
   606d8:	dfc01517 	ldw	ra,84(sp)
   606dc:	dc001417 	ldw	r16,80(sp)
   606e0:	dec01604 	addi	sp,sp,88
   606e4:	f800283a 	ret

000606e8 <load_linker_list>:

AI_database_status_t load_linker_list(volatile Detector_t* detector, uint8_t** linkers){

	uint8_t* read = (uint8_t*) detector ->memories ->table;
   606e8:	20800017 	ldw	r2,0(r4)
	}

	return AI_TRUE;
}

AI_database_status_t load_linker_list(volatile Detector_t* detector, uint8_t** linkers){
   606ec:	defff504 	addi	sp,sp,-44
   606f0:	dd400615 	stw	r21,24(sp)

	uint8_t* read = (uint8_t*) detector ->memories ->table;
   606f4:	15400017 	ldw	r21,0(r2)
	}

	return AI_TRUE;
}

AI_database_status_t load_linker_list(volatile Detector_t* detector, uint8_t** linkers){
   606f8:	dc000115 	stw	r16,4(sp)

	uint8_t* read = (uint8_t*) detector ->memories ->table;

	AI_position_t p = LIST_DATABSE_START;
   606fc:	04001184 	movi	r16,70
	}

	return AI_TRUE;
}

AI_database_status_t load_linker_list(volatile Detector_t* detector, uint8_t** linkers){
   60700:	df000915 	stw	fp,36(sp)
   60704:	ddc00815 	stw	r23,32(sp)
   60708:	dd800715 	stw	r22,28(sp)
   6070c:	dd000515 	stw	r20,20(sp)
   60710:	dcc00415 	stw	r19,16(sp)
   60714:	dc800315 	stw	r18,12(sp)
   60718:	dc400215 	stw	r17,8(sp)
   6071c:	dfc00a15 	stw	ra,40(sp)
   60720:	2827883a 	mov	r19,r5

	AI_size_t base_size = 0;
	AI_bool_t finished = AI_FALSE;

	AI_amount_t all_spects = 0;
	AI_amount_t named_spects = 0;
   60724:	0025883a 	mov	r18,zero
	AI_position_t p = LIST_DATABSE_START;

	AI_size_t base_size = 0;
	AI_bool_t finished = AI_FALSE;

	AI_amount_t all_spects = 0;
   60728:	0023883a 	mov	r17,zero

	uint8_t* read = (uint8_t*) detector ->memories ->table;

	AI_position_t p = LIST_DATABSE_START;

	AI_size_t base_size = 0;
   6072c:	0029883a 	mov	r20,zero
	AI_position_t pos = 0;

	uint8_t** m_linkers = linkers;
	while(!finished){

		if(IS_EOF(read[p])){
   60730:	802d883a 	mov	r22,r16
			break;
		}else if(IS_DATABASE_LINKER(read[p])){
   60734:	05c01084 	movi	r23,66
			p+=21;
			all_spects += read[p];
			p+=2;

			base_size ++;
		}else if(IS_DECISION_NAME(read[p])){
   60738:	07001304 	movi	fp,76

			if(all_spects > MAX_AI_DECISIONS){
   6073c:	01c00804 	movi	r7,32
	AI_position_t pos = 0;

	uint8_t** m_linkers = linkers;
	while(!finished){

		if(IS_EOF(read[p])){
   60740:	ac07883a 	add	r3,r21,r16
   60744:	18800003 	ldbu	r2,0(r3)
   60748:	15801826 	beq	r2,r22,607ac <load_linker_list+0xc4>
			break;
		}else if(IS_DATABASE_LINKER(read[p])){
   6074c:	15c0091e 	bne	r2,r23,60774 <load_linker_list+0x8c>


			if(base_size >= BASES){
   60750:	008001c4 	movi	r2,7
   60754:	1500022e 	bgeu	r2,r20,60760 <load_linker_list+0x78>
				return AI_DATABASE_ERROR;
   60758:	00800084 	movi	r2,2
   6075c:	00001506 	br	607b4 <load_linker_list+0xcc>
			}
			p+=21;
			all_spects += read[p];
   60760:	18800543 	ldbu	r2,21(r3)
			p+=2;
   60764:	840005c4 	addi	r16,r16,23

			base_size ++;
   60768:	a5000044 	addi	r20,r20,1

			if(base_size >= BASES){
				return AI_DATABASE_ERROR;
			}
			p+=21;
			all_spects += read[p];
   6076c:	88a3883a 	add	r17,r17,r2
   60770:	003ff306 	br	60740 <__alt_data_end+0xfffec740>
			p+=2;

			base_size ++;
		}else if(IS_DECISION_NAME(read[p])){
   60774:	17000d1e 	bne	r2,fp,607ac <load_linker_list+0xc4>

			if(all_spects > MAX_AI_DECISIONS){
   60778:	3c7ff736 	bltu	r7,r17,60758 <__alt_data_end+0xfffec758>
			}

			uint8_t* linker = *m_linkers;

			p++;
			if(from64toBytes(&read[p],linker,12)){
   6077c:	99400017 	ldw	r5,0(r19)
   60780:	81000044 	addi	r4,r16,1
   60784:	01800304 	movi	r6,12
   60788:	a909883a 	add	r4,r21,r4
   6078c:	d9c00015 	stw	r7,0(sp)
   60790:	00641540 	call	64154 <from64toBytes>
   60794:	d9c00017 	ldw	r7,0(sp)
   60798:	103fef1e 	bne	r2,zero,60758 <__alt_data_end+0xfffec758>
				return AI_DATABASE_ERROR;
			}

			p+=12;
   6079c:	84000344 	addi	r16,r16,13

			named_spects++;
   607a0:	94800044 	addi	r18,r18,1
			pos++;
			m_linkers ++;
   607a4:	9cc00104 	addi	r19,r19,4
   607a8:	003fe506 	br	60740 <__alt_data_end+0xfffec740>
			finished = AI_TRUE;
		}

	}

	if(named_spects != all_spects){
   607ac:	8cbfea1e 	bne	r17,r18,60758 <__alt_data_end+0xfffec758>
		return AI_DATABASE_ERROR;
	}

	return AI_DATABASE_OK;
   607b0:	0005883a 	mov	r2,zero
}
   607b4:	dfc00a17 	ldw	ra,40(sp)
   607b8:	df000917 	ldw	fp,36(sp)
   607bc:	ddc00817 	ldw	r23,32(sp)
   607c0:	dd800717 	ldw	r22,28(sp)
   607c4:	dd400617 	ldw	r21,24(sp)
   607c8:	dd000517 	ldw	r20,20(sp)
   607cc:	dcc00417 	ldw	r19,16(sp)
   607d0:	dc800317 	ldw	r18,12(sp)
   607d4:	dc400217 	ldw	r17,8(sp)
   607d8:	dc000117 	ldw	r16,4(sp)
   607dc:	dec00b04 	addi	sp,sp,44
   607e0:	f800283a 	ret

000607e4 <load_list>:
		AI_amount_t* spect_sizes,
		AI_amount_t* spects_in_base,
		AI_compression_t* compressions,
		AI_size_t* size,
		AI_amount_t* decisions
	){
   607e4:	defff204 	addi	sp,sp,-56
   607e8:	dd800a15 	stw	r22,40(sp)
   607ec:	dd400915 	stw	r21,36(sp)
   607f0:	dcc00715 	stw	r19,28(sp)
   607f4:	dd800f17 	ldw	r22,60(sp)
   607f8:	dcc00e17 	ldw	r19,56(sp)
   607fc:	dd401017 	ldw	r21,64(sp)
   60800:	df000c15 	stw	fp,48(sp)
   60804:	ddc00b15 	stw	r23,44(sp)
   60808:	dd000815 	stw	r20,32(sp)
   6080c:	dc800615 	stw	r18,24(sp)
   60810:	dc400515 	stw	r17,20(sp)
   60814:	dc000415 	stw	r16,16(sp)
   60818:	dfc00d15 	stw	ra,52(sp)
   6081c:	3029883a 	mov	r20,r6
   60820:	282f883a 	mov	r23,r5
   60824:	3839883a 	mov	fp,r7
   60828:	240016c4 	addi	r16,r4,91

	AI_position_t p = LIST_DATABSE_START;

	AI_size_t base_size = 0;
	AI_amount_t potetntional_decisions = 0;
   6082c:	0025883a 	mov	r18,zero
		AI_amount_t* decisions
	){

	AI_position_t p = LIST_DATABSE_START;

	AI_size_t base_size = 0;
   60830:	0023883a 	mov	r17,zero

	while(!finished){

		if(IS_EOF(read[p])){
			break;
		}else if(IS_DATABASE_LINKER(read[p])){
   60834:	80bffac3 	ldbu	r2,-21(r16)
   60838:	00c01084 	movi	r3,66
   6083c:	10c0281e 	bne	r2,r3,608e0 <load_list+0xfc>

			if(base_size >= BASES){
   60840:	00800204 	movi	r2,8
   60844:	88802e26 	beq	r17,r2,60900 <load_list+0x11c>
			}
			p++;

			uint8_t name[16];

			if(from64toBytes(&read[p],name,12)){
   60848:	01800304 	movi	r6,12
   6084c:	d80b883a 	mov	r5,sp
   60850:	813ffb04 	addi	r4,r16,-20
   60854:	00641540 	call	64154 <from64toBytes>
   60858:	1000291e 	bne	r2,zero,60900 <load_list+0x11c>
				return AI_DATABASE_ERROR;
			}

			p+=12;

			bases[base_size] = read_16_value(&read[p]);
   6085c:	813ffe04 	addi	r4,r16,-8
   60860:	00642280 	call	64228 <read_16_value>
   60864:	10bfffcc 	andi	r2,r2,65535
			p+=2;

			crcs[base_size] = read_32_value(&read[p]);
   60868:	813ffe84 	addi	r4,r16,-6
				return AI_DATABASE_ERROR;
			}

			p+=12;

			bases[base_size] = read_16_value(&read[p]);
   6086c:	a0800015 	stw	r2,0(r20)
			p+=2;

			crcs[base_size] = read_32_value(&read[p]);
   60870:	006423c0 	call	6423c <read_32_value>
   60874:	b8800015 	stw	r2,0(r23)
			p+=4;

			packet_sizes[base_size] = read[p];
   60878:	80bfff83 	ldbu	r2,-2(r16)
			p++;

			compressions[base_size] = read[p];
			p++;

			if(compressions[base_size] == AI_COMPRESSION_FOUR){
   6087c:	00c00044 	movi	r3,1
			p+=2;

			crcs[base_size] = read_32_value(&read[p]);
			p+=4;

			packet_sizes[base_size] = read[p];
   60880:	e0800015 	stw	r2,0(fp)
			p++;

			spect_sizes[base_size] = read[p];
   60884:	80bfffc3 	ldbu	r2,-1(r16)
   60888:	98800015 	stw	r2,0(r19)
			p++;

			spects_in_base[base_size] = read[p];
   6088c:	80800003 	ldbu	r2,0(r16)
   60890:	b0800015 	stw	r2,0(r22)
			potetntional_decisions  += read[p];
			p++;

			compressions[base_size] = read[p];
   60894:	81000043 	ldbu	r4,1(r16)

			spect_sizes[base_size] = read[p];
			p++;

			spects_in_base[base_size] = read[p];
			potetntional_decisions  += read[p];
   60898:	80800003 	ldbu	r2,0(r16)
			p++;

			compressions[base_size] = read[p];
   6089c:	a9000015 	stw	r4,0(r21)

			spect_sizes[base_size] = read[p];
			p++;

			spects_in_base[base_size] = read[p];
			potetntional_decisions  += read[p];
   608a0:	90a5883a 	add	r18,r18,r2
   608a4:	98800017 	ldw	r2,0(r19)
			p++;

			compressions[base_size] = read[p];
			p++;

			if(compressions[base_size] == AI_COMPRESSION_FOUR){
   608a8:	20c0021e 	bne	r4,r3,608b4 <load_list+0xd0>
				if(spect_sizes[base_size] > (SIZE_OF_AI_RAM / 4)){
   608ac:	00c00204 	movi	r3,8
   608b0:	00000106 	br	608b8 <load_list+0xd4>
					return AI_DATABASE_ERROR;
				}
			}else{
				if(spect_sizes[base_size] > (SIZE_OF_AI_RAM / 2)){
   608b4:	00c00404 	movi	r3,16
   608b8:	18801136 	bltu	r3,r2,60900 <load_list+0x11c>
					return AI_DATABASE_ERROR;
				}
			}

			base_size ++;
   608bc:	8c400044 	addi	r17,r17,1
   608c0:	9cc00104 	addi	r19,r19,4
   608c4:	a5000104 	addi	r20,r20,4
   608c8:	bdc00104 	addi	r23,r23,4
   608cc:	e7000104 	addi	fp,fp,4
   608d0:	840005c4 	addi	r16,r16,23
   608d4:	b5800104 	addi	r22,r22,4
   608d8:	ad400104 	addi	r21,r21,4
   608dc:	003fd506 	br	60834 <__alt_data_end+0xfffec834>
			finished = AI_TRUE;
		}

	}

	if(potetntional_decisions > MAX_AI_DECISIONS){
   608e0:	00800804 	movi	r2,32
   608e4:	14800636 	bltu	r2,r18,60900 <load_list+0x11c>
		return AI_DATABASE_ERROR;
	}

	*decisions = potetntional_decisions;
   608e8:	d8801217 	ldw	r2,72(sp)
   608ec:	14800015 	stw	r18,0(r2)
	*size = base_size;
   608f0:	d8801117 	ldw	r2,68(sp)
   608f4:	14400015 	stw	r17,0(r2)


	return AI_DATABASE_OK;
   608f8:	0005883a 	mov	r2,zero
   608fc:	00000106 	br	60904 <load_list+0x120>
		}

	}

	if(potetntional_decisions > MAX_AI_DECISIONS){
		return AI_DATABASE_ERROR;
   60900:	00800084 	movi	r2,2
	*decisions = potetntional_decisions;
	*size = base_size;


	return AI_DATABASE_OK;
}
   60904:	dfc00d17 	ldw	ra,52(sp)
   60908:	df000c17 	ldw	fp,48(sp)
   6090c:	ddc00b17 	ldw	r23,44(sp)
   60910:	dd800a17 	ldw	r22,40(sp)
   60914:	dd400917 	ldw	r21,36(sp)
   60918:	dd000817 	ldw	r20,32(sp)
   6091c:	dcc00717 	ldw	r19,28(sp)
   60920:	dc800617 	ldw	r18,24(sp)
   60924:	dc400517 	ldw	r17,20(sp)
   60928:	dc000417 	ldw	r16,16(sp)
   6092c:	dec00e04 	addi	sp,sp,56
   60930:	f800283a 	ret

00060934 <readDatabase>:



Detector_status_t readDatabase(volatile Detector_t* detector,AI_bases_t* mbases, AI_comparasion_t* comparasion){

	AI_position_t real_position = (detector -> start) << (4);
   60934:	20800a17 	ldw	r2,40(r4)

	if(!IS_CORRECT_SECTOR(real_position)){
   60938:	00ffff94 	movui	r3,65534



Detector_status_t readDatabase(volatile Detector_t* detector,AI_bases_t* mbases, AI_comparasion_t* comparasion){

	AI_position_t real_position = (detector -> start) << (4);
   6093c:	1004913a 	slli	r2,r2,4

	if(!IS_CORRECT_SECTOR(real_position)){
   60940:	18804c36 	bltu	r3,r2,60a74 <readDatabase+0x140>
	return AI_DATABASE_OK;
}



Detector_status_t readDatabase(volatile Detector_t* detector,AI_bases_t* mbases, AI_comparasion_t* comparasion){
   60944:	defff004 	addi	sp,sp,-64
   60948:	dc400815 	stw	r17,32(sp)
   6094c:	2023883a 	mov	r17,r4

	if(!IS_CORRECT_SECTOR(real_position)){
		return DETECTOR_STATUS_FILE_ERROR;
	}

	load_disk(detector -> disk, real_position, KB_PACK_SIZE, 0);
   60950:	21000517 	ldw	r4,20(r4)
	return AI_DATABASE_OK;
}



Detector_status_t readDatabase(volatile Detector_t* detector,AI_bases_t* mbases, AI_comparasion_t* comparasion){
   60954:	dc000715 	stw	r16,28(sp)

	if(!IS_CORRECT_SECTOR(real_position)){
		return DETECTOR_STATUS_FILE_ERROR;
	}

	load_disk(detector -> disk, real_position, KB_PACK_SIZE, 0);
   60958:	000f883a 	mov	r7,zero
   6095c:	01800084 	movi	r6,2
   60960:	2821883a 	mov	r16,r5
   60964:	100b883a 	mov	r5,r2
	return AI_DATABASE_OK;
}



Detector_status_t readDatabase(volatile Detector_t* detector,AI_bases_t* mbases, AI_comparasion_t* comparasion){
   60968:	dfc00f15 	stw	ra,60(sp)
   6096c:	ddc00e15 	stw	r23,56(sp)
   60970:	dd800d15 	stw	r22,52(sp)
   60974:	dd400c15 	stw	r21,48(sp)
   60978:	dd000b15 	stw	r20,44(sp)
   6097c:	dcc00a15 	stw	r19,40(sp)
   60980:	dc800915 	stw	r18,36(sp)

	if(!IS_CORRECT_SECTOR(real_position)){
		return DETECTOR_STATUS_FILE_ERROR;
	}

	load_disk(detector -> disk, real_position, KB_PACK_SIZE, 0);
   60984:	00618c00 	call	618c0 <load_disk>

	if(wait_for_disk(detector -> disk) == DISK_LOAD_FAIL){
   60988:	89000517 	ldw	r4,20(r17)
   6098c:	006190c0 	call	6190c <wait_for_disk>
   60990:	00c00044 	movi	r3,1
   60994:	10c02c26 	beq	r2,r3,60a48 <readDatabase+0x114>
		return DETECTOR_STATUS_DISK_ERROR;
	}

	uint8_t* read = (uint8_t*) detector ->memories ->table;
   60998:	88800017 	ldw	r2,0(r17)
   6099c:	14400017 	ldw	r17,0(r2)

	if(isDatabase(read)){
   609a0:	8809883a 	mov	r4,r17
   609a4:	00605dc0 	call	605dc <isDatabase>
   609a8:	10002426 	beq	r2,zero,60a3c <readDatabase+0x108>
		AI_amount_t* spect_sizes = mbases -> spect_sizes;
		AI_amount_t* spects_in_base = mbases -> spects_in_base;

		AI_compression_t* compressions = mbases -> compressions;

		if(isProperDatabase(read)){
   609ac:	8809883a 	mov	r4,r17
	uint8_t* read = (uint8_t*) detector ->memories ->table;

	if(isDatabase(read)){


		AI_CRC32_t* crcs = mbases -> crcs;
   609b0:	84800317 	ldw	r18,12(r16)
		AI_position_t* bases = mbases -> bases;
   609b4:	84c00417 	ldw	r19,16(r16)

		AI_amount_t* packet_sizes = mbases -> packet_sizes;
   609b8:	85000517 	ldw	r20,20(r16)
		AI_amount_t* spect_sizes = mbases -> spect_sizes;
   609bc:	85400617 	ldw	r21,24(r16)
		AI_amount_t* spects_in_base = mbases -> spects_in_base;
   609c0:	85800717 	ldw	r22,28(r16)

		AI_compression_t* compressions = mbases -> compressions;
   609c4:	85c00817 	ldw	r23,32(r16)

		if(isProperDatabase(read)){
   609c8:	006063c0 	call	6063c <isProperDatabase>
   609cc:	10001b26 	beq	r2,zero,60a3c <readDatabase+0x108>

			AI_size_t size = 0;
			AI_amount_t decisions = 0;

			if(load_list(read, crcs, bases,packet_sizes,spect_sizes,spects_in_base,compressions, &size , &decisions) == AI_DATABASE_OK){
   609d0:	d8800504 	addi	r2,sp,20
   609d4:	d8800415 	stw	r2,16(sp)
   609d8:	d8800604 	addi	r2,sp,24
   609dc:	d8800315 	stw	r2,12(sp)
   609e0:	ddc00215 	stw	r23,8(sp)
   609e4:	dd800115 	stw	r22,4(sp)
   609e8:	dd400015 	stw	r21,0(sp)
   609ec:	a00f883a 	mov	r7,r20
   609f0:	980d883a 	mov	r6,r19
   609f4:	900b883a 	mov	r5,r18
   609f8:	8809883a 	mov	r4,r17

		AI_compression_t* compressions = mbases -> compressions;

		if(isProperDatabase(read)){

			AI_size_t size = 0;
   609fc:	d8000615 	stw	zero,24(sp)
			AI_amount_t decisions = 0;
   60a00:	d8000515 	stw	zero,20(sp)

			if(load_list(read, crcs, bases,packet_sizes,spect_sizes,spects_in_base,compressions, &size , &decisions) == AI_DATABASE_OK){
   60a04:	00607e40 	call	607e4 <load_list>
   60a08:	10000c1e 	bne	r2,zero,60a3c <readDatabase+0x108>


				if(decisions > MAX_AI_DECISIONS){
   60a0c:	d8800517 	ldw	r2,20(sp)
   60a10:	00c00804 	movi	r3,32
   60a14:	18800936 	bltu	r3,r2,60a3c <readDatabase+0x108>
					return DETECTOR_STATUS_FILE_ERROR;
				}

				mbases -> decisions = decisions;
   60a18:	80800915 	stw	r2,36(r16)
				mbases -> size = size;
   60a1c:	d8800617 	ldw	r2,24(sp)

				Simple_control_sum_t csum  = Control_count_sum(read, CRC_BLOCK_LEN);
   60a20:	01407fc4 	movi	r5,511
   60a24:	8809883a 	mov	r4,r17
				if(decisions > MAX_AI_DECISIONS){
					return DETECTOR_STATUS_FILE_ERROR;
				}

				mbases -> decisions = decisions;
				mbases -> size = size;
   60a28:	80800a15 	stw	r2,40(r16)

				Simple_control_sum_t csum  = Control_count_sum(read, CRC_BLOCK_LEN);
   60a2c:	00640cc0 	call	640cc <Control_count_sum>

				if(read[CRC_BLOCK_LEN] == csum){
   60a30:	88c07fc3 	ldbu	r3,511(r17)
   60a34:	10803fcc 	andi	r2,r2,255
   60a38:	10c00226 	beq	r2,r3,60a44 <readDatabase+0x110>
				}
			}
		}
	}

	return DETECTOR_STATUS_FILE_ERROR;
   60a3c:	00800204 	movi	r2,8
   60a40:	00000106 	br	60a48 <readDatabase+0x114>
				mbases -> size = size;

				Simple_control_sum_t csum  = Control_count_sum(read, CRC_BLOCK_LEN);

				if(read[CRC_BLOCK_LEN] == csum){
					return DETECTOR_STATUS_OK;
   60a44:	0005883a 	mov	r2,zero
		}
	}

	return DETECTOR_STATUS_FILE_ERROR;

}
   60a48:	dfc00f17 	ldw	ra,60(sp)
   60a4c:	ddc00e17 	ldw	r23,56(sp)
   60a50:	dd800d17 	ldw	r22,52(sp)
   60a54:	dd400c17 	ldw	r21,48(sp)
   60a58:	dd000b17 	ldw	r20,44(sp)
   60a5c:	dcc00a17 	ldw	r19,40(sp)
   60a60:	dc800917 	ldw	r18,36(sp)
   60a64:	dc400817 	ldw	r17,32(sp)
   60a68:	dc000717 	ldw	r16,28(sp)
   60a6c:	dec01004 	addi	sp,sp,64
   60a70:	f800283a 	ret
Detector_status_t readDatabase(volatile Detector_t* detector,AI_bases_t* mbases, AI_comparasion_t* comparasion){

	AI_position_t real_position = (detector -> start) << (4);

	if(!IS_CORRECT_SECTOR(real_position)){
		return DETECTOR_STATUS_FILE_ERROR;
   60a74:	00800204 	movi	r2,8
		}
	}

	return DETECTOR_STATUS_FILE_ERROR;

}
   60a78:	f800283a 	ret

00060a7c <make_linker_table>:

#define MAX_32BIT					(AI_amount_t) 0xFFFFFFFF
#define IS_CORRECT_SECTOR(sector)	((uint32_t)sector < 0xFFFF)
#define LINKERS_LEN					16

void make_linker_table(uint8_t* buffer,uint8_t** linkers){
   60a7c:	20804004 	addi	r2,r4,256
	uint8_t* ptr = buffer;

	for(AI_amount_t n =0; n < 16; n++){
		linkers[n] = ptr;
   60a80:	29000015 	stw	r4,0(r5)
		ptr += LINKERS_LEN;
   60a84:	21000404 	addi	r4,r4,16
   60a88:	29400104 	addi	r5,r5,4
#define LINKERS_LEN					16

void make_linker_table(uint8_t* buffer,uint8_t** linkers){
	uint8_t* ptr = buffer;

	for(AI_amount_t n =0; n < 16; n++){
   60a8c:	20bffc1e 	bne	r4,r2,60a80 <__alt_data_end+0xfffeca80>
		linkers[n] = ptr;
		ptr += LINKERS_LEN;
	}
}
   60a90:	f800283a 	ret

00060a94 <isDetected>:


AI_bool_t isDetected(AI_state_t* state, AI_amount_t size){
	for(AI_amount_t n = 0; n < size; n ++){
   60a94:	0005883a 	mov	r2,zero
   60a98:	11400526 	beq	r2,r5,60ab0 <isDetected+0x1c>
   60a9c:	21000104 	addi	r4,r4,4
		if(state[n] == AI_OK){
   60aa0:	20ffff17 	ldw	r3,-4(r4)
   60aa4:	18000426 	beq	r3,zero,60ab8 <isDetected+0x24>
	}
}


AI_bool_t isDetected(AI_state_t* state, AI_amount_t size){
	for(AI_amount_t n = 0; n < size; n ++){
   60aa8:	10800044 	addi	r2,r2,1
   60aac:	003ffa06 	br	60a98 <__alt_data_end+0xfffeca98>
		if(state[n] == AI_OK){
			return AI_TRUE;
		}
	}

	return AI_FALSE;
   60ab0:	0005883a 	mov	r2,zero
   60ab4:	f800283a 	ret


AI_bool_t isDetected(AI_state_t* state, AI_amount_t size){
	for(AI_amount_t n = 0; n < size; n ++){
		if(state[n] == AI_OK){
			return AI_TRUE;
   60ab8:	00800044 	movi	r2,1
		}
	}

	return AI_FALSE;
}
   60abc:	f800283a 	ret

00060ac0 <isNotDetected>:

AI_bool_t isNotDetected(AI_state_t* state, AI_amount_t size){
	for(AI_amount_t n = 0; n < size; n ++){
   60ac0:	0005883a 	mov	r2,zero
		if(state[n] == AI_CANT_DETECT){
   60ac4:	00ffff84 	movi	r3,-2

	return AI_FALSE;
}

AI_bool_t isNotDetected(AI_state_t* state, AI_amount_t size){
	for(AI_amount_t n = 0; n < size; n ++){
   60ac8:	11400526 	beq	r2,r5,60ae0 <isNotDetected+0x20>
   60acc:	21000104 	addi	r4,r4,4
		if(state[n] == AI_CANT_DETECT){
   60ad0:	21bfff17 	ldw	r6,-4(r4)
   60ad4:	30c00426 	beq	r6,r3,60ae8 <isNotDetected+0x28>

	return AI_FALSE;
}

AI_bool_t isNotDetected(AI_state_t* state, AI_amount_t size){
	for(AI_amount_t n = 0; n < size; n ++){
   60ad8:	10800044 	addi	r2,r2,1
   60adc:	003ffa06 	br	60ac8 <__alt_data_end+0xfffecac8>
		if(state[n] == AI_CANT_DETECT){
			return AI_TRUE;
		}
	}

	return AI_FALSE;
   60ae0:	0005883a 	mov	r2,zero
   60ae4:	f800283a 	ret
}

AI_bool_t isNotDetected(AI_state_t* state, AI_amount_t size){
	for(AI_amount_t n = 0; n < size; n ++){
		if(state[n] == AI_CANT_DETECT){
			return AI_TRUE;
   60ae8:	00800044 	movi	r2,1
		}
	}

	return AI_FALSE;

}
   60aec:	f800283a 	ret

00060af0 <selectBestSuit>:
AI_decision_t selectBestSuit(AI_amount_t* score,
		AI_state_t* state,
		AI_decision_result_t* decision,
		AI_amount_t* spects_in_base,
		AI_amount_t size)
{
   60af0:	dac00017 	ldw	r11,0(sp)
	AI_amount_t min = MAX_32BIT;

	AI_decision_t offset = 0;
	AI_decision_t dec = 0;

	for(AI_amount_t n = 0 ; n < size ; n++){
   60af4:	0007883a 	mov	r3,zero
{

	AI_amount_t min = MAX_32BIT;

	AI_decision_t offset = 0;
	AI_decision_t dec = 0;
   60af8:	0005883a 	mov	r2,zero
		AI_amount_t size)
{

	AI_amount_t min = MAX_32BIT;

	AI_decision_t offset = 0;
   60afc:	0011883a 	mov	r8,zero
		AI_decision_result_t* decision,
		AI_amount_t* spects_in_base,
		AI_amount_t size)
{

	AI_amount_t min = MAX_32BIT;
   60b00:	027fffc4 	movi	r9,-1

	AI_decision_t offset = 0;
	AI_decision_t dec = 0;

	for(AI_amount_t n = 0 ; n < size ; n++){
   60b04:	1ac00f26 	beq	r3,r11,60b44 <selectBestSuit+0x54>
		if(state[n] == AI_OK){
   60b08:	2a800017 	ldw	r10,0(r5)
   60b0c:	5000051e 	bne	r10,zero,60b24 <selectBestSuit+0x34>
			if(min > score[n]){
   60b10:	22800017 	ldw	r10,0(r4)
   60b14:	5240032e 	bgeu	r10,r9,60b24 <selectBestSuit+0x34>
				min = score[n];

				dec = decision[n].decision + offset;
   60b18:	30800017 	ldw	r2,0(r6)
   60b1c:	5013883a 	mov	r9,r10
   60b20:	4085883a 	add	r2,r8,r2
			}
		}

		offset += spects_in_base[n];
   60b24:	3a800017 	ldw	r10,0(r7)
	AI_amount_t min = MAX_32BIT;

	AI_decision_t offset = 0;
	AI_decision_t dec = 0;

	for(AI_amount_t n = 0 ; n < size ; n++){
   60b28:	18c00044 	addi	r3,r3,1
   60b2c:	39c00104 	addi	r7,r7,4

				dec = decision[n].decision + offset;
			}
		}

		offset += spects_in_base[n];
   60b30:	4291883a 	add	r8,r8,r10
   60b34:	29400104 	addi	r5,r5,4
   60b38:	21000104 	addi	r4,r4,4
   60b3c:	31800204 	addi	r6,r6,8
   60b40:	003ff006 	br	60b04 <__alt_data_end+0xfffecb04>
	}

	return dec;
}
   60b44:	f800283a 	ret

00060b48 <analyse_load_errors>:

Detector_status_t analyse_load_errors(AI_state_t state, volatile Detector_t* detector,
		AI_decision_result_t* result, AI_CRC32_t crc){

	if(state == AI_DISK_ERROR){
   60b48:	00bfffc4 	movi	r2,-1
   60b4c:	2080041e 	bne	r4,r2,60b60 <analyse_load_errors+0x18>
		detector -> disk ->status = DISK_STATUS_ERROR;
   60b50:	28800517 	ldw	r2,20(r5)
   60b54:	00c00084 	movi	r3,2
   60b58:	10c00215 	stw	r3,8(r2)
   60b5c:	00000406 	br	60b70 <analyse_load_errors+0x28>
		return DETECTOR_STATUS_DISK_ERROR;
	}else if(state == AI_NO_DISK_DETECT){
   60b60:	00bfff44 	movi	r2,-3
   60b64:	2080041e 	bne	r4,r2,60b78 <analyse_load_errors+0x30>
		detector -> disk ->status = DISK_STATUS_NONE;
   60b68:	28800517 	ldw	r2,20(r5)
   60b6c:	10000215 	stw	zero,8(r2)
		return DETECTOR_STATUS_DISK_ERROR;
   60b70:	00800044 	movi	r2,1
   60b74:	f800283a 	ret
	}else{
		if(crc != result -> crc){
			//return DETECTOR_STATUS_CRC_ERROR;
		}

		return DETECTOR_STATUS_OK;
   60b78:	0005883a 	mov	r2,zero
	}
}
   60b7c:	f800283a 	ret

00060b80 <ai_group_selfcheck>:

Detector_status_t ai_group_selfcheck(volatile Detector_t* detector){
   60b80:	deff9b04 	addi	sp,sp,-404
	aibases.decision = decision;

	aibases.crcs = crcs;
	aibases.bases = bases;

	aibases.packet_sizes = packet_sizes;
   60b84:	d8803304 	addi	r2,sp,204
   60b88:	d8801515 	stw	r2,84(sp)
	aibases.spect_sizes = spect_sizes;
   60b8c:	d8802b04 	addi	r2,sp,172
   60b90:	d8801615 	stw	r2,88(sp)
	aibases.spects_in_base = spects_in_base;
   60b94:	d8802304 	addi	r2,sp,140

		return DETECTOR_STATUS_OK;
	}
}

Detector_status_t ai_group_selfcheck(volatile Detector_t* detector){
   60b98:	dd806115 	stw	r22,388(sp)
   60b9c:	dcc05e15 	stw	r19,376(sp)
   60ba0:	dc005b15 	stw	r16,364(sp)
	aibases.crcs = crcs;
	aibases.bases = bases;

	aibases.packet_sizes = packet_sizes;
	aibases.spect_sizes = spect_sizes;
	aibases.spects_in_base = spects_in_base;
   60ba4:	d8801715 	stw	r2,92(sp)
	AI_compression_t compressions[BASES];

	AI_comparasion_t comparasion;
	AI_bases_t aibases;

	aibases.state = state;
   60ba8:	dcc04b04 	addi	r19,sp,300

	aibases.packet_sizes = packet_sizes;
	aibases.spect_sizes = spect_sizes;
	aibases.spects_in_base = spects_in_base;

	aibases.compressions = compressions;
   60bac:	d8801b04 	addi	r2,sp,108
	AI_bases_t aibases;

	aibases.state = state;
	aibases.decision = decision;

	aibases.crcs = crcs;
   60bb0:	dd804304 	addi	r22,sp,268
	aibases.bases = bases;
   60bb4:	dc003b04 	addi	r16,sp,236
	aibases.spect_sizes = spect_sizes;
	aibases.spects_in_base = spects_in_base;

	aibases.compressions = compressions;

	Detector_status_t status = readDatabase(detector,&aibases, &comparasion);
   60bb8:	d9805304 	addi	r6,sp,332
   60bbc:	d9401004 	addi	r5,sp,64

		return DETECTOR_STATUS_OK;
	}
}

Detector_status_t ai_group_selfcheck(volatile Detector_t* detector){
   60bc0:	dc805d15 	stw	r18,372(sp)
   60bc4:	dfc06415 	stw	ra,400(sp)
   60bc8:	df006315 	stw	fp,396(sp)
   60bcc:	ddc06215 	stw	r23,392(sp)
   60bd0:	dd406015 	stw	r21,384(sp)
   60bd4:	dd005f15 	stw	r20,380(sp)
   60bd8:	dc405c15 	stw	r17,368(sp)
   60bdc:	2025883a 	mov	r18,r4
	AI_compression_t compressions[BASES];

	AI_comparasion_t comparasion;
	AI_bases_t aibases;

	aibases.state = state;
   60be0:	dcc01015 	stw	r19,64(sp)
	aibases.decision = decision;
   60be4:	dec01215 	stw	sp,72(sp)

	aibases.crcs = crcs;
   60be8:	dd801315 	stw	r22,76(sp)
	aibases.bases = bases;
   60bec:	dc001415 	stw	r16,80(sp)

	aibases.packet_sizes = packet_sizes;
	aibases.spect_sizes = spect_sizes;
	aibases.spects_in_base = spects_in_base;

	aibases.compressions = compressions;
   60bf0:	d8801815 	stw	r2,96(sp)

	Detector_status_t status = readDatabase(detector,&aibases, &comparasion);
   60bf4:	00609340 	call	60934 <readDatabase>

	if(status == DETECTOR_STATUS_FILE_ERROR ){
   60bf8:	00c00204 	movi	r3,8
   60bfc:	10c05526 	beq	r2,r3,60d54 <ai_group_selfcheck+0x1d4>
		return DETECTOR_STATUS_FILE_ERROR;
	}


	AI_amount_t size = aibases.size;
   60c00:	dd401a17 	ldw	r21,104(sp)
   60c04:	8039883a 	mov	fp,r16

	for(AI_amount_t n=0 ; n < size ; n ++){
   60c08:	002f883a 	mov	r23,zero
			state[n] = AI_compare(&decision[n],detector -> comparer,&comparasion);

			Detector_status_t ostatus = analyse_load_errors(state[n],detector,&decision[n],crcs[n]);
			if(ostatus != DETECTOR_STATUS_OK){

				if(ostatus == DETECTOR_STATUS_CRC_ERROR){
   60c0c:	040001c4 	movi	r16,7
	}


	AI_amount_t size = aibases.size;

	for(AI_amount_t n=0 ; n < size ; n ++){
   60c10:	bd403826 	beq	r23,r21,60cf4 <ai_group_selfcheck+0x174>

		if(IS_CORRECT_SECTOR(detector -> start)){
   60c14:	90800a17 	ldw	r2,40(r18)
   60c18:	00ffff94 	movui	r3,65534
   60c1c:	18800436 	bltu	r3,r2,60c30 <ai_group_selfcheck+0xb0>
			bases[n] += detector -> start;
   60c20:	e1000017 	ldw	r4,0(fp)
   60c24:	90800a17 	ldw	r2,40(r18)
   60c28:	2085883a 	add	r2,r4,r2
   60c2c:	e0800015 	stw	r2,0(fp)
		}

		AI_amount_t tries = 0;

		comparasion.spects = aibases.packet_sizes[n] * aibases.spects_in_base[n];
   60c30:	dd001517 	ldw	r20,84(sp)
   60c34:	d8801717 	ldw	r2,92(sp)
   60c38:	bde3883a 	add	r17,r23,r23
   60c3c:	8c63883a 	add	r17,r17,r17
   60c40:	a469883a 	add	r20,r20,r17
   60c44:	1445883a 	add	r2,r2,r17
   60c48:	a1400017 	ldw	r5,0(r20)
   60c4c:	11000017 	ldw	r4,0(r2)
   60c50:	00648600 	call	64860 <__mulsi3>
   60c54:	d8805415 	stw	r2,336(sp)

		comparasion.packet_size = aibases.packet_sizes[n];
   60c58:	a0800017 	ldw	r2,0(r20)
   60c5c:	b82890fa 	slli	r20,r23,3
   60c60:	9c47883a 	add	r3,r19,r17
   60c64:	d8805515 	stw	r2,340(sp)
		comparasion.max_diffrence = MAXIMUM_DIFF;
   60c68:	008001b4 	movhi	r2,6
   60c6c:	1086a004 	addi	r2,r2,6784
   60c70:	d8805615 	stw	r2,344(sp)
		comparasion.kb_spect_size = aibases.spect_sizes[n];
   60c74:	d8801617 	ldw	r2,88(sp)
   60c78:	dd29883a 	add	r20,sp,r20
   60c7c:	d8c05915 	stw	r3,356(sp)
   60c80:	1445883a 	add	r2,r2,r17
   60c84:	10800017 	ldw	r2,0(r2)
   60c88:	b463883a 	add	r17,r22,r17

		while(tries < MAX_RETRIES){
   60c8c:	024000c4 	movi	r9,3

		comparasion.spects = aibases.packet_sizes[n] * aibases.spects_in_base[n];

		comparasion.packet_size = aibases.packet_sizes[n];
		comparasion.max_diffrence = MAXIMUM_DIFF;
		comparasion.kb_spect_size = aibases.spect_sizes[n];
   60c90:	d8805715 	stw	r2,348(sp)

		while(tries < MAX_RETRIES){
			comparasion.start = bases[n];
   60c94:	e0800017 	ldw	r2,0(fp)

			state[n] = AI_compare(&decision[n],detector -> comparer,&comparasion);
   60c98:	91400417 	ldw	r5,16(r18)
   60c9c:	d9805304 	addi	r6,sp,332
   60ca0:	a009883a 	mov	r4,r20
   60ca4:	da405a15 	stw	r9,360(sp)
		comparasion.packet_size = aibases.packet_sizes[n];
		comparasion.max_diffrence = MAXIMUM_DIFF;
		comparasion.kb_spect_size = aibases.spect_sizes[n];

		while(tries < MAX_RETRIES){
			comparasion.start = bases[n];
   60ca8:	d8805315 	stw	r2,332(sp)

			state[n] = AI_compare(&decision[n],detector -> comparer,&comparasion);
   60cac:	006045c0 	call	6045c <AI_compare>
   60cb0:	d8c05917 	ldw	r3,356(sp)

			Detector_status_t ostatus = analyse_load_errors(state[n],detector,&decision[n],crcs[n]);
   60cb4:	89c00017 	ldw	r7,0(r17)
   60cb8:	a00d883a 	mov	r6,r20
		comparasion.kb_spect_size = aibases.spect_sizes[n];

		while(tries < MAX_RETRIES){
			comparasion.start = bases[n];

			state[n] = AI_compare(&decision[n],detector -> comparer,&comparasion);
   60cbc:	18800015 	stw	r2,0(r3)

			Detector_status_t ostatus = analyse_load_errors(state[n],detector,&decision[n],crcs[n]);
   60cc0:	900b883a 	mov	r5,r18
   60cc4:	1009883a 	mov	r4,r2
   60cc8:	0060b480 	call	60b48 <analyse_load_errors>
			if(ostatus != DETECTOR_STATUS_OK){
   60ccc:	da405a17 	ldw	r9,360(sp)
   60cd0:	10000526 	beq	r2,zero,60ce8 <ai_group_selfcheck+0x168>

				if(ostatus == DETECTOR_STATUS_CRC_ERROR){
   60cd4:	14001f1e 	bne	r2,r16,60d54 <ai_group_selfcheck+0x1d4>
   60cd8:	4a7fffc4 	addi	r9,r9,-1
					tries ++;

					if(tries == MAX_RETRIES){
   60cdc:	483fed1e 	bne	r9,zero,60c94 <__alt_data_end+0xfffecc94>
   60ce0:	8005883a 	mov	r2,r16
   60ce4:	00001b06 	br	60d54 <ai_group_selfcheck+0x1d4>
	}


	AI_amount_t size = aibases.size;

	for(AI_amount_t n=0 ; n < size ; n ++){
   60ce8:	bdc00044 	addi	r23,r23,1
   60cec:	e7000104 	addi	fp,fp,4
   60cf0:	003fc706 	br	60c10 <__alt_data_end+0xfffecc10>
   60cf4:	0005883a 	mov	r2,zero
			break;
		}

	}

	for(int n=0;n<detector ->memories->table_size;n++){
   60cf8:	90c00017 	ldw	r3,0(r18)
   60cfc:	18c00317 	ldw	r3,12(r3)
   60d00:	10c0070e 	bge	r2,r3,60d20 <ai_group_selfcheck+0x1a0>
		detector ->memories->table[n] = 0;
   60d04:	90c00017 	ldw	r3,0(r18)
   60d08:	19000017 	ldw	r4,0(r3)
   60d0c:	1087883a 	add	r3,r2,r2
			break;
		}

	}

	for(int n=0;n<detector ->memories->table_size;n++){
   60d10:	10800044 	addi	r2,r2,1
		detector ->memories->table[n] = 0;
   60d14:	20c7883a 	add	r3,r4,r3
   60d18:	1800000d 	sth	zero,0(r3)
   60d1c:	003ff606 	br	60cf8 <__alt_data_end+0xfffeccf8>
	}


	if(isDetected(state,size)){
   60d20:	a80b883a 	mov	r5,r21
   60d24:	9809883a 	mov	r4,r19
   60d28:	0060a940 	call	60a94 <isDetected>
   60d2c:	1000061e 	bne	r2,zero,60d48 <ai_group_selfcheck+0x1c8>
		return DETECTOR_STATUS_OK;
	}else{

		if(isNotDetected(state,size)){
   60d30:	a80b883a 	mov	r5,r21
   60d34:	9809883a 	mov	r4,r19
   60d38:	0060ac00 	call	60ac0 <isNotDetected>
   60d3c:	1000041e 	bne	r2,zero,60d50 <ai_group_selfcheck+0x1d0>
			return DETECTOR_STATUS_CANT_DETECT;
		}else{
			return DETECTOR_STATUS_BAD_CONFIG;
   60d40:	00800104 	movi	r2,4
   60d44:	00000306 	br	60d54 <ai_group_selfcheck+0x1d4>
		detector ->memories->table[n] = 0;
	}


	if(isDetected(state,size)){
		return DETECTOR_STATUS_OK;
   60d48:	0005883a 	mov	r2,zero
   60d4c:	00000106 	br	60d54 <ai_group_selfcheck+0x1d4>
	}else{

		if(isNotDetected(state,size)){
			return DETECTOR_STATUS_CANT_DETECT;
   60d50:	00800084 	movi	r2,2
		}else{
			return DETECTOR_STATUS_BAD_CONFIG;
		}
	}
}
   60d54:	dfc06417 	ldw	ra,400(sp)
   60d58:	df006317 	ldw	fp,396(sp)
   60d5c:	ddc06217 	ldw	r23,392(sp)
   60d60:	dd806117 	ldw	r22,388(sp)
   60d64:	dd406017 	ldw	r21,384(sp)
   60d68:	dd005f17 	ldw	r20,380(sp)
   60d6c:	dcc05e17 	ldw	r19,376(sp)
   60d70:	dc805d17 	ldw	r18,372(sp)
   60d74:	dc405c17 	ldw	r17,368(sp)
   60d78:	dc005b17 	ldw	r16,364(sp)
   60d7c:	dec06504 	addi	sp,sp,404
   60d80:	f800283a 	ret

00060d84 <ai_group_analyse>:


Detector_status_t ai_group_analyse(volatile Detector_t* detector,uint8_t* word){
   60d84:	defeec04 	addi	sp,sp,-1104
   60d88:	dc410b15 	stw	r17,1068(sp)
   60d8c:	d9410415 	stw	r5,1040(sp)
   60d90:	2023883a 	mov	r17,r4

	uint8_t buffer[MAX_AI_DECISIONS * LINKERS_LEN];
	uint8_t* linkers[MAX_AI_DECISIONS];

	make_linker_table(buffer,linkers);
   60d94:	d9408104 	addi	r5,sp,516
   60d98:	d9000104 	addi	r4,sp,4
		}
	}
}


Detector_status_t ai_group_analyse(volatile Detector_t* detector,uint8_t* word){
   60d9c:	dfc11315 	stw	ra,1100(sp)
   60da0:	df011215 	stw	fp,1096(sp)
   60da4:	dd811015 	stw	r22,1088(sp)
   60da8:	dd410f15 	stw	r21,1084(sp)
   60dac:	dd010e15 	stw	r20,1080(sp)
   60db0:	dc810c15 	stw	r18,1072(sp)
   60db4:	ddc11115 	stw	r23,1092(sp)
   60db8:	dcc10d15 	stw	r19,1076(sp)
   60dbc:	dc010a15 	stw	r16,1064(sp)

	uint8_t buffer[MAX_AI_DECISIONS * LINKERS_LEN];
	uint8_t* linkers[MAX_AI_DECISIONS];

	make_linker_table(buffer,linkers);
   60dc0:	0060a7c0 	call	60a7c <make_linker_table>
	aibases.decision = decision;

	aibases.crcs = crcs;
	aibases.bases = bases;

	aibases.packet_sizes = packet_sizes;
   60dc4:	d880d404 	addi	r2,sp,848
   60dc8:	d880b615 	stw	r2,728(sp)
	aibases.spect_sizes = spect_sizes;
   60dcc:	d880cc04 	addi	r2,sp,816
   60dd0:	d880b715 	stw	r2,732(sp)
	aibases.spects_in_base = spects_in_base;
   60dd4:	d880c404 	addi	r2,sp,784
   60dd8:	d880b815 	stw	r2,736(sp)
	AI_compression_t compressions[BASES];

	AI_comparasion_t comparasion;
	AI_bases_t aibases;

	aibases.state = state;
   60ddc:	dc80f404 	addi	r18,sp,976

	aibases.packet_sizes = packet_sizes;
	aibases.spect_sizes = spect_sizes;
	aibases.spects_in_base = spects_in_base;

	aibases.compressions = compressions;
   60de0:	d880bc04 	addi	r2,sp,752

	AI_comparasion_t comparasion;
	AI_bases_t aibases;

	aibases.state = state;
	aibases.score = score;
   60de4:	dd00ec04 	addi	r20,sp,944
	aibases.decision = decision;
   60de8:	dd40a104 	addi	r21,sp,644

	aibases.crcs = crcs;
   60dec:	df00e404 	addi	fp,sp,912
	aibases.bases = bases;
   60df0:	dd80dc04 	addi	r22,sp,880
	aibases.spect_sizes = spect_sizes;
	aibases.spects_in_base = spects_in_base;

	aibases.compressions = compressions;

	Detector_status_t status = readDatabase(detector,&aibases, &comparasion);
   60df4:	d980fc04 	addi	r6,sp,1008
   60df8:	d940b104 	addi	r5,sp,708
   60dfc:	8809883a 	mov	r4,r17
	AI_compression_t compressions[BASES];

	AI_comparasion_t comparasion;
	AI_bases_t aibases;

	aibases.state = state;
   60e00:	dc80b115 	stw	r18,708(sp)
	aibases.score = score;
   60e04:	dd00b215 	stw	r20,712(sp)
	aibases.decision = decision;
   60e08:	dd40b315 	stw	r21,716(sp)

	aibases.crcs = crcs;
   60e0c:	df00b415 	stw	fp,720(sp)
	aibases.bases = bases;
   60e10:	dd80b515 	stw	r22,724(sp)

	aibases.packet_sizes = packet_sizes;
	aibases.spect_sizes = spect_sizes;
	aibases.spects_in_base = spects_in_base;

	aibases.compressions = compressions;
   60e14:	d880b915 	stw	r2,740(sp)

	Detector_status_t status = readDatabase(detector,&aibases, &comparasion);
   60e18:	00609340 	call	60934 <readDatabase>



	if(status == DETECTOR_STATUS_FILE_ERROR ){
   60e1c:	00c00204 	movi	r3,8
   60e20:	10c0021e 	bne	r2,r3,60e2c <ai_group_analyse+0xa8>

		return DETECTOR_STATUS_FILE_ERROR;
   60e24:	00800204 	movi	r2,8
   60e28:	00008306 	br	61038 <ai_group_analyse+0x2b4>
	}

	if(status == DETECTOR_STATUS_DISK_ERROR ){
   60e2c:	00c00044 	movi	r3,1
   60e30:	10c08126 	beq	r2,r3,61038 <ai_group_analyse+0x2b4>
		return DETECTOR_STATUS_DISK_ERROR;
	}

	AI_size_t size = aibases.size;
   60e34:	d8c0bb17 	ldw	r3,748(sp)
	AI_amount_t decisions = aibases.decisions;

	for(AI_amount_t n=0 ; n < size ; n ++){
   60e38:	002f883a 	mov	r23,zero
   60e3c:	0021883a 	mov	r16,zero

	if(status == DETECTOR_STATUS_DISK_ERROR ){
		return DETECTOR_STATUS_DISK_ERROR;
	}

	AI_size_t size = aibases.size;
   60e40:	d8c10215 	stw	r3,1032(sp)
	AI_amount_t decisions = aibases.decisions;
   60e44:	d8c0ba17 	ldw	r3,744(sp)
   60e48:	d8c10315 	stw	r3,1036(sp)

	for(AI_amount_t n=0 ; n < size ; n ++){
   60e4c:	d8c10217 	ldw	r3,1032(sp)
   60e50:	80c04f26 	beq	r16,r3,60f90 <ai_group_analyse+0x20c>

		AI_amount_t tries = 0;

		if(IS_CORRECT_SECTOR(detector -> start)){
   60e54:	88800a17 	ldw	r2,40(r17)
   60e58:	00ffff94 	movui	r3,65534
   60e5c:	18800536 	bltu	r3,r2,60e74 <ai_group_analyse+0xf0>
   60e60:	b5c7883a 	add	r3,r22,r23
			bases[n] += detector -> start;
   60e64:	19000017 	ldw	r4,0(r3)
   60e68:	88800a17 	ldw	r2,40(r17)
   60e6c:	2085883a 	add	r2,r4,r2
   60e70:	18800015 	stw	r2,0(r3)
		}

		comparasion.spects = aibases.packet_sizes[n] * aibases.spects_in_base[n];
   60e74:	dcc0b617 	ldw	r19,728(sp)
   60e78:	d880b817 	ldw	r2,736(sp)
   60e7c:	9de7883a 	add	r19,r19,r23
   60e80:	15c5883a 	add	r2,r2,r23
   60e84:	99400017 	ldw	r5,0(r19)
   60e88:	11000017 	ldw	r4,0(r2)
   60e8c:	00648600 	call	64860 <__mulsi3>
   60e90:	d880fd15 	stw	r2,1012(sp)

		comparasion.packet_size = aibases.packet_sizes[n];
   60e94:	98800017 	ldw	r2,0(r19)
   60e98:	802690fa 	slli	r19,r16,3
		comparasion.max_diffrence = MAXIMUM_DIFF;
		comparasion.kb_spect_size = aibases.spect_sizes[n];

		while(tries < MAX_RETRIES){
   60e9c:	024000c4 	movi	r9,3
			bases[n] += detector -> start;
		}

		comparasion.spects = aibases.packet_sizes[n] * aibases.spects_in_base[n];

		comparasion.packet_size = aibases.packet_sizes[n];
   60ea0:	d880fe15 	stw	r2,1016(sp)
		comparasion.max_diffrence = MAXIMUM_DIFF;
   60ea4:	008001b4 	movhi	r2,6
   60ea8:	1086a004 	addi	r2,r2,6784
   60eac:	d880ff15 	stw	r2,1020(sp)
		comparasion.kb_spect_size = aibases.spect_sizes[n];
   60eb0:	d880b717 	ldw	r2,732(sp)
   60eb4:	ace7883a 	add	r19,r21,r19

		while(tries < MAX_RETRIES){
			comparasion.start = bases[n];
   60eb8:	b5d7883a 	add	r11,r22,r23

		comparasion.spects = aibases.packet_sizes[n] * aibases.spects_in_base[n];

		comparasion.packet_size = aibases.packet_sizes[n];
		comparasion.max_diffrence = MAXIMUM_DIFF;
		comparasion.kb_spect_size = aibases.spect_sizes[n];
   60ebc:	15c5883a 	add	r2,r2,r23
   60ec0:	10800017 	ldw	r2,0(r2)
			alt_printf(" ms \n");

			Detector_status_t ostatus = analyse_load_errors(state[n],detector,&decision[n],crcs[n]);
			if(ostatus != DETECTOR_STATUS_OK){

				if(ostatus == DETECTOR_STATUS_CRC_ERROR){
   60ec4:	00c001c4 	movi	r3,7

		comparasion.spects = aibases.packet_sizes[n] * aibases.spects_in_base[n];

		comparasion.packet_size = aibases.packet_sizes[n];
		comparasion.max_diffrence = MAXIMUM_DIFF;
		comparasion.kb_spect_size = aibases.spect_sizes[n];
   60ec8:	d8810015 	stw	r2,1024(sp)

		while(tries < MAX_RETRIES){
			comparasion.start = bases[n];
   60ecc:	58800017 	ldw	r2,0(r11)

			Timer_reset(detector -> timer);
   60ed0:	89000617 	ldw	r4,24(r17)
   60ed4:	d8c10915 	stw	r3,1060(sp)
   60ed8:	da410715 	stw	r9,1052(sp)
   60edc:	dac10815 	stw	r11,1056(sp)
		comparasion.packet_size = aibases.packet_sizes[n];
		comparasion.max_diffrence = MAXIMUM_DIFF;
		comparasion.kb_spect_size = aibases.spect_sizes[n];

		while(tries < MAX_RETRIES){
			comparasion.start = bases[n];
   60ee0:	d880fc15 	stw	r2,1008(sp)

			Timer_reset(detector -> timer);
   60ee4:	00645c00 	call	645c0 <Timer_reset>

			state[n] = AI_compare(&decision[n],detector -> comparer,&comparasion);
   60ee8:	89400417 	ldw	r5,16(r17)
   60eec:	d980fc04 	addi	r6,sp,1008
   60ef0:	9809883a 	mov	r4,r19
   60ef4:	006045c0 	call	6045c <AI_compare>
			score[n] = comparasion.diffrence;
   60ef8:	d9010117 	ldw	r4,1028(sp)
   60efc:	95d5883a 	add	r10,r18,r23
		while(tries < MAX_RETRIES){
			comparasion.start = bases[n];

			Timer_reset(detector -> timer);

			state[n] = AI_compare(&decision[n],detector -> comparer,&comparasion);
   60f00:	50800015 	stw	r2,0(r10)
			score[n] = comparasion.diffrence;
   60f04:	a5c5883a 	add	r2,r20,r23
   60f08:	11000015 	stw	r4,0(r2)

			int time = Timer_get_time(detector -> timer);
   60f0c:	89000617 	ldw	r4,24(r17)
   60f10:	da810615 	stw	r10,1048(sp)
   60f14:	00646600 	call	64660 <Timer_get_time>
			alt_printf("Classifier working for database (20 MB -> 80 MB decompressed) %x : ",n);
   60f18:	010001b4 	movhi	r4,6
   60f1c:	800b883a 	mov	r5,r16
   60f20:	21135d04 	addi	r4,r4,19828
   60f24:	d8810515 	stw	r2,1044(sp)
   60f28:	0064ab00 	call	64ab0 <alt_printf>
			printnum(time);
   60f2c:	d9810517 	ldw	r6,1044(sp)
   60f30:	3009883a 	mov	r4,r6
   60f34:	00643080 	call	64308 <printnum>

			alt_printf(" ms \n");
   60f38:	010001b4 	movhi	r4,6
   60f3c:	21136e04 	addi	r4,r4,19896
   60f40:	0064ab00 	call	64ab0 <alt_printf>

			Detector_status_t ostatus = analyse_load_errors(state[n],detector,&decision[n],crcs[n]);
   60f44:	da810617 	ldw	r10,1048(sp)
   60f48:	e5c5883a 	add	r2,fp,r23
   60f4c:	11c00017 	ldw	r7,0(r2)
   60f50:	51000017 	ldw	r4,0(r10)
   60f54:	980d883a 	mov	r6,r19
   60f58:	880b883a 	mov	r5,r17
   60f5c:	0060b480 	call	60b48 <analyse_load_errors>
			if(ostatus != DETECTOR_STATUS_OK){
   60f60:	d8c10917 	ldw	r3,1060(sp)
   60f64:	da410717 	ldw	r9,1052(sp)
   60f68:	dac10817 	ldw	r11,1056(sp)
   60f6c:	10000526 	beq	r2,zero,60f84 <ai_group_analyse+0x200>

				if(ostatus == DETECTOR_STATUS_CRC_ERROR){
   60f70:	10c0311e 	bne	r2,r3,61038 <ai_group_analyse+0x2b4>
   60f74:	4a7fffc4 	addi	r9,r9,-1
					tries ++;

					if(tries == MAX_RETRIES){
   60f78:	483fd41e 	bne	r9,zero,60ecc <__alt_data_end+0xfffececc>
   60f7c:	1805883a 	mov	r2,r3
   60f80:	00002d06 	br	61038 <ai_group_analyse+0x2b4>
	}

	AI_size_t size = aibases.size;
	AI_amount_t decisions = aibases.decisions;

	for(AI_amount_t n=0 ; n < size ; n ++){
   60f84:	84000044 	addi	r16,r16,1
   60f88:	bdc00104 	addi	r23,r23,4
   60f8c:	003faf06 	br	60e4c <__alt_data_end+0xfffece4c>
			break;
		}

	}

	if(load_linker_list(detector,linkers) == AI_DATABASE_ERROR){
   60f90:	8809883a 	mov	r4,r17
   60f94:	d9408104 	addi	r5,sp,516
   60f98:	00606e80 	call	606e8 <load_linker_list>
   60f9c:	04400084 	movi	r17,2
   60fa0:	147fa026 	beq	r2,r17,60e24 <__alt_data_end+0xfffece24>
		return DETECTOR_STATUS_FILE_ERROR;
	}

	if(isDetected(state,size)){
   60fa4:	800b883a 	mov	r5,r16
   60fa8:	9009883a 	mov	r4,r18
   60fac:	0060a940 	call	60a94 <isDetected>
   60fb0:	10001826 	beq	r2,zero,61014 <ai_group_analyse+0x290>

		Detector_word_decision_t m_word = selectBestSuit(score,state,decision,spects_in_base,size);
   60fb4:	dc000015 	stw	r16,0(sp)
   60fb8:	d9c0c404 	addi	r7,sp,784
   60fbc:	a80d883a 	mov	r6,r21
   60fc0:	900b883a 	mov	r5,r18
   60fc4:	a009883a 	mov	r4,r20
   60fc8:	0060af00 	call	60af0 <selectBestSuit>

		if(m_word > decisions){
   60fcc:	d8c10317 	ldw	r3,1036(sp)
   60fd0:	10803fcc 	andi	r2,r2,255
   60fd4:	18bf9336 	bltu	r3,r2,60e24 <__alt_data_end+0xfffece24>
			return DETECTOR_STATUS_FILE_ERROR;
		}

		uint8_t* text_word = linkers[m_word];
   60fd8:	1085883a 	add	r2,r2,r2
   60fdc:	d8c00104 	addi	r3,sp,4
   60fe0:	1085883a 	add	r2,r2,r2
   60fe4:	1885883a 	add	r2,r3,r2
   60fe8:	10808017 	ldw	r2,512(r2)
   60fec:	d8c10417 	ldw	r3,1040(sp)
   60ff0:	11000404 	addi	r4,r2,16

		for(AI_position_t pos = 0; pos < LINKERS_LEN; pos ++){
			word[pos] = text_word[pos];
   60ff4:	11400003 	ldbu	r5,0(r2)
   60ff8:	19400005 	stb	r5,0(r3)

			if(text_word[pos] == 0){
   60ffc:	11400003 	ldbu	r5,0(r2)
   61000:	28000a26 	beq	r5,zero,6102c <ai_group_analyse+0x2a8>
   61004:	10800044 	addi	r2,r2,1
   61008:	18c00044 	addi	r3,r3,1
			return DETECTOR_STATUS_FILE_ERROR;
		}

		uint8_t* text_word = linkers[m_word];

		for(AI_position_t pos = 0; pos < LINKERS_LEN; pos ++){
   6100c:	113ff91e 	bne	r2,r4,60ff4 <__alt_data_end+0xfffecff4>
   61010:	003f8406 	br	60e24 <__alt_data_end+0xfffece24>


		return DETECTOR_STATUS_FILE_ERROR;
	}else{

		if(isNotDetected(state,size)){
   61014:	800b883a 	mov	r5,r16
   61018:	9009883a 	mov	r4,r18
   6101c:	0060ac00 	call	60ac0 <isNotDetected>
   61020:	1000041e 	bne	r2,zero,61034 <ai_group_analyse+0x2b0>
			return DETECTOR_STATUS_CANT_DETECT;
		}else{
			return DETECTOR_STATUS_BAD_CONFIG;
   61024:	00800104 	movi	r2,4
   61028:	00000306 	br	61038 <ai_group_analyse+0x2b4>

		for(AI_position_t pos = 0; pos < LINKERS_LEN; pos ++){
			word[pos] = text_word[pos];

			if(text_word[pos] == 0){
				return DETECTOR_STATUS_OK;
   6102c:	0005883a 	mov	r2,zero
   61030:	00000106 	br	61038 <ai_group_analyse+0x2b4>

		return DETECTOR_STATUS_FILE_ERROR;
	}else{

		if(isNotDetected(state,size)){
			return DETECTOR_STATUS_CANT_DETECT;
   61034:	8805883a 	mov	r2,r17
		}else{
			return DETECTOR_STATUS_BAD_CONFIG;
		}
	}
}
   61038:	dfc11317 	ldw	ra,1100(sp)
   6103c:	df011217 	ldw	fp,1096(sp)
   61040:	ddc11117 	ldw	r23,1092(sp)
   61044:	dd811017 	ldw	r22,1088(sp)
   61048:	dd410f17 	ldw	r21,1084(sp)
   6104c:	dd010e17 	ldw	r20,1080(sp)
   61050:	dcc10d17 	ldw	r19,1076(sp)
   61054:	dc810c17 	ldw	r18,1072(sp)
   61058:	dc410b17 	ldw	r17,1068(sp)
   6105c:	dc010a17 	ldw	r16,1064(sp)
   61060:	dec11404 	addi	sp,sp,1104
   61064:	f800283a 	ret

00061068 <dma_isr>:
volatile int dma_flag = 0;

static void dma_isr(void* context){

	DMA_memories_t* memories = (DMA_memories_t*) context;
	memories -> flag = DMA_FLAG_UP;
   61068:	00800044 	movi	r2,1
   6106c:	20800215 	stw	r2,8(r4)

	*AI_DMA_IRQ = 0;
   61070:	0005883a 	mov	r2,zero
   61074:	10000015 	stw	zero,0(r2)
   61078:	f800283a 	ret

0006107c <DMA_init>:
}

void DMA_init(volatile DMA_memories_t* memories){
   6107c:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(AI_DMA_0_IRQ_INTERRUPT_CONTROLLER_ID,AI_DMA_0_IRQ,dma_isr, (DMA_memories_t*)memories , 0);
   61080:	018001b4 	movhi	r6,6
   61084:	200f883a 	mov	r7,r4
   61088:	d8000015 	stw	zero,0(sp)
   6108c:	31841a04 	addi	r6,r6,4200
   61090:	01400284 	movi	r5,10
   61094:	0009883a 	mov	r4,zero
	memories -> flag = DMA_FLAG_UP;

	*AI_DMA_IRQ = 0;
}

void DMA_init(volatile DMA_memories_t* memories){
   61098:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(AI_DMA_0_IRQ_INTERRUPT_CONTROLLER_ID,AI_DMA_0_IRQ,dma_isr, (DMA_memories_t*)memories , 0);
   6109c:	00648b00 	call	648b0 <alt_ic_isr_register>
}
   610a0:	dfc00117 	ldw	ra,4(sp)
   610a4:	dec00204 	addi	sp,sp,8
   610a8:	f800283a 	ret

000610ac <DMA_copy_to_ai>:

void DMA_copy_to_ai(volatile DMA_memories_t* memories,uint8_t minimum){

	volatile DMA_table_mem_t* table = memories -> table;
   610ac:	20800017 	ldw	r2,0(r4)

	*AI_DMA_START_ADDR_BLOCK = (uint32_t) &table[0];
   610b0:	00c00104 	movi	r3,4
	*AI_DMA_STOP_ADDR_BLOCK = (uint32_t) &table[DMA_AI_COPY_TO_SWAP_SIZE];
   610b4:	01800204 	movi	r6,8

void DMA_copy_to_ai(volatile DMA_memories_t* memories,uint8_t minimum){

	volatile DMA_table_mem_t* table = memories -> table;

	*AI_DMA_START_ADDR_BLOCK = (uint32_t) &table[0];
   610b8:	18800015 	stw	r2,0(r3)
	*AI_DMA_STOP_ADDR_BLOCK = (uint32_t) &table[DMA_AI_COPY_TO_SWAP_SIZE];
   610bc:	00e80014 	movui	r3,40960
   610c0:	10cf883a 	add	r7,r2,r3
   610c4:	31c00015 	stw	r7,0(r6)
	*AI_DMA_START_ADDR = (uint32_t) &table[0];
   610c8:	01800604 	movi	r6,24
   610cc:	30800015 	stw	r2,0(r6)

	*AI_DMA_DATA_LEN = DMA_AI_COPY_TO_SWAP_SIZE * 2;
   610d0:	00800304 	movi	r2,12
   610d4:	10c00015 	stw	r3,0(r2)
	*AI_DMA_MINIMUM = minimum;
   610d8:	29403fcc 	andi	r5,r5,255
   610dc:	00800404 	movi	r2,16
   610e0:	11400015 	stw	r5,0(r2)

	*AI_DMA_LINE_WIDTH = 320;
   610e4:	00c05004 	movi	r3,320
   610e8:	00800804 	movi	r2,32
   610ec:	10c00015 	stw	r3,0(r2)
	*AI_DMA_REGION_WIDTH = 256;
   610f0:	00c04004 	movi	r3,256
   610f4:	00800904 	movi	r2,36
   610f8:	10c00015 	stw	r3,0(r2)

	*AI_DMA_WAGE = 0xFFFF;
   610fc:	00ffffd4 	movui	r3,65535
   61100:	00800504 	movi	r2,20
   61104:	10c00015 	stw	r3,0(r2)

	memories -> flag = DMA_FLAG_DOWN;
   61108:	20000215 	stw	zero,8(r4)
	*AI_DMA_START = 1;
   6110c:	00c00044 	movi	r3,1
   61110:	00800704 	movi	r2,28
   61114:	10c00015 	stw	r3,0(r2)
	while(memories -> flag == DMA_FLAG_DOWN);
   61118:	20800217 	ldw	r2,8(r4)
   6111c:	103ffe26 	beq	r2,zero,61118 <__alt_data_end+0xfffed118>
}
   61120:	f800283a 	ret

00061124 <DMA_copy_to_swap>:


void DMA_copy_to_swap(volatile DMA_memories_t* memories, DMA_position_t index,DMA_size_t len){

	volatile DMA_table_mem_t* table = memories -> table;
   61124:	20c00017 	ldw	r3,0(r4)

	*AI_DMA_START_ADDR_BLOCK = (uint32_t) &table[0];
   61128:	00800104 	movi	r2,4
	*AI_DMA_STOP_ADDR_BLOCK = (uint32_t) &table[DMA_COPY_TO_SWAP_SIZE];
   6112c:	01c00204 	movi	r7,8

void DMA_copy_to_swap(volatile DMA_memories_t* memories, DMA_position_t index,DMA_size_t len){

	volatile DMA_table_mem_t* table = memories -> table;

	*AI_DMA_START_ADDR_BLOCK = (uint32_t) &table[0];
   61130:	10c00015 	stw	r3,0(r2)
	*AI_DMA_STOP_ADDR_BLOCK = (uint32_t) &table[DMA_COPY_TO_SWAP_SIZE];
   61134:	00aeae14 	movui	r2,47800
   61138:	1885883a 	add	r2,r3,r2
   6113c:	38800015 	stw	r2,0(r7)
	*AI_DMA_START_ADDR = (uint32_t) &table[(index >> 1) << 1];
   61140:	00bfff84 	movi	r2,-2
   61144:	288a703a 	and	r5,r5,r2
   61148:	294b883a 	add	r5,r5,r5
   6114c:	194b883a 	add	r5,r3,r5
   61150:	00800604 	movi	r2,24
   61154:	11400015 	stw	r5,0(r2)

	*AI_DMA_DATA_LEN = len;
   61158:	00800304 	movi	r2,12
   6115c:	11800015 	stw	r6,0(r2)
	*AI_DMA_MINIMUM = 1 << 16;
   61160:	00c00074 	movhi	r3,1
   61164:	00800404 	movi	r2,16
   61168:	10c00015 	stw	r3,0(r2)

	*AI_DMA_WAGE = 0xFFFF;
   6116c:	00ffffd4 	movui	r3,65535
   61170:	00800504 	movi	r2,20
   61174:	10c00015 	stw	r3,0(r2)

	memories -> flag = DMA_FLAG_DOWN;
   61178:	20000215 	stw	zero,8(r4)
	*AI_DMA_START = 1;
   6117c:	00c00044 	movi	r3,1
   61180:	00800704 	movi	r2,28
   61184:	10c00015 	stw	r3,0(r2)
	while(memories -> flag == DMA_FLAG_DOWN);
   61188:	20800217 	ldw	r2,8(r4)
   6118c:	103ffe26 	beq	r2,zero,61188 <__alt_data_end+0xfffed188>

}
   61190:	f800283a 	ret

00061194 <DMA_paste_from_swap>:
void DMA_paste_from_swap(volatile DMA_memories_t* memories,DMA_size_t len){

	volatile DMA_table_mem_t* table = memories -> table;
	volatile DMA_swap_mem_t* swap = memories -> swap;

	for(int k=0;k<len/2;k++){
   61194:	2804d7fa 	srli	r2,r5,31

}

void DMA_paste_from_swap(volatile DMA_memories_t* memories,DMA_size_t len){

	volatile DMA_table_mem_t* table = memories -> table;
   61198:	20c00017 	ldw	r3,0(r4)
	volatile DMA_swap_mem_t* swap = memories -> swap;
   6119c:	21c00117 	ldw	r7,4(r4)

	for(int k=0;k<len/2;k++){
   611a0:	114b883a 	add	r5,r2,r5
   611a4:	280bd07a 	srai	r5,r5,1
   611a8:	1809883a 	mov	r4,r3
   611ac:	380d883a 	mov	r6,r7
		DMA_swap_mem_t get = swap[k];
		DMA_table_mem_t value = 0;

		if(get >> 7 == 0x1){
   611b0:	02000044 	movi	r8,1
			value = ((get << 2) | 0x3) | MINUS_12_BITS;
   611b4:	027f00c4 	movi	r9,-1021
void DMA_paste_from_swap(volatile DMA_memories_t* memories,DMA_size_t len){

	volatile DMA_table_mem_t* table = memories -> table;
	volatile DMA_swap_mem_t* swap = memories -> swap;

	for(int k=0;k<len/2;k++){
   611b8:	31c5c83a 	sub	r2,r6,r7
   611bc:	11400f0e 	bge	r2,r5,611fc <DMA_paste_from_swap+0x68>
		DMA_swap_mem_t get = swap[k];
   611c0:	30800003 	ldbu	r2,0(r6)
		DMA_table_mem_t value = 0;

		if(get >> 7 == 0x1){
   611c4:	10c03fcc 	andi	r3,r2,255
   611c8:	1814d1fa 	srli	r10,r3,7
   611cc:	5200041e 	bne	r10,r8,611e0 <DMA_paste_from_swap+0x4c>
			value = ((get << 2) | 0x3) | MINUS_12_BITS;
   611d0:	18c7883a 	add	r3,r3,r3
   611d4:	18c7883a 	add	r3,r3,r3
   611d8:	1a44b03a 	or	r2,r3,r9
   611dc:	00000306 	br	611ec <DMA_paste_from_swap+0x58>
		}else{
			value = get << 2;
   611e0:	10803fcc 	andi	r2,r2,255
   611e4:	1085883a 	add	r2,r2,r2
   611e8:	1085883a 	add	r2,r2,r2
		}

		table[k] = value;
   611ec:	2080000d 	sth	r2,0(r4)
   611f0:	31800044 	addi	r6,r6,1
   611f4:	21000084 	addi	r4,r4,2
   611f8:	003fef06 	br	611b8 <__alt_data_end+0xfffed1b8>
	}

}
   611fc:	f800283a 	ret

00061200 <selfcheck>:

#define MINUMUM_VALUE_SPECT		16
#define PACKET_SIZE 			64
#define SPECT_LINE_SIZE 		(uint16_t) 320

Detector_status_diag_t selfcheck(volatile Detector_t* detector){
   61200:	deffff04 	addi	sp,sp,-4
   61204:	dfc00015 	stw	ra,0(sp)

	Detector_status_t status = ai_group_selfcheck(detector);
   61208:	0060b800 	call	60b80 <ai_group_selfcheck>
   6120c:	00ffff44 	movi	r3,-3
   61210:	10c4703a 	and	r2,r2,r3
	if(status == DETECTOR_STATUS_CANT_DETECT || status == DETECTOR_STATUS_OK){
		return DETECTOR_STATUS_DIAGNOSTIC_READY;
	}else{
		return DETECTOR_STATUS_DIAGNOSTIC_ERROR;
	}
}
   61214:	1004c03a 	cmpne	r2,r2,zero
   61218:	dfc00017 	ldw	ra,0(sp)
   6121c:	dec00104 	addi	sp,sp,4
   61220:	f800283a 	ret

00061224 <get_word>:

Detector_status_t get_word(volatile Detector_t* detector, Timer_time_t timeout,uint8_t* word,Recorder_flag_t flag){

	DMA_table_mem_t* table = (DMA_table_mem_t*) detector -> memories -> table;
   61224:	20800017 	ldw	r2,0(r4)
	}else{
		return DETECTOR_STATUS_DIAGNOSTIC_ERROR;
	}
}

Detector_status_t get_word(volatile Detector_t* detector, Timer_time_t timeout,uint8_t* word,Recorder_flag_t flag){
   61228:	defff104 	addi	sp,sp,-60
   6122c:	dd000d15 	stw	r20,52(sp)

	DMA_table_mem_t* table = (DMA_table_mem_t*) detector -> memories -> table;
   61230:	15000017 	ldw	r20,0(r2)
	Recorder_t recorder;

	recorder.memories = detector -> memories;
   61234:	20800017 	ldw	r2,0(r4)
	}else{
		return DETECTOR_STATUS_DIAGNOSTIC_ERROR;
	}
}

Detector_status_t get_word(volatile Detector_t* detector, Timer_time_t timeout,uint8_t* word,Recorder_flag_t flag){
   61238:	dcc00c15 	stw	r19,48(sp)
   6123c:	dc000915 	stw	r16,36(sp)

	DMA_table_mem_t* table = (DMA_table_mem_t*) detector -> memories -> table;
	Recorder_t recorder;

	recorder.memories = detector -> memories;
   61240:	d8800115 	stw	r2,4(sp)
	recorder.microphone = detector -> microphone;
   61244:	20800317 	ldw	r2,12(r4)
	}else{
		return DETECTOR_STATUS_DIAGNOSTIC_ERROR;
	}
}

Detector_status_t get_word(volatile Detector_t* detector, Timer_time_t timeout,uint8_t* word,Recorder_flag_t flag){
   61248:	2021883a 	mov	r16,r4
   6124c:	3027883a 	mov	r19,r6

	DMA_table_mem_t* table = (DMA_table_mem_t*) detector -> memories -> table;
	Recorder_t recorder;

	recorder.memories = detector -> memories;
	recorder.microphone = detector -> microphone;
   61250:	d8800315 	stw	r2,12(sp)
	recorder.normaliser = detector -> normalizer;
   61254:	20800217 	ldw	r2,8(r4)
	recorder.gpio = detector -> gpio;
	recorder.buart = detector -> buart;
	recorder.console = detector -> console;
	Timer_time_t return_time = 0;

	Recorder_status_t rstatus = Recorder_record(&recorder,&return_time,timeout,flag);
   61258:	280d883a 	mov	r6,r5
   6125c:	d9400804 	addi	r5,sp,32
	DMA_table_mem_t* table = (DMA_table_mem_t*) detector -> memories -> table;
	Recorder_t recorder;

	recorder.memories = detector -> memories;
	recorder.microphone = detector -> microphone;
	recorder.normaliser = detector -> normalizer;
   61260:	d8800215 	stw	r2,8(sp)
	recorder.timer = detector -> timer;
   61264:	20800617 	ldw	r2,24(r4)
	}else{
		return DETECTOR_STATUS_DIAGNOSTIC_ERROR;
	}
}

Detector_status_t get_word(volatile Detector_t* detector, Timer_time_t timeout,uint8_t* word,Recorder_flag_t flag){
   61268:	dfc00e15 	stw	ra,56(sp)
   6126c:	dc800b15 	stw	r18,44(sp)
	Recorder_t recorder;

	recorder.memories = detector -> memories;
	recorder.microphone = detector -> microphone;
	recorder.normaliser = detector -> normalizer;
	recorder.timer = detector -> timer;
   61270:	d8800015 	stw	r2,0(sp)
	recorder.gpio = detector -> gpio;
   61274:	20800817 	ldw	r2,32(r4)
	}else{
		return DETECTOR_STATUS_DIAGNOSTIC_ERROR;
	}
}

Detector_status_t get_word(volatile Detector_t* detector, Timer_time_t timeout,uint8_t* word,Recorder_flag_t flag){
   61278:	dc400a15 	stw	r17,40(sp)
	recorder.normaliser = detector -> normalizer;
	recorder.timer = detector -> timer;
	recorder.gpio = detector -> gpio;
	recorder.buart = detector -> buart;
	recorder.console = detector -> console;
	Timer_time_t return_time = 0;
   6127c:	d8000815 	stw	zero,32(sp)

	recorder.memories = detector -> memories;
	recorder.microphone = detector -> microphone;
	recorder.normaliser = detector -> normalizer;
	recorder.timer = detector -> timer;
	recorder.gpio = detector -> gpio;
   61280:	d8800615 	stw	r2,24(sp)
	recorder.buart = detector -> buart;
   61284:	20800717 	ldw	r2,28(r4)
   61288:	d8800415 	stw	r2,16(sp)
	recorder.console = detector -> console;
   6128c:	20800917 	ldw	r2,36(r4)
	Timer_time_t return_time = 0;

	Recorder_status_t rstatus = Recorder_record(&recorder,&return_time,timeout,flag);
   61290:	d809883a 	mov	r4,sp
	recorder.microphone = detector -> microphone;
	recorder.normaliser = detector -> normalizer;
	recorder.timer = detector -> timer;
	recorder.gpio = detector -> gpio;
	recorder.buart = detector -> buart;
	recorder.console = detector -> console;
   61294:	d8800515 	stw	r2,20(sp)
	Timer_time_t return_time = 0;

	Recorder_status_t rstatus = Recorder_record(&recorder,&return_time,timeout,flag);
   61298:	00621640 	call	62164 <Recorder_record>
   6129c:	1007883a 	mov	r3,r2

	if(rstatus == RECORDER_VOLUME){
   612a0:	00800104 	movi	r2,4
   612a4:	18805326 	beq	r3,r2,613f4 <get_word+0x1d0>
		return DETECTOR_STATUS_CHANGE_VOLUME;
	}
	if(rstatus == RECORDER_START){
   612a8:	008000c4 	movi	r2,3
   612ac:	18805326 	beq	r3,r2,613fc <get_word+0x1d8>
		return DETECTOR_STATUS_COMMAND_DIRECTLY;
	}
	if(rstatus == RECORDER_CANCEL){
   612b0:	04400144 	movi	r17,5
   612b4:	1c405326 	beq	r3,r17,61404 <get_word+0x1e0>
		return DETECTOR_STATUS_COMMAND_CANCEL;
	}

	if(rstatus == RECORDER_TIMEOUT){
   612b8:	04800044 	movi	r18,1
   612bc:	1c805626 	beq	r3,r18,61418 <get_word+0x1f4>
		return DETECTOR_STATUS_NO_FRAGMENT;
	}else if(rstatus == RECORDER_ERROR){
   612c0:	01000084 	movi	r4,2
   612c4:	00800184 	movi	r2,6
   612c8:	19005326 	beq	r3,r4,61418 <get_word+0x1f4>
		return DETECTOR_STATUS_MICROPHONE_ERROR;
	}

	if(rstatus == RECORDER_RESET){
   612cc:	18804f26 	beq	r3,r2,6140c <get_word+0x1e8>
		return DETECTOR_STATUS_RESET;
	}
	alt_printf("Detecting test \n");
   612d0:	010001b4 	movhi	r4,6
   612d4:	21137004 	addi	r4,r4,19904
   612d8:	0064ab00 	call	64ab0 <alt_printf>
	alt_printf("==== \n");
   612dc:	010001b4 	movhi	r4,6
   612e0:	21137504 	addi	r4,r4,19924
   612e4:	0064ab00 	call	64ab0 <alt_printf>
	alt_printf(" Measure key features: \n");
   612e8:	010001b4 	movhi	r4,6
   612ec:	21137704 	addi	r4,r4,19932
   612f0:	0064ab00 	call	64ab0 <alt_printf>

	Timer_reset(detector -> timer);
   612f4:	81000617 	ldw	r4,24(r16)
   612f8:	00645c00 	call	645c0 <Timer_reset>

	DMA_size_t select_size = 0;
	if(selectLoud(detector -> memories,&select_size,return_time) == LOUD_FRAGMENT_NO_FRAGMENT){
   612fc:	81000017 	ldw	r4,0(r16)
   61300:	d9800817 	ldw	r6,32(sp)
   61304:	d9400704 	addi	r5,sp,28
	alt_printf("==== \n");
	alt_printf(" Measure key features: \n");

	Timer_reset(detector -> timer);

	DMA_size_t select_size = 0;
   61308:	d8000715 	stw	zero,28(sp)
	if(selectLoud(detector -> memories,&select_size,return_time) == LOUD_FRAGMENT_NO_FRAGMENT){
   6130c:	00639040 	call	63904 <selectLoud>
   61310:	14804026 	beq	r2,r18,61414 <get_word+0x1f0>
		return DETECTOR_STATUS_NOISE;
	}

	alt_printf("Select loud fragment time: ");
   61314:	010001b4 	movhi	r4,6
   61318:	21137e04 	addi	r4,r4,19960
   6131c:	0064ab00 	call	64ab0 <alt_printf>
	printnum(Timer_get_time(detector -> timer));
   61320:	81000617 	ldw	r4,24(r16)
   61324:	00646600 	call	64660 <Timer_get_time>
   61328:	1009883a 	mov	r4,r2
   6132c:	00643080 	call	64308 <printnum>
	alt_printf(" ms \n");
   61330:	010001b4 	movhi	r4,6
   61334:	21136e04 	addi	r4,r4,19896
   61338:	0064ab00 	call	64ab0 <alt_printf>


	DMA_size_t for_len = Signal_spectrogram(detector -> spectrogramer,select_size);
   6133c:	d9400717 	ldw	r5,28(sp)
   61340:	81000117 	ldw	r4,4(r16)
   61344:	00637a00 	call	637a0 <Signal_spectrogram>



	Timer_reset(detector -> timer);
   61348:	81000617 	ldw	r4,24(r16)
	alt_printf("Select loud fragment time: ");
	printnum(Timer_get_time(detector -> timer));
	alt_printf(" ms \n");


	DMA_size_t for_len = Signal_spectrogram(detector -> spectrogramer,select_size);
   6134c:	1023883a 	mov	r17,r2



	Timer_reset(detector -> timer);
   61350:	00645c00 	call	645c0 <Timer_reset>
	Scale_scaleX(table,PACKET_SIZE, SPECT_LINE_SIZE, for_len/SPECT_LINE_SIZE);
   61354:	8809883a 	mov	r4,r17
   61358:	01405004 	movi	r5,320
   6135c:	00646ac0 	call	646ac <__divsi3>
   61360:	100f883a 	mov	r7,r2
   61364:	01805004 	movi	r6,320
   61368:	01401004 	movi	r5,64
   6136c:	a009883a 	mov	r4,r20
   61370:	0063a340 	call	63a34 <Scale_scaleX>

	alt_printf("Time scaleing time: ");
   61374:	010001b4 	movhi	r4,6
   61378:	21138504 	addi	r4,r4,19988
   6137c:	0064ab00 	call	64ab0 <alt_printf>
	printnum(Timer_get_time(detector -> timer));
   61380:	81000617 	ldw	r4,24(r16)
   61384:	00646600 	call	64660 <Timer_get_time>
   61388:	1009883a 	mov	r4,r2
   6138c:	00643080 	call	64308 <printnum>
	alt_printf(" ms \n");
   61390:	010001b4 	movhi	r4,6
   61394:	21136e04 	addi	r4,r4,19896
   61398:	0064ab00 	call	64ab0 <alt_printf>

	Timer_reset(detector -> timer);
   6139c:	81000617 	ldw	r4,24(r16)
   613a0:	00645c00 	call	645c0 <Timer_reset>
	DMA_copy_to_ai(detector -> memories,MINUMUM_VALUE_SPECT);
   613a4:	81000017 	ldw	r4,0(r16)
   613a8:	01400404 	movi	r5,16
   613ac:	00610ac0 	call	610ac <DMA_copy_to_ai>

	alt_printf("DMA time: ");
   613b0:	010001b4 	movhi	r4,6
   613b4:	21138b04 	addi	r4,r4,20012
   613b8:	0064ab00 	call	64ab0 <alt_printf>
	printnum(Timer_get_time(detector -> timer));
   613bc:	81000617 	ldw	r4,24(r16)
   613c0:	00646600 	call	64660 <Timer_get_time>
   613c4:	1009883a 	mov	r4,r2
   613c8:	00643080 	call	64308 <printnum>
	alt_printf(" ms \n");
   613cc:	010001b4 	movhi	r4,6
   613d0:	21136e04 	addi	r4,r4,19896
   613d4:	0064ab00 	call	64ab0 <alt_printf>

	alt_printf("----\n");
   613d8:	010001b4 	movhi	r4,6
   613dc:	21138e04 	addi	r4,r4,20024
   613e0:	0064ab00 	call	64ab0 <alt_printf>
	return ai_group_analyse(detector,word);
   613e4:	980b883a 	mov	r5,r19
   613e8:	8009883a 	mov	r4,r16
   613ec:	0060d840 	call	60d84 <ai_group_analyse>
   613f0:	00000906 	br	61418 <get_word+0x1f4>
	Timer_time_t return_time = 0;

	Recorder_status_t rstatus = Recorder_record(&recorder,&return_time,timeout,flag);

	if(rstatus == RECORDER_VOLUME){
		return DETECTOR_STATUS_CHANGE_VOLUME;
   613f4:	00800284 	movi	r2,10
   613f8:	00000706 	br	61418 <get_word+0x1f4>
	}
	if(rstatus == RECORDER_START){
		return DETECTOR_STATUS_COMMAND_DIRECTLY;
   613fc:	00800244 	movi	r2,9
   61400:	00000506 	br	61418 <get_word+0x1f4>
	}
	if(rstatus == RECORDER_CANCEL){
		return DETECTOR_STATUS_COMMAND_CANCEL;
   61404:	008002c4 	movi	r2,11
   61408:	00000306 	br	61418 <get_word+0x1f4>
	}else if(rstatus == RECORDER_ERROR){
		return DETECTOR_STATUS_MICROPHONE_ERROR;
	}

	if(rstatus == RECORDER_RESET){
		return DETECTOR_STATUS_RESET;
   6140c:	00800304 	movi	r2,12
   61410:	00000106 	br	61418 <get_word+0x1f4>

	Timer_reset(detector -> timer);

	DMA_size_t select_size = 0;
	if(selectLoud(detector -> memories,&select_size,return_time) == LOUD_FRAGMENT_NO_FRAGMENT){
		return DETECTOR_STATUS_NOISE;
   61414:	8805883a 	mov	r2,r17
	alt_printf(" ms \n");

	alt_printf("----\n");
	return ai_group_analyse(detector,word);

}
   61418:	dfc00e17 	ldw	ra,56(sp)
   6141c:	dd000d17 	ldw	r20,52(sp)
   61420:	dcc00c17 	ldw	r19,48(sp)
   61424:	dc800b17 	ldw	r18,44(sp)
   61428:	dc400a17 	ldw	r17,40(sp)
   6142c:	dc000917 	ldw	r16,36(sp)
   61430:	dec00f04 	addi	sp,sp,60
   61434:	f800283a 	ret

00061438 <isProperFilesystem>:
#define MAX_FILE_NAME_SIZE				16
#define MAX_FILE_NAME_SIZE_IN_64		12

#define PAGE_SIZE						(Simple_control_sum_size_t) 511

Data_bool_t isProperFilesystem(uint8_t* read){
   61438:	defff704 	addi	sp,sp,-36
	uint8_t filesystem_name[32];

	if(from64toBytes(&read[5],filesystem_name,24)){
   6143c:	01800604 	movi	r6,24
   61440:	d80b883a 	mov	r5,sp
   61444:	21000144 	addi	r4,r4,5
#define MAX_FILE_NAME_SIZE				16
#define MAX_FILE_NAME_SIZE_IN_64		12

#define PAGE_SIZE						(Simple_control_sum_size_t) 511

Data_bool_t isProperFilesystem(uint8_t* read){
   61448:	dfc00815 	stw	ra,32(sp)
	uint8_t filesystem_name[32];

	if(from64toBytes(&read[5],filesystem_name,24)){
   6144c:	00641540 	call	64154 <from64toBytes>
   61450:	1000071e 	bne	r2,zero,61470 <isProperFilesystem+0x38>
		return DATA_FALSE;
	}

	if(!compare(FS_NAME,filesystem_name,32)){
   61454:	010001b4 	movhi	r4,6
   61458:	01800804 	movi	r6,32
   6145c:	d80b883a 	mov	r5,sp
   61460:	21139004 	addi	r4,r4,20032
   61464:	00642d40 	call	642d4 <compare>

Data_bool_t isProperFilesystem(uint8_t* read){
	uint8_t filesystem_name[32];

	if(from64toBytes(&read[5],filesystem_name,24)){
		return DATA_FALSE;
   61468:	1004c03a 	cmpne	r2,r2,zero
   6146c:	00000106 	br	61474 <isProperFilesystem+0x3c>
   61470:	0005883a 	mov	r2,zero
		return DATA_FALSE;
	}


	return DATA_TRUE;
}
   61474:	dfc00817 	ldw	ra,32(sp)
   61478:	dec00904 	addi	sp,sp,36
   6147c:	f800283a 	ret

00061480 <Is_filesystem>:


Data_bool_t Is_filesystem(uint8_t* read){
   61480:	defffe04 	addi	sp,sp,-8
   61484:	dc000015 	stw	r16,0(sp)

	if(compare(AI_FS_HEADER,&read[0],4)){
   61488:	200b883a 	mov	r5,r4

	return DATA_TRUE;
}


Data_bool_t Is_filesystem(uint8_t* read){
   6148c:	2021883a 	mov	r16,r4

	if(compare(AI_FS_HEADER,&read[0],4)){
   61490:	010001b4 	movhi	r4,6
   61494:	01800104 	movi	r6,4
   61498:	21139304 	addi	r4,r4,20044

	return DATA_TRUE;
}


Data_bool_t Is_filesystem(uint8_t* read){
   6149c:	dfc00115 	stw	ra,4(sp)

	if(compare(AI_FS_HEADER,&read[0],4)){
   614a0:	00642d40 	call	642d4 <compare>
   614a4:	10000226 	beq	r2,zero,614b0 <Is_filesystem+0x30>

		uint8_t version = read[4];
		uint8_t compare = (VERSION << 4) | SUBVERSION;

		if(version > compare){
			return DATA_FALSE;
   614a8:	80800103 	ldbu	r2,4(r16)
   614ac:	10800470 	cmpltui	r2,r2,17

		return DATA_TRUE;
	}else{
		return DATA_FALSE;
	}
}
   614b0:	dfc00117 	ldw	ra,4(sp)
   614b4:	dc000017 	ldw	r16,0(sp)
   614b8:	dec00204 	addi	sp,sp,8
   614bc:	f800283a 	ret

000614c0 <Prepare_file_system_list>:

Data_bool_t Prepare_file_system_list(File_system_list_t* list, uint8_t* buffer, Data_size_t size,Data_size_t max_files){
   614c0:	22000104 	addi	r8,r4,4
   614c4:	22400204 	addi	r9,r4,8
	uint8_t* ptr = buffer;
   614c8:	2805883a 	mov	r2,r5

	Data_size_t buffer_allocated_size = 0;

	for(int n=0;n<max_files;n++){
   614cc:	0007883a 	mov	r3,zero
   614d0:	19c00b26 	beq	r3,r7,61500 <Prepare_file_system_list+0x40>

		list[n].addr = 0;
   614d4:	20000015 	stw	zero,0(r4)
		list[n].len = 0;
   614d8:	40000015 	stw	zero,0(r8)
		list[n].name = ptr;
   614dc:	48800015 	stw	r2,0(r9)

		ptr += MAX_FILE_NAME_SIZE;
   614e0:	10800404 	addi	r2,r2,16
		buffer_allocated_size += MAX_FILE_NAME_SIZE;

		if(buffer_allocated_size > size){
   614e4:	1155c83a 	sub	r10,r2,r5
   614e8:	21000304 	addi	r4,r4,12
   614ec:	42000304 	addi	r8,r8,12
   614f0:	4a400304 	addi	r9,r9,12
   614f4:	32800436 	bltu	r6,r10,61508 <Prepare_file_system_list+0x48>
Data_bool_t Prepare_file_system_list(File_system_list_t* list, uint8_t* buffer, Data_size_t size,Data_size_t max_files){
	uint8_t* ptr = buffer;

	Data_size_t buffer_allocated_size = 0;

	for(int n=0;n<max_files;n++){
   614f8:	18c00044 	addi	r3,r3,1
   614fc:	003ff406 	br	614d0 <__alt_data_end+0xfffed4d0>
		if(buffer_allocated_size > size){
			return DATA_FALSE;
		}
	}

	return DATA_TRUE;
   61500:	00800044 	movi	r2,1
   61504:	f800283a 	ret

		ptr += MAX_FILE_NAME_SIZE;
		buffer_allocated_size += MAX_FILE_NAME_SIZE;

		if(buffer_allocated_size > size){
			return DATA_FALSE;
   61508:	0005883a 	mov	r2,zero
		}
	}

	return DATA_TRUE;
}
   6150c:	f800283a 	ret

00061510 <File_exists>:



File_system_status_t File_exists(volatile Disk_t* disk, File_system_list_t* list,uint8_t* name){
   61510:	defff504 	addi	sp,sp,-44
   61514:	dd000815 	stw	r20,32(sp)
   61518:	dc800615 	stw	r18,24(sp)

	load_disk(disk, 0, KB_PACK_SIZE, 0);
   6151c:	000f883a 	mov	r7,zero
	return DATA_TRUE;
}



File_system_status_t File_exists(volatile Disk_t* disk, File_system_list_t* list,uint8_t* name){
   61520:	2825883a 	mov	r18,r5
   61524:	3029883a 	mov	r20,r6

	load_disk(disk, 0, KB_PACK_SIZE, 0);
   61528:	000b883a 	mov	r5,zero
   6152c:	01800084 	movi	r6,2
	return DATA_TRUE;
}



File_system_status_t File_exists(volatile Disk_t* disk, File_system_list_t* list,uint8_t* name){
   61530:	dfc00a15 	stw	ra,40(sp)
   61534:	dc400515 	stw	r17,20(sp)
   61538:	dc000415 	stw	r16,16(sp)
   6153c:	2023883a 	mov	r17,r4
   61540:	dd400915 	stw	r21,36(sp)
   61544:	dcc00715 	stw	r19,28(sp)

	load_disk(disk, 0, KB_PACK_SIZE, 0);
   61548:	00618c00 	call	618c0 <load_disk>



	if(wait_for_disk(disk) == DISK_LOAD_FAIL){
   6154c:	8809883a 	mov	r4,r17
   61550:	006190c0 	call	6190c <wait_for_disk>
   61554:	04000044 	movi	r16,1
   61558:	14003726 	beq	r2,r16,61638 <File_exists+0x128>
		return FILE_SYSTEM_NO_DISK;
	}

	uint8_t* read = (uint8_t*) disk -> memories -> table;
   6155c:	88800417 	ldw	r2,16(r17)
   61560:	14400017 	ldw	r17,0(r2)

	if(Is_filesystem(read)){
   61564:	8809883a 	mov	r4,r17
   61568:	00614800 	call	61480 <Is_filesystem>
   6156c:	10003426 	beq	r2,zero,61640 <File_exists+0x130>
		if(isProperFilesystem(read)){
   61570:	8809883a 	mov	r4,r17
   61574:	00614380 	call	61438 <isProperFilesystem>
   61578:	10001726 	beq	r2,zero,615d8 <File_exists+0xc8>
   6157c:	00001806 	br	615e0 <File_exists+0xd0>

					index += 1;

					uint8_t buffer[16];

					if(from64toBytes(&read[index],buffer,MAX_FILE_NAME_SIZE_IN_64)){
   61580:	01800304 	movi	r6,12
   61584:	d80b883a 	mov	r5,sp
   61588:	81000044 	addi	r4,r16,1
   6158c:	00641540 	call	64154 <from64toBytes>
   61590:	1000271e 	bne	r2,zero,61630 <File_exists+0x120>
						return DATA_FALSE;
					}

					index +=MAX_FILE_NAME_SIZE_IN_64;

					list -> addr = read_16_value(&read[index]);
   61594:	81000344 	addi	r4,r16,13
   61598:	00642280 	call	64228 <read_16_value>
   6159c:	10bfffcc 	andi	r2,r2,65535
					index += 2;
					list -> len = read_16_value(&read[index]);
   615a0:	810003c4 	addi	r4,r16,15
						return DATA_FALSE;
					}

					index +=MAX_FILE_NAME_SIZE_IN_64;

					list -> addr = read_16_value(&read[index]);
   615a4:	90800015 	stw	r2,0(r18)
					index += 2;
					list -> len = read_16_value(&read[index]);
   615a8:	00642280 	call	64228 <read_16_value>
   615ac:	10bfffcc 	andi	r2,r2,65535
   615b0:	90800115 	stw	r2,4(r18)
					index += 2;

					if(compare(name,buffer, MAX_FILE_NAME_SIZE)){
   615b4:	01800404 	movi	r6,16
   615b8:	d80b883a 	mov	r5,sp
   615bc:	a009883a 	mov	r4,r20
   615c0:	00642d40 	call	642d4 <compare>
   615c4:	84000444 	addi	r16,r16,17
   615c8:	1000111e 	bne	r2,zero,61610 <File_exists+0x100>

			Data_bool_t finished = DATA_FALSE;

			while(!finished){

				if(END_OF_ADDRMAP(read[index])){
   615cc:	80800003 	ldbu	r2,0(r16)
   615d0:	14c00726 	beq	r2,r19,615f0 <File_exists+0xe0>
					}else{
						return FILE_SYSTEM_ERROR;
					}


				}else if(FILE(read[index])){
   615d4:	157fea26 	beq	r2,r21,61580 <__alt_data_end+0xfffed580>
						Simple_control_sum_t csum = Control_count_sum(read, PAGE_SIZE);

						if(csum == read[PAGE_SIZE]){
							return FILE_SYSTEM_EXISTS;
						}else{
							return FILE_SYSTEM_ERROR;
   615d8:	00800084 	movi	r2,2
   615dc:	00001906 	br	61644 <File_exists+0x134>
   615e0:	8c000744 	addi	r16,r17,29

			Data_bool_t finished = DATA_FALSE;

			while(!finished){

				if(END_OF_ADDRMAP(read[index])){
   615e4:	04c01144 	movi	r19,69
					}else{
						return FILE_SYSTEM_ERROR;
					}


				}else if(FILE(read[index])){
   615e8:	05401184 	movi	r21,70
   615ec:	003ff706 	br	615cc <__alt_data_end+0xfffed5cc>

			while(!finished){

				if(END_OF_ADDRMAP(read[index])){

					Simple_control_sum_t csum = Control_count_sum(read, PAGE_SIZE);
   615f0:	01407fc4 	movi	r5,511
   615f4:	8809883a 	mov	r4,r17
   615f8:	00640cc0 	call	640cc <Control_count_sum>

					if(csum == read[PAGE_SIZE]){
   615fc:	88c07fc3 	ldbu	r3,511(r17)
   61600:	10803fcc 	andi	r2,r2,255
   61604:	10fff41e 	bne	r2,r3,615d8 <__alt_data_end+0xfffed5d8>
						return FILE_SYSTEM_NOT_EXISTS;
   61608:	00800144 	movi	r2,5
   6160c:	00000d06 	br	61644 <File_exists+0x134>
					index += 2;
					list -> len = read_16_value(&read[index]);
					index += 2;

					if(compare(name,buffer, MAX_FILE_NAME_SIZE)){
						Simple_control_sum_t csum = Control_count_sum(read, PAGE_SIZE);
   61610:	01407fc4 	movi	r5,511
   61614:	8809883a 	mov	r4,r17
   61618:	00640cc0 	call	640cc <Control_count_sum>

						if(csum == read[PAGE_SIZE]){
   6161c:	88c07fc3 	ldbu	r3,511(r17)
   61620:	10803fcc 	andi	r2,r2,255
   61624:	10ffec1e 	bne	r2,r3,615d8 <__alt_data_end+0xfffed5d8>
							return FILE_SYSTEM_EXISTS;
   61628:	00800104 	movi	r2,4
   6162c:	00000506 	br	61644 <File_exists+0x134>
					index += 1;

					uint8_t buffer[16];

					if(from64toBytes(&read[index],buffer,MAX_FILE_NAME_SIZE_IN_64)){
						return DATA_FALSE;
   61630:	0005883a 	mov	r2,zero
   61634:	00000306 	br	61644 <File_exists+0x134>
	load_disk(disk, 0, KB_PACK_SIZE, 0);



	if(wait_for_disk(disk) == DISK_LOAD_FAIL){
		return FILE_SYSTEM_NO_DISK;
   61638:	008000c4 	movi	r2,3
   6163c:	00000106 	br	61644 <File_exists+0x134>

		return FILE_SYSTEM_ERROR;


	}else{
		return FILE_SYSTEM_NO_FS;
   61640:	8005883a 	mov	r2,r16
	}


}
   61644:	dfc00a17 	ldw	ra,40(sp)
   61648:	dd400917 	ldw	r21,36(sp)
   6164c:	dd000817 	ldw	r20,32(sp)
   61650:	dcc00717 	ldw	r19,28(sp)
   61654:	dc800617 	ldw	r18,24(sp)
   61658:	dc400517 	ldw	r17,20(sp)
   6165c:	dc000417 	ldw	r16,16(sp)
   61660:	dec00b04 	addi	sp,sp,44
   61664:	f800283a 	ret

00061668 <Read_file_system>:


File_system_status_t Read_file_system(volatile Disk_t* disk, File_system_list_t* list,Data_size_t size, Data_size_t* recv_size_r){
   61668:	defff504 	addi	sp,sp,-44
   6166c:	dd800715 	stw	r22,28(sp)
   61670:	dc400215 	stw	r17,8(sp)
   61674:	d9c00015 	stw	r7,0(sp)
   61678:	2823883a 	mov	r17,r5

	load_disk(disk, 0, KB_PACK_SIZE, 0);
   6167c:	000f883a 	mov	r7,zero
   61680:	000b883a 	mov	r5,zero


}


File_system_status_t Read_file_system(volatile Disk_t* disk, File_system_list_t* list,Data_size_t size, Data_size_t* recv_size_r){
   61684:	302d883a 	mov	r22,r6

	load_disk(disk, 0, KB_PACK_SIZE, 0);
   61688:	01800084 	movi	r6,2


}


File_system_status_t Read_file_system(volatile Disk_t* disk, File_system_list_t* list,Data_size_t size, Data_size_t* recv_size_r){
   6168c:	dfc00a15 	stw	ra,40(sp)
   61690:	dc800315 	stw	r18,12(sp)
   61694:	dc000115 	stw	r16,4(sp)
   61698:	2025883a 	mov	r18,r4
   6169c:	df000915 	stw	fp,36(sp)
   616a0:	ddc00815 	stw	r23,32(sp)
   616a4:	dd400615 	stw	r21,24(sp)
   616a8:	dd000515 	stw	r20,20(sp)
   616ac:	dcc00415 	stw	r19,16(sp)

	load_disk(disk, 0, KB_PACK_SIZE, 0);
   616b0:	00618c00 	call	618c0 <load_disk>

	if(wait_for_disk(disk) == DISK_LOAD_FAIL){
   616b4:	9009883a 	mov	r4,r18
   616b8:	006190c0 	call	6190c <wait_for_disk>
   616bc:	04000044 	movi	r16,1
   616c0:	14003226 	beq	r2,r16,6178c <Read_file_system+0x124>

		return FILE_SYSTEM_NO_DISK;
	}

	uint8_t* read = (uint8_t*) disk -> memories -> table;
   616c4:	90800417 	ldw	r2,16(r18)
   616c8:	14c00017 	ldw	r19,0(r2)

	if(Is_filesystem(read)){
   616cc:	9809883a 	mov	r4,r19
   616d0:	00614800 	call	61480 <Is_filesystem>
   616d4:	10002f26 	beq	r2,zero,61794 <Read_file_system+0x12c>

		if(isProperFilesystem(read)){
   616d8:	9809883a 	mov	r4,r19
   616dc:	00614380 	call	61438 <isProperFilesystem>
   616e0:	10002626 	beq	r2,zero,6177c <Read_file_system+0x114>
   616e4:	8821883a 	mov	r16,r17
   616e8:	8d000104 	addi	r20,r17,4
   616ec:	8d400204 	addi	r21,r17,8
   616f0:	9c800744 	addi	r18,r19,29
   616f4:	0023883a 	mov	r17,zero

			Data_bool_t finished = DATA_FALSE;

			while(!finished){

				if(END_OF_ADDRMAP(read[index])){
   616f8:	05c01144 	movi	r23,69
					}else{
						return FILE_SYSTEM_ERROR;
					}


				}else if(FILE(read[index])){
   616fc:	07001184 	movi	fp,70
   61700:	00001406 	br	61754 <Read_file_system+0xec>
   61704:	17001d1e 	bne	r2,fp,6177c <Read_file_system+0x114>

					index += 1;

					if(from64toBytes(&read[index],list[recv_size].name,MAX_FILE_NAME_SIZE_IN_64)){
   61708:	a9400017 	ldw	r5,0(r21)
   6170c:	01800304 	movi	r6,12
   61710:	91000044 	addi	r4,r18,1
   61714:	00641540 	call	64154 <from64toBytes>
   61718:	10001a1e 	bne	r2,zero,61784 <Read_file_system+0x11c>
						return DATA_FALSE;
					}

					index +=MAX_FILE_NAME_SIZE_IN_64;

					list[recv_size].addr = read_16_value(&read[index]);
   6171c:	91000344 	addi	r4,r18,13
   61720:	00642280 	call	64228 <read_16_value>
   61724:	10bfffcc 	andi	r2,r2,65535
   61728:	80800015 	stw	r2,0(r16)
					index += 2;
					list[recv_size].len = read_16_value(&read[index]);
   6172c:	910003c4 	addi	r4,r18,15
   61730:	00642280 	call	64228 <read_16_value>
   61734:	10bfffcc 	andi	r2,r2,65535
   61738:	a0800015 	stw	r2,0(r20)
					index += 2;

					recv_size ++;
   6173c:	8c400044 	addi	r17,r17,1
   61740:	94800444 	addi	r18,r18,17
   61744:	84000304 	addi	r16,r16,12
   61748:	a5000304 	addi	r20,r20,12
   6174c:	ad400304 	addi	r21,r21,12
					if(recv_size > size){
   61750:	b4400a36 	bltu	r22,r17,6177c <Read_file_system+0x114>

			Data_bool_t finished = DATA_FALSE;

			while(!finished){

				if(END_OF_ADDRMAP(read[index])){
   61754:	90800003 	ldbu	r2,0(r18)
   61758:	15ffea1e 	bne	r2,r23,61704 <__alt_data_end+0xfffed704>

					*recv_size_r = recv_size;
   6175c:	d8800017 	ldw	r2,0(sp)

					Simple_control_sum_t csum = Control_count_sum(read, PAGE_SIZE);
   61760:	01407fc4 	movi	r5,511
   61764:	9809883a 	mov	r4,r19

			while(!finished){

				if(END_OF_ADDRMAP(read[index])){

					*recv_size_r = recv_size;
   61768:	14400015 	stw	r17,0(r2)

					Simple_control_sum_t csum = Control_count_sum(read, PAGE_SIZE);
   6176c:	00640cc0 	call	640cc <Control_count_sum>

					if(csum == read[PAGE_SIZE]){
   61770:	98c07fc3 	ldbu	r3,511(r19)
   61774:	10803fcc 	andi	r2,r2,255
   61778:	10c00226 	beq	r2,r3,61784 <Read_file_system+0x11c>

						return FILE_SYSTEM_OK;
					}else{
						return FILE_SYSTEM_ERROR;
   6177c:	00800084 	movi	r2,2
   61780:	00000506 	br	61798 <Read_file_system+0x130>

					Simple_control_sum_t csum = Control_count_sum(read, PAGE_SIZE);

					if(csum == read[PAGE_SIZE]){

						return FILE_SYSTEM_OK;
   61784:	0005883a 	mov	r2,zero
   61788:	00000306 	br	61798 <Read_file_system+0x130>

	load_disk(disk, 0, KB_PACK_SIZE, 0);

	if(wait_for_disk(disk) == DISK_LOAD_FAIL){

		return FILE_SYSTEM_NO_DISK;
   6178c:	008000c4 	movi	r2,3
   61790:	00000106 	br	61798 <Read_file_system+0x130>

		return FILE_SYSTEM_ERROR;


	}else{
		return FILE_SYSTEM_NO_FS;
   61794:	8005883a 	mov	r2,r16
	}


}
   61798:	dfc00a17 	ldw	ra,40(sp)
   6179c:	df000917 	ldw	fp,36(sp)
   617a0:	ddc00817 	ldw	r23,32(sp)
   617a4:	dd800717 	ldw	r22,28(sp)
   617a8:	dd400617 	ldw	r21,24(sp)
   617ac:	dd000517 	ldw	r20,20(sp)
   617b0:	dcc00417 	ldw	r19,16(sp)
   617b4:	dc800317 	ldw	r18,12(sp)
   617b8:	dc400217 	ldw	r17,8(sp)
   617bc:	dc000117 	ldw	r16,4(sp)
   617c0:	dec00b04 	addi	sp,sp,44
   617c4:	f800283a 	ret

000617c8 <spi_isr>:

static void spi_isr (void * context){

	Disk_t* disk = (Disk_t*) context;

	disk ->flag = DISK_FLAG_UP;
   617c8:	00800044 	movi	r2,1
   617cc:	20800115 	stw	r2,4(r4)
	*SPI_IRQ_RET = 0;
   617d0:	008000b4 	movhi	r2,2
   617d4:	108c0004 	addi	r2,r2,12288
   617d8:	10000015 	stw	zero,0(r2)
   617dc:	f800283a 	ret

000617e0 <q_start_cards>:
}

SD_card_status_t q_start_cards(volatile Disk_t* disk, volatile Disk_sd_card_t* card){
   617e0:	defff704 	addi	sp,sp,-36
   617e4:	dcc00315 	stw	r19,12(sp)

		Timer_reset(disk -> timer);
		while(Timer_get_time(disk -> timer) < DELAY_BEETWEN_INIT);

		disk -> flag = DISK_FLAG_DOWN;
		*wsk = 1;
   617e8:	04c00044 	movi	r19,1

	disk ->flag = DISK_FLAG_UP;
	*SPI_IRQ_RET = 0;
}

SD_card_status_t q_start_cards(volatile Disk_t* disk, volatile Disk_sd_card_t* card){
   617ec:	ddc00715 	stw	r23,28(sp)
   617f0:	dd800615 	stw	r22,24(sp)
   617f4:	dd400515 	stw	r21,20(sp)
   617f8:	dd000415 	stw	r20,16(sp)
   617fc:	dc800215 	stw	r18,8(sp)
   61800:	dc000015 	stw	r16,0(sp)
   61804:	dfc00815 	stw	ra,32(sp)
   61808:	dc400115 	stw	r17,4(sp)
   6180c:	2025883a 	mov	r18,r4
   61810:	282f883a 	mov	r23,r5
	volatile uint32_t* offset = (uint32_t*) 0x23004;

	for(Tries_counter_t n=0 ; n<SPI_CARDS_NUMBER ; n++){
   61814:	0021883a 	mov	r16,zero
   61818:	05230054 	movui	r20,35841
		volatile uint32_t* wsk = offset;

		Timer_reset(disk -> timer);
		while(Timer_get_time(disk -> timer) < DELAY_BEETWEN_INIT);
   6181c:	054018c4 	movi	r21,99
   61820:	982d883a 	mov	r22,r19
	volatile uint32_t* offset = (uint32_t*) 0x23004;

	for(Tries_counter_t n=0 ; n<SPI_CARDS_NUMBER ; n++){
		volatile uint32_t* wsk = offset;

		Timer_reset(disk -> timer);
   61824:	91000017 	ldw	r4,0(r18)
   61828:	8523883a 	add	r17,r16,r20
   6182c:	8c63883a 	add	r17,r17,r17
   61830:	8c63883a 	add	r17,r17,r17
   61834:	00645c00 	call	645c0 <Timer_reset>
		while(Timer_get_time(disk -> timer) < DELAY_BEETWEN_INIT);
   61838:	91000017 	ldw	r4,0(r18)
   6183c:	00646600 	call	64660 <Timer_get_time>
   61840:	a8bffd2e 	bgeu	r21,r2,61838 <__alt_data_end+0xfffed838>

		disk -> flag = DISK_FLAG_DOWN;
   61844:	90000115 	stw	zero,4(r18)
		*wsk = 1;
   61848:	8cc00015 	stw	r19,0(r17)
		while(disk -> flag == DISK_FLAG_DOWN);
   6184c:	90800117 	ldw	r2,4(r18)
   61850:	103ffe26 	beq	r2,zero,6184c <__alt_data_end+0xfffed84c>


		if(*wsk == 1){
   61854:	88800017 	ldw	r2,0(r17)
   61858:	1580061e 	bne	r2,r22,61874 <q_start_cards+0x94>
   6185c:	84000044 	addi	r16,r16,1



			if(n == (SPI_CARDS_NUMBER - 1)){
   61860:	00800104 	movi	r2,4
   61864:	80bfef1e 	bne	r16,r2,61824 <__alt_data_end+0xfffed824>
		}


	}

	*card = DISK_SD_ALL_CARD;
   61868:	b8000015 	stw	zero,0(r23)
	return SD_CARD_OK;
   6186c:	0005883a 	mov	r2,zero
   61870:	00000806 	br	61894 <q_start_cards+0xb4>
				break;
			}
			offset +=1;
		}else{

			*card = n + 1;
   61874:	84003fcc 	andi	r16,r16,255
   61878:	84000044 	addi	r16,r16,1
   6187c:	bc000015 	stw	r16,0(r23)


			alt_printf("%x \n",*card);
   61880:	b9400017 	ldw	r5,0(r23)
   61884:	010001b4 	movhi	r4,6
   61888:	21139504 	addi	r4,r4,20052
   6188c:	0064ab00 	call	64ab0 <alt_printf>
			return SD_CARD_ERROR;
   61890:	00800044 	movi	r2,1

	}

	*card = DISK_SD_ALL_CARD;
	return SD_CARD_OK;
}
   61894:	dfc00817 	ldw	ra,32(sp)
   61898:	ddc00717 	ldw	r23,28(sp)
   6189c:	dd800617 	ldw	r22,24(sp)
   618a0:	dd400517 	ldw	r21,20(sp)
   618a4:	dd000417 	ldw	r20,16(sp)
   618a8:	dcc00317 	ldw	r19,12(sp)
   618ac:	dc800217 	ldw	r18,8(sp)
   618b0:	dc400117 	ldw	r17,4(sp)
   618b4:	dc000017 	ldw	r16,0(sp)
   618b8:	dec00904 	addi	sp,sp,36
   618bc:	f800283a 	ret

000618c0 <load_disk>:


void load_disk(volatile Disk_t* disk, Disk_sectors_t sector, Disk_sectors_t len, DMA_position_t start){

	DMA_memories_t* memories = (DMA_memories_t*) disk -> memories;
   618c0:	20800417 	ldw	r2,16(r4)
	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	*SPI_STARTADDR = (uint32_t) &table[start];
   618c4:	39cf883a 	add	r7,r7,r7
	*SPI_SDSECTOR = (sector << 16) | len;
   618c8:	280a943a 	slli	r5,r5,16
void load_disk(volatile Disk_t* disk, Disk_sectors_t sector, Disk_sectors_t len, DMA_position_t start){

	DMA_memories_t* memories = (DMA_memories_t*) disk -> memories;
	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	*SPI_STARTADDR = (uint32_t) &table[start];
   618cc:	10800017 	ldw	r2,0(r2)
	*SPI_SDSECTOR = (sector << 16) | len;
   618d0:	31bfffcc 	andi	r6,r6,65535
   618d4:	298ab03a 	or	r5,r5,r6
void load_disk(volatile Disk_t* disk, Disk_sectors_t sector, Disk_sectors_t len, DMA_position_t start){

	DMA_memories_t* memories = (DMA_memories_t*) disk -> memories;
	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	*SPI_STARTADDR = (uint32_t) &table[start];
   618d8:	11cf883a 	add	r7,r2,r7
   618dc:	008000b4 	movhi	r2,2
   618e0:	108c0504 	addi	r2,r2,12308
   618e4:	11c00015 	stw	r7,0(r2)
	*SPI_SDSECTOR = (sector << 16) | len;
   618e8:	008000b4 	movhi	r2,2
   618ec:	108c0604 	addi	r2,r2,12312
   618f0:	11400015 	stw	r5,0(r2)

	disk -> flag = DISK_FLAG_DOWN;
	*SPI_START = 1;
   618f4:	008000b4 	movhi	r2,2
	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	*SPI_STARTADDR = (uint32_t) &table[start];
	*SPI_SDSECTOR = (sector << 16) | len;

	disk -> flag = DISK_FLAG_DOWN;
   618f8:	20000115 	stw	zero,4(r4)
	*SPI_START = 1;
   618fc:	00c00044 	movi	r3,1
   61900:	108c0704 	addi	r2,r2,12316
   61904:	10c00015 	stw	r3,0(r2)
   61908:	f800283a 	ret

0006190c <wait_for_disk>:

}

Disk_status_load_t wait_for_disk(volatile Disk_t* disk){
	while(disk -> flag == DISK_FLAG_DOWN);
   6190c:	20800117 	ldw	r2,4(r4)
   61910:	103ffe26 	beq	r2,zero,6190c <__alt_data_end+0xfffed90c>

	if(*SPI_Q2_ERROR == SD_CARD_ERROR){
   61914:	008000b4 	movhi	r2,2
   61918:	108c0604 	addi	r2,r2,12312
   6191c:	10800017 	ldw	r2,0(r2)
		return DISK_LOAD_FAIL;
	}else{
		return DISK_LOAD_OK;
	}

}
   61920:	10800060 	cmpeqi	r2,r2,1
   61924:	f800283a 	ret

00061928 <check_disk>:

Disk_status_load_t check_disk(volatile Disk_t* disk){
	if(disk -> flag == DISK_FLAG_DOWN){
   61928:	20800117 	ldw	r2,4(r4)
   6192c:	10000526 	beq	r2,zero,61944 <check_disk+0x1c>
		return DISK_LOAD_IN_PROGRESS;
	}else{

		if(*SPI_Q2_ERROR == SD_CARD_ERROR){
   61930:	008000b4 	movhi	r2,2
   61934:	108c0604 	addi	r2,r2,12312
   61938:	10800017 	ldw	r2,0(r2)

}

Disk_status_load_t check_disk(volatile Disk_t* disk){
	if(disk -> flag == DISK_FLAG_DOWN){
		return DISK_LOAD_IN_PROGRESS;
   6193c:	10800060 	cmpeqi	r2,r2,1
   61940:	f800283a 	ret
   61944:	00800084 	movi	r2,2
		}else{
			return DISK_LOAD_OK;
		}
	}

}
   61948:	f800283a 	ret

0006194c <init_disk>:



Disk_status_t init_disk(volatile Disk_t* disk){
   6194c:	defffb04 	addi	sp,sp,-20

	alt_ic_isr_register(SPIQUICK_0_IRQ_INTERRUPT_CONTROLLER_ID, SPIQUICK_0_IRQ, spi_isr, (Disk_t*) disk, 0);
   61950:	018001b4 	movhi	r6,6

}



Disk_status_t init_disk(volatile Disk_t* disk){
   61954:	dc000215 	stw	r16,8(sp)

	alt_ic_isr_register(SPIQUICK_0_IRQ_INTERRUPT_CONTROLLER_ID, SPIQUICK_0_IRQ, spi_isr, (Disk_t*) disk, 0);
   61958:	200f883a 	mov	r7,r4

}



Disk_status_t init_disk(volatile Disk_t* disk){
   6195c:	2021883a 	mov	r16,r4

	alt_ic_isr_register(SPIQUICK_0_IRQ_INTERRUPT_CONTROLLER_ID, SPIQUICK_0_IRQ, spi_isr, (Disk_t*) disk, 0);
   61960:	d8000015 	stw	zero,0(sp)
   61964:	3185f204 	addi	r6,r6,6088
   61968:	01400084 	movi	r5,2
   6196c:	0009883a 	mov	r4,zero

}



Disk_status_t init_disk(volatile Disk_t* disk){
   61970:	dc400315 	stw	r17,12(sp)
   61974:	dfc00415 	stw	ra,16(sp)

	alt_ic_isr_register(SPIQUICK_0_IRQ_INTERRUPT_CONTROLLER_ID, SPIQUICK_0_IRQ, spi_isr, (Disk_t*) disk, 0);
   61978:	044000c4 	movi	r17,3
   6197c:	00648b00 	call	648b0 <alt_ic_isr_register>
	while(1){


		Disk_sd_card_t card = DISK_SD_ALL_CARD;

		if(q_start_cards(disk,&card) != SD_CARD_OK){
   61980:	d9400104 	addi	r5,sp,4
   61984:	8009883a 	mov	r4,r16
	Tries_counter_t tries = 0;

	while(1){


		Disk_sd_card_t card = DISK_SD_ALL_CARD;
   61988:	d8000115 	stw	zero,4(sp)

		if(q_start_cards(disk,&card) != SD_CARD_OK){
   6198c:	00617e00 	call	617e0 <q_start_cards>
   61990:	10000626 	beq	r2,zero,619ac <init_disk+0x60>
   61994:	88bfffc4 	addi	r2,r17,-1
   61998:	1023883a 	mov	r17,r2
			tries ++;

			if(tries == MAX_RETRIES_AMOUNT){
   6199c:	10803fcc 	andi	r2,r2,255
   619a0:	103ff71e 	bne	r2,zero,61980 <__alt_data_end+0xfffed980>

				disk -> status = DISK_STATUS_ERROR;
   619a4:	00800084 	movi	r2,2
   619a8:	00000106 	br	619b0 <init_disk+0x64>
	}




	disk -> status = DISK_STATUS_READY;
   619ac:	00800044 	movi	r2,1
   619b0:	80800215 	stw	r2,8(r16)
	return DISK_STATUS_READY;
}
   619b4:	dfc00417 	ldw	ra,16(sp)
   619b8:	dc400317 	ldw	r17,12(sp)
   619bc:	dc000217 	ldw	r16,8(sp)
   619c0:	dec00504 	addi	sp,sp,20
   619c4:	f800283a 	ret

000619c8 <app>:
	  BLE_console_t console;

	  uint8_t buffer_word[16];

	  console.word_time = 0;
	  console.buart = tree ->buart;
   619c8:	20800817 	ldw	r2,32(r4)
	MEET_STATE_WAIT_FOR_COMMAND = 1,
	MEET_STATE_WAIT_FOR_RETRY = 2
}Meet_state_t;


void app(volatile Device_tree_t* tree){
   619cc:	deffd004 	addi	sp,sp,-192
   619d0:	ddc02e15 	stw	r23,184(sp)
	  BLE_console_t console;

	  uint8_t buffer_word[16];

	  console.word_time = 0;
	  console.buart = tree ->buart;
   619d4:	d8800c15 	stw	r2,48(sp)
	  console.timer = tree -> timer;
   619d8:	20800717 	ldw	r2,28(r4)
	MEET_STATE_WAIT_FOR_COMMAND = 1,
	MEET_STATE_WAIT_FOR_RETRY = 2
}Meet_state_t;


void app(volatile Device_tree_t* tree){
   619dc:	dc002715 	stw	r16,156(sp)
   619e0:	dfc02f15 	stw	ra,188(sp)

	  uint8_t buffer_word[16];

	  console.word_time = 0;
	  console.buart = tree ->buart;
	  console.timer = tree -> timer;
   619e4:	d8800b15 	stw	r2,44(sp)

	  console.word = buffer_word;
   619e8:	d8802244 	addi	r2,sp,137
   619ec:	d8800e15 	stw	r2,56(sp)

	  uint8_t buffer_command[16];
	  console.buffer_out = buffer_command;
   619f0:	d8801e44 	addi	r2,sp,121
   619f4:	d8800d15 	stw	r2,52(sp)

	  tree ->speaker ->console = &console;
   619f8:	20800617 	ldw	r2,24(r4)
	MEET_STATE_WAIT_FOR_COMMAND = 1,
	MEET_STATE_WAIT_FOR_RETRY = 2
}Meet_state_t;


void app(volatile Device_tree_t* tree){
   619fc:	dd802d15 	stw	r22,180(sp)
   61a00:	dd402c15 	stw	r21,176(sp)
   61a04:	dd002b15 	stw	r20,172(sp)
   61a08:	dcc02a15 	stw	r19,168(sp)
   61a0c:	dc802915 	stw	r18,164(sp)
   61a10:	dc402815 	stw	r17,160(sp)

	  BLE_console_t console;

	  uint8_t buffer_word[16];

	  console.word_time = 0;
   61a14:	d8000f15 	stw	zero,60(sp)
   61a18:	d8001015 	stw	zero,64(sp)
	  console.word = buffer_word;

	  uint8_t buffer_command[16];
	  console.buffer_out = buffer_command;

	  tree ->speaker ->console = &console;
   61a1c:	ddc00b04 	addi	r23,sp,44
   61a20:	15c00015 	stw	r23,0(r2)
	  AI_transactions_counter_t transactions = 0;
	  AI_retires_t retry = 0;

	  Detector_t detector;

	  detector.comparer = tree -> comparer;
   61a24:	20800017 	ldw	r2,0(r4)
	  detector.timer = tree -> timer;
	  detector.gpio = tree -> distancer;
	  detector.buart = tree -> buart;
	  detector.console = &console;

	  if(app_selfcheck(tree,&detector)){
   61a28:	d80b883a 	mov	r5,sp
	MEET_STATE_WAIT_FOR_COMMAND = 1,
	MEET_STATE_WAIT_FOR_RETRY = 2
}Meet_state_t;


void app(volatile Device_tree_t* tree){
   61a2c:	2021883a 	mov	r16,r4
	  AI_transactions_counter_t transactions = 0;
	  AI_retires_t retry = 0;

	  Detector_t detector;

	  detector.comparer = tree -> comparer;
   61a30:	d8800415 	stw	r2,16(sp)
	  detector.disk = tree-> disk;
   61a34:	20800517 	ldw	r2,20(r4)
   61a38:	d8800515 	stw	r2,20(sp)
	  detector.memories = tree -> memories;
   61a3c:	20800117 	ldw	r2,4(r4)
   61a40:	d8800015 	stw	r2,0(sp)
	  detector.microphone = tree -> microphone;
   61a44:	20800417 	ldw	r2,16(r4)
   61a48:	d8800315 	stw	r2,12(sp)
	  detector.normalizer = tree -> normaliser;
   61a4c:	20800217 	ldw	r2,8(r4)
   61a50:	d8800215 	stw	r2,8(sp)
	  detector.spectrogramer = tree -> spectrogramer;
   61a54:	20800317 	ldw	r2,12(r4)
   61a58:	d8800115 	stw	r2,4(sp)
	  detector.timer = tree -> timer;
   61a5c:	20800717 	ldw	r2,28(r4)
   61a60:	d8800615 	stw	r2,24(sp)
	  detector.gpio = tree -> distancer;
   61a64:	20800917 	ldw	r2,36(r4)
	  detector.buart = tree -> buart;
	  detector.console = &console;
   61a68:	ddc00915 	stw	r23,36(sp)
	  detector.memories = tree -> memories;
	  detector.microphone = tree -> microphone;
	  detector.normalizer = tree -> normaliser;
	  detector.spectrogramer = tree -> spectrogramer;
	  detector.timer = tree -> timer;
	  detector.gpio = tree -> distancer;
   61a6c:	d8800815 	stw	r2,32(sp)
	  detector.buart = tree -> buart;
   61a70:	20800817 	ldw	r2,32(r4)
   61a74:	d8800715 	stw	r2,28(sp)
	  detector.console = &console;

	  if(app_selfcheck(tree,&detector)){
   61a78:	0063bcc0 	call	63bcc <app_selfcheck>
   61a7c:	1000e61e 	bne	r2,zero,61e18 <app+0x450>
		  return (void)0;
	  }

	  if(gpio_button_buffered_status(detector.gpio)){
   61a80:	d9000817 	ldw	r4,32(sp)
   61a84:	0062ecc0 	call	62ecc <gpio_button_buffered_status>
   61a88:	1000e31e 	bne	r2,zero,61e18 <app+0x450>
		  return (void)0;
	  }


	  init_BLE(tree -> buart);
   61a8c:	81000817 	ldw	r4,32(r16)
	  gpio_set_pin(tree -> distancer,GPIO_PIN_READY,GPIO_PIN_UP);

	  say(tree -> speaker,(uint8_t*)"Hello");

	  Recorder_flag_t flag = RECORDER_FLAG_WAIT_FOR_NAME;
	  Data_bool_t same_detected_word = DATA_FALSE;
   61a90:	002b883a 	mov	r21,zero
	  gpio_stop_flash(tree -> distancer);
	  gpio_set_pin(tree -> distancer,GPIO_PIN_READY,GPIO_PIN_UP);

	  say(tree -> speaker,(uint8_t*)"Hello");

	  Recorder_flag_t flag = RECORDER_FLAG_WAIT_FOR_NAME;
   61a94:	0027883a 	mov	r19,zero
	  if(gpio_button_buffered_status(detector.gpio)){
		  return (void)0;
	  }


	  init_BLE(tree -> buart);
   61a98:	00628440 	call	62844 <init_BLE>
	  uint8_t word[16];

	  uint8_t buffer[16];

	  str_clr(buffer,16);
   61a9c:	01400404 	movi	r5,16
   61aa0:	d9001644 	addi	r4,sp,89
   61aa4:	00642800 	call	64280 <str_clr>
	  str_clr(word,16);
   61aa8:	01400404 	movi	r5,16
   61aac:	d9001a44 	addi	r4,sp,105
   61ab0:	00642800 	call	64280 <str_clr>


	  gpio_stop_flash(tree -> distancer);
   61ab4:	81000917 	ldw	r4,36(r16)
	  console.buffer_out = buffer_command;

	  tree ->speaker ->console = &console;

	  AI_transactions_counter_t transactions = 0;
	  AI_retires_t retry = 0;
   61ab8:	0025883a 	mov	r18,zero
	  uint8_t buffer_command[16];
	  console.buffer_out = buffer_command;

	  tree ->speaker ->console = &console;

	  AI_transactions_counter_t transactions = 0;
   61abc:	002d883a 	mov	r22,zero

	  str_clr(buffer,16);
	  str_clr(word,16);


	  gpio_stop_flash(tree -> distancer);
   61ac0:	00630d40 	call	630d4 <gpio_stop_flash>
	  gpio_set_pin(tree -> distancer,GPIO_PIN_READY,GPIO_PIN_UP);
   61ac4:	81000917 	ldw	r4,36(r16)
   61ac8:	01800044 	movi	r6,1
   61acc:	000b883a 	mov	r5,zero
   61ad0:	0062fb00 	call	62fb0 <gpio_set_pin>

	  say(tree -> speaker,(uint8_t*)"Hello");
   61ad4:	81000617 	ldw	r4,24(r16)
   61ad8:	014001b4 	movhi	r5,6
   61adc:	29539704 	addi	r5,r5,20060
   61ae0:	0063ef00 	call	63ef0 <say>
}Meet_state_t;


void app(volatile Device_tree_t* tree){

	  Meet_state_t state = MEET_STATE_WAIT_FOR_NAME;
   61ae4:	0023883a 	mov	r17,zero
	  Data_bool_t same_detected_word = DATA_FALSE;


	  while(1){

		  if(tree -> disk -> status == DISK_STATUS_READY){
   61ae8:	00800044 	movi	r2,1
   61aec:	80c00517 	ldw	r3,20(r16)
   61af0:	18c00217 	ldw	r3,8(r3)
   61af4:	18bffd1e 	bne	r3,r2,61aec <__alt_data_end+0xfffedaec>

			  Detector_status_t decision_word;

			  if(state == MEET_STATE_WAIT_FOR_COMMAND){
   61af8:	8880041e 	bne	r17,r2,61b0c <app+0x144>
				  decision_word = get_word(&detector,WAIT_FOR_COMMAND,word,flag);
   61afc:	980f883a 	mov	r7,r19
   61b00:	d9801a44 	addi	r6,sp,105
   61b04:	0144e204 	movi	r5,5000
   61b08:	00000706 	br	61b28 <app+0x160>
			  }else if(state == MEET_STATE_WAIT_FOR_RETRY){
   61b0c:	00800084 	movi	r2,2

				  decision_word = get_word(&detector,WAIT_FOR_RETRY_3,word,flag);
   61b10:	980f883a 	mov	r7,r19
   61b14:	d9801a44 	addi	r6,sp,105

			  Detector_status_t decision_word;

			  if(state == MEET_STATE_WAIT_FOR_COMMAND){
				  decision_word = get_word(&detector,WAIT_FOR_COMMAND,word,flag);
			  }else if(state == MEET_STATE_WAIT_FOR_RETRY){
   61b18:	8880021e 	bne	r17,r2,61b24 <app+0x15c>

				  decision_word = get_word(&detector,WAIT_FOR_RETRY_3,word,flag);
   61b1c:	0142ee04 	movi	r5,3000
   61b20:	00000106 	br	61b28 <app+0x160>

			  }else{
				  decision_word = get_word(&detector,NO_LIMIT,word,flag);
   61b24:	017fffc4 	movi	r5,-1
   61b28:	d809883a 	mov	r4,sp
   61b2c:	00612240 	call	61224 <get_word>
			  }

			  if(record_selfcheck(tree ,decision_word) || decision_word == DETECTOR_STATUS_RESET){
   61b30:	100b883a 	mov	r5,r2
   61b34:	8009883a 	mov	r4,r16
			  }else if(state == MEET_STATE_WAIT_FOR_RETRY){

				  decision_word = get_word(&detector,WAIT_FOR_RETRY_3,word,flag);

			  }else{
				  decision_word = get_word(&detector,NO_LIMIT,word,flag);
   61b38:	1029883a 	mov	r20,r2
			  }

			  if(record_selfcheck(tree ,decision_word) || decision_word == DETECTOR_STATUS_RESET){
   61b3c:	0063cc80 	call	63cc8 <record_selfcheck>
   61b40:	1000b51e 	bne	r2,zero,61e18 <app+0x450>
   61b44:	00800304 	movi	r2,12
   61b48:	a080b326 	beq	r20,r2,61e18 <app+0x450>
				 break;
			  }

			  if(decision_word == DETECTOR_STATUS_COMMAND_CANCEL){
   61b4c:	008002c4 	movi	r2,11
   61b50:	a0807a26 	beq	r20,r2,61d3c <app+0x374>
				  state = MEET_STATE_WAIT_FOR_NAME;
				  retry = 0;

				  flag = RECORDER_FLAG_WAIT_FOR_NAME;
			  }else
			  if(decision_word == DETECTOR_STATUS_CHANGE_VOLUME){
   61b54:	00800284 	movi	r2,10
   61b58:	a080121e 	bne	r20,r2,61ba4 <app+0x1dc>

				  tree->speaker->volume --;
   61b5c:	80c00617 	ldw	r3,24(r16)
   61b60:	18800403 	ldbu	r2,16(r3)
   61b64:	10bfffc4 	addi	r2,r2,-1
   61b68:	18800405 	stb	r2,16(r3)

				  if(tree->speaker->volume == 4){
   61b6c:	80800617 	ldw	r2,24(r16)
   61b70:	00c00104 	movi	r3,4
   61b74:	10800403 	ldbu	r2,16(r2)
   61b78:	10803fcc 	andi	r2,r2,255
   61b7c:	10c0021e 	bne	r2,r3,61b88 <app+0x1c0>
					  tree->speaker->volume = 0;
   61b80:	80800617 	ldw	r2,24(r16)
   61b84:	10000405 	stb	zero,16(r2)
				  }

				  if(tree->speaker->volume == -1){
   61b88:	80800617 	ldw	r2,24(r16)
					  tree->speaker->volume = 15;
				  }
				  say(tree -> speaker,(uint8_t*)"Ok");
   61b8c:	014001b4 	movhi	r5,6
   61b90:	29539c04 	addi	r5,r5,20080

				  if(tree->speaker->volume == 4){
					  tree->speaker->volume = 0;
				  }

				  if(tree->speaker->volume == -1){
   61b94:	10800403 	ldbu	r2,16(r2)
					  tree->speaker->volume = 15;
				  }
				  say(tree -> speaker,(uint8_t*)"Ok");
   61b98:	81000617 	ldw	r4,24(r16)
   61b9c:	0063ef00 	call	63ef0 <say>
   61ba0:	003fd106 	br	61ae8 <__alt_data_end+0xfffedae8>

			  }else
			  if(decision_word == DETECTOR_STATUS_COMMAND_DIRECTLY){
   61ba4:	00800244 	movi	r2,9
   61ba8:	a0800826 	beq	r20,r2,61bcc <app+0x204>
				  state = MEET_STATE_WAIT_FOR_COMMAND;

				  str_clr(buffer,16);
				  same_detected_word = DATA_FALSE;
				  flag = RECORDER_FLAG_WAIT_FOR_COMMAND;
			  }else if(decision_word == DETECTOR_STATUS_OK){
   61bac:	a0004d1e 	bne	r20,zero,61ce4 <app+0x31c>

				  if(compare((uint8_t*)"sheila",word,16) && state == MEET_STATE_WAIT_FOR_NAME){
   61bb0:	010001b4 	movhi	r4,6
   61bb4:	01800404 	movi	r6,16
   61bb8:	d9401a44 	addi	r5,sp,105
   61bbc:	21139e04 	addi	r4,r4,20088
   61bc0:	00642d40 	call	642d4 <compare>
   61bc4:	10001226 	beq	r2,zero,61c10 <app+0x248>
   61bc8:	8800121e 	bne	r17,zero,61c14 <app+0x24c>
					  if(PARTITY(transactions))
						  say(tree -> speaker,(uint8_t*)"Hello");
   61bcc:	81000617 	ldw	r4,24(r16)
				  same_detected_word = DATA_FALSE;
				  flag = RECORDER_FLAG_WAIT_FOR_COMMAND;
			  }else if(decision_word == DETECTOR_STATUS_OK){

				  if(compare((uint8_t*)"sheila",word,16) && state == MEET_STATE_WAIT_FOR_NAME){
					  if(PARTITY(transactions))
   61bd0:	b080004c 	andi	r2,r22,1
   61bd4:	10000326 	beq	r2,zero,61be4 <app+0x21c>
						  say(tree -> speaker,(uint8_t*)"Hello");
   61bd8:	014001b4 	movhi	r5,6
   61bdc:	29539704 	addi	r5,r5,20060
   61be0:	00000206 	br	61bec <app+0x224>
					  else
						  say(tree -> speaker,(uint8_t*)"Yes");
   61be4:	014001b4 	movhi	r5,6
   61be8:	29539d04 	addi	r5,r5,20084
   61bec:	0063ef00 	call	63ef0 <say>
					  retry = 0;
					  state = MEET_STATE_WAIT_FOR_COMMAND;
					  flag = RECORDER_FLAG_WAIT_FOR_COMMAND;
					  same_detected_word = DATA_FALSE;

					  str_clr(buffer,16);
   61bf0:	01400404 	movi	r5,16
   61bf4:	d9001644 	addi	r4,sp,89
					  else
						  say(tree -> speaker,(uint8_t*)"Yes");

					  retry = 0;
					  state = MEET_STATE_WAIT_FOR_COMMAND;
					  flag = RECORDER_FLAG_WAIT_FOR_COMMAND;
   61bf8:	04c00044 	movi	r19,1
					  same_detected_word = DATA_FALSE;

					  str_clr(buffer,16);
   61bfc:	00642800 	call	64280 <str_clr>
						  say(tree -> speaker,(uint8_t*)"Yes");

					  retry = 0;
					  state = MEET_STATE_WAIT_FOR_COMMAND;
					  flag = RECORDER_FLAG_WAIT_FOR_COMMAND;
					  same_detected_word = DATA_FALSE;
   61c00:	002b883a 	mov	r21,zero
					  if(PARTITY(transactions))
						  say(tree -> speaker,(uint8_t*)"Hello");
					  else
						  say(tree -> speaker,(uint8_t*)"Yes");

					  retry = 0;
   61c04:	0025883a 	mov	r18,zero
					  state = MEET_STATE_WAIT_FOR_COMMAND;
   61c08:	9823883a 	mov	r17,r19
					  flag = RECORDER_FLAG_WAIT_FOR_COMMAND;
					  same_detected_word = DATA_FALSE;

					  str_clr(buffer,16);
   61c0c:	003fb606 	br	61ae8 <__alt_data_end+0xfffedae8>

				  }else if(state != MEET_STATE_WAIT_FOR_NAME){
   61c10:	883fb526 	beq	r17,zero,61ae8 <__alt_data_end+0xfffedae8>

					  uint8_t nbuffer[17];
					  nbuffer[0] = 's';
   61c14:	00801cc4 	movi	r2,115
					  str_cpy(word,&nbuffer[1],16);
   61c18:	01800404 	movi	r6,16
   61c1c:	d9401244 	addi	r5,sp,73
   61c20:	d9001a44 	addi	r4,sp,105

					  if(state == MEET_STATE_WAIT_FOR_RETRY){
   61c24:	05000084 	movi	r20,2
					  str_clr(buffer,16);

				  }else if(state != MEET_STATE_WAIT_FOR_NAME){

					  uint8_t nbuffer[17];
					  nbuffer[0] = 's';
   61c28:	d8801205 	stb	r2,72(sp)
					  str_cpy(word,&nbuffer[1],16);
   61c2c:	00642980 	call	64298 <str_cpy>

					  if(state == MEET_STATE_WAIT_FOR_RETRY){
   61c30:	8d00231e 	bne	r17,r20,61cc0 <app+0x2f8>
						  if(retry == MAX_RETRIES){
   61c34:	90803fcc 	andi	r2,r18,255
   61c38:	00c000c4 	movi	r3,3
   61c3c:	10c0081e 	bne	r2,r3,61c60 <app+0x298>
							  say(tree -> speaker,(uint8_t*)"Nodetect");
   61c40:	81000617 	ldw	r4,24(r16)
   61c44:	014001b4 	movhi	r5,6
   61c48:	29539904 	addi	r5,r5,20068
   61c4c:	0063ef00 	call	63ef0 <say>
							  state = MEET_STATE_WAIT_FOR_NAME;
							  flag = RECORDER_FLAG_WAIT_FOR_NAME;
   61c50:	0027883a 	mov	r19,zero
							  retry = 0;
   61c54:	0025883a 	mov	r18,zero
					  str_cpy(word,&nbuffer[1],16);

					  if(state == MEET_STATE_WAIT_FOR_RETRY){
						  if(retry == MAX_RETRIES){
							  say(tree -> speaker,(uint8_t*)"Nodetect");
							  state = MEET_STATE_WAIT_FOR_NAME;
   61c58:	0023883a 	mov	r17,zero
   61c5c:	00001c06 	br	61cd0 <app+0x308>
							  flag = RECORDER_FLAG_WAIT_FOR_NAME;
							  retry = 0;
						  }else{

							  if(compare((uint8_t*)word,(uint8_t*)buffer,16)){
   61c60:	01800404 	movi	r6,16
   61c64:	d9401644 	addi	r5,sp,89
   61c68:	d9001a44 	addi	r4,sp,105
   61c6c:	00642d40 	call	642d4 <compare>
   61c70:	10000926 	beq	r2,zero,61c98 <app+0x2d0>
								  str_clr(buffer,16);
   61c74:	01400404 	movi	r5,16
   61c78:	d9001644 	addi	r4,sp,89
   61c7c:	00642800 	call	64280 <str_clr>
								  	  state = MEET_STATE_WAIT_FOR_NAME;
								  	  retry = 0;

								  	  flag = RECORDER_FLAG_WAIT_FOR_NAME;
								  }else{
								  	  say(tree -> speaker,(uint8_t*)"Repeat");
   61c80:	81000617 	ldw	r4,24(r16)
   61c84:	014001b4 	movhi	r5,6
   61c88:	2953a004 	addi	r5,r5,20096
   61c8c:	0063ef00 	call	63ef0 <say>
								  }
								  same_detected_word = DATA_TRUE;
   61c90:	05400044 	movi	r21,1
   61c94:	00000806 	br	61cb8 <app+0x2f0>

							  }else{
								  same_detected_word = DATA_FALSE;
								  say(tree -> speaker,(uint8_t*)"Sorry");
   61c98:	81000617 	ldw	r4,24(r16)
   61c9c:	014001b4 	movhi	r5,6
   61ca0:	2953a204 	addi	r5,r5,20104
   61ca4:	0063ef00 	call	63ef0 <say>
								  say(tree -> speaker,(uint8_t*)nbuffer);
   61ca8:	81000617 	ldw	r4,24(r16)
   61cac:	d9401204 	addi	r5,sp,72

								  state = MEET_STATE_WAIT_FOR_RETRY;
								  same_detected_word = DATA_FALSE;
   61cb0:	002b883a 	mov	r21,zero
								  same_detected_word = DATA_TRUE;

							  }else{
								  same_detected_word = DATA_FALSE;
								  say(tree -> speaker,(uint8_t*)"Sorry");
								  say(tree -> speaker,(uint8_t*)nbuffer);
   61cb4:	0063ef00 	call	63ef0 <say>

								  state = MEET_STATE_WAIT_FOR_RETRY;
								  same_detected_word = DATA_FALSE;
							  }
							  retry ++;
   61cb8:	94800044 	addi	r18,r18,1
   61cbc:	00000406 	br	61cd0 <app+0x308>

							  state = MEET_STATE_WAIT_FOR_RETRY;
						  }
					  }else{
						  say(tree -> speaker,(uint8_t*)nbuffer);
   61cc0:	81000617 	ldw	r4,24(r16)
   61cc4:	d9401204 	addi	r5,sp,72

						  state = MEET_STATE_WAIT_FOR_RETRY;
   61cc8:	a023883a 	mov	r17,r20
							  retry ++;

							  state = MEET_STATE_WAIT_FOR_RETRY;
						  }
					  }else{
						  say(tree -> speaker,(uint8_t*)nbuffer);
   61ccc:	0063ef00 	call	63ef0 <say>

						  state = MEET_STATE_WAIT_FOR_RETRY;
					  }

					  str_cpy(word,buffer,16);
   61cd0:	01800404 	movi	r6,16
   61cd4:	d9401644 	addi	r5,sp,89
   61cd8:	d9001a44 	addi	r4,sp,105
   61cdc:	00642980 	call	64298 <str_cpy>
   61ce0:	003f8106 	br	61ae8 <__alt_data_end+0xfffedae8>
				  }


			  }else{

				  if(decision_word == DETECTOR_STATUS_CANT_DETECT && state != MEET_STATE_WAIT_FOR_NAME){
   61ce4:	00800084 	movi	r2,2
   61ce8:	a0801f1e 	bne	r20,r2,61d68 <app+0x3a0>
   61cec:	883f7e26 	beq	r17,zero,61ae8 <__alt_data_end+0xfffedae8>
					  str_clr(buffer,16);
   61cf0:	01400404 	movi	r5,16
   61cf4:	d9001644 	addi	r4,sp,89
   61cf8:	00642800 	call	64280 <str_clr>

					  if(state == MEET_STATE_WAIT_FOR_COMMAND){
   61cfc:	00800044 	movi	r2,1
   61d00:	88800b1e 	bne	r17,r2,61d30 <app+0x368>
						  say(tree -> speaker,(uint8_t*)"Repeat");
   61d04:	81000617 	ldw	r4,24(r16)
   61d08:	014001b4 	movhi	r5,6
   61d0c:	2953a004 	addi	r5,r5,20096
   61d10:	0063ef00 	call	63ef0 <say>
						  retry = 0;
						  state = MEET_STATE_WAIT_FOR_RETRY;
						  same_detected_word = DATA_FALSE;

						  str_clr(buffer,16);
   61d14:	01400404 	movi	r5,16
   61d18:	d9001644 	addi	r4,sp,89
   61d1c:	00642800 	call	64280 <str_clr>

					  if(state == MEET_STATE_WAIT_FOR_COMMAND){
						  say(tree -> speaker,(uint8_t*)"Repeat");
						  retry = 0;
						  state = MEET_STATE_WAIT_FOR_RETRY;
						  same_detected_word = DATA_FALSE;
   61d20:	002b883a 	mov	r21,zero
				  if(decision_word == DETECTOR_STATUS_CANT_DETECT && state != MEET_STATE_WAIT_FOR_NAME){
					  str_clr(buffer,16);

					  if(state == MEET_STATE_WAIT_FOR_COMMAND){
						  say(tree -> speaker,(uint8_t*)"Repeat");
						  retry = 0;
   61d24:	0025883a 	mov	r18,zero
						  state = MEET_STATE_WAIT_FOR_RETRY;
   61d28:	a023883a 	mov	r17,r20
   61d2c:	003f6e06 	br	61ae8 <__alt_data_end+0xfffedae8>
						  same_detected_word = DATA_FALSE;

						  str_clr(buffer,16);
					  }else{
						  if(retry == MAX_RETRIES){
   61d30:	90803fcc 	andi	r2,r18,255
   61d34:	00c000c4 	movi	r3,3
   61d38:	10c0051e 	bne	r2,r3,61d50 <app+0x388>
							  say(tree -> speaker,(uint8_t*)"Nodetect");
   61d3c:	81000617 	ldw	r4,24(r16)
   61d40:	014001b4 	movhi	r5,6
   61d44:	29539904 	addi	r5,r5,20068
   61d48:	0063ef00 	call	63ef0 <say>
   61d4c:	00002f06 	br	61e0c <app+0x444>
							  state = MEET_STATE_WAIT_FOR_NAME;
							  retry = 0;

							  flag = RECORDER_FLAG_WAIT_FOR_NAME;
						  }else{
							  say(tree -> speaker,(uint8_t*)"Repeat");
   61d50:	81000617 	ldw	r4,24(r16)
   61d54:	014001b4 	movhi	r5,6
   61d58:	2953a004 	addi	r5,r5,20096
   61d5c:	0063ef00 	call	63ef0 <say>
							  retry ++;
   61d60:	94800044 	addi	r18,r18,1
   61d64:	003f6006 	br	61ae8 <__alt_data_end+0xfffedae8>

						  }
					  }
				  }else if(decision_word == DETECTOR_STATUS_NO_FRAGMENT && state != MEET_STATE_WAIT_FOR_NAME){
   61d68:	008000c4 	movi	r2,3
   61d6c:	a0bf5e1e 	bne	r20,r2,61ae8 <__alt_data_end+0xfffedae8>
   61d70:	883f5d26 	beq	r17,zero,61ae8 <__alt_data_end+0xfffedae8>

						  if(!is_empty_str(buffer,16) && !same_detected_word){
   61d74:	01400404 	movi	r5,16
   61d78:	d9001644 	addi	r4,sp,89
   61d7c:	006425c0 	call	6425c <is_empty_str>
   61d80:	10001d1e 	bne	r2,zero,61df8 <app+0x430>
   61d84:	a8001c1e 	bne	r21,zero,61df8 <app+0x430>

							  for(int n=0;n<19;n++){
								  if(buffer[n] == 0){
   61d88:	d9001644 	addi	r4,sp,89
   61d8c:	2087883a 	add	r3,r4,r2
   61d90:	19000003 	ldbu	r4,0(r3)
   61d94:	2000161e 	bne	r4,zero,61df0 <app+0x428>
									  buffer[n] = '\r';
   61d98:	01000344 	movi	r4,13
   61d9c:	19000005 	stb	r4,0(r3)
									  buffer[n+1] = '\n';
   61da0:	d8c01684 	addi	r3,sp,90
   61da4:	1885883a 	add	r2,r3,r2
									  break;
								  }
							  }

							  wait_for_connection(tree);
   61da8:	8009883a 	mov	r4,r16
						  if(!is_empty_str(buffer,16) && !same_detected_word){

							  for(int n=0;n<19;n++){
								  if(buffer[n] == 0){
									  buffer[n] = '\r';
									  buffer[n+1] = '\n';
   61dac:	00c00284 	movi	r3,10
   61db0:	10c00005 	stb	r3,0(r2)
									  break;
								  }
							  }

							  wait_for_connection(tree);
   61db4:	0062d600 	call	62d60 <wait_for_connection>
							  BLE_send_data(tree -> buart,buffer);
   61db8:	81000817 	ldw	r4,32(r16)
   61dbc:	d9401644 	addi	r5,sp,89
   61dc0:	00626300 	call	62630 <BLE_send_data>
							  BLE_add_word(&console,buffer);
   61dc4:	d9401644 	addi	r5,sp,89
   61dc8:	b809883a 	mov	r4,r23
   61dcc:	00629a40 	call	629a4 <BLE_add_word>

							  say(tree -> speaker,(uint8_t*)"Ok");
   61dd0:	81000617 	ldw	r4,24(r16)
   61dd4:	014001b4 	movhi	r5,6
   61dd8:	29539c04 	addi	r5,r5,20080
   61ddc:	0063ef00 	call	63ef0 <say>

							  str_clr(buffer,16);
   61de0:	01400404 	movi	r5,16
   61de4:	d9001644 	addi	r4,sp,89
   61de8:	00642800 	call	64280 <str_clr>

							  flag = RECORDER_FLAG_WAIT_FOR_NAME;
   61dec:	00000606 	br	61e08 <app+0x440>
					  }
				  }else if(decision_word == DETECTOR_STATUS_NO_FRAGMENT && state != MEET_STATE_WAIT_FOR_NAME){

						  if(!is_empty_str(buffer,16) && !same_detected_word){

							  for(int n=0;n<19;n++){
   61df0:	10800044 	addi	r2,r2,1
   61df4:	003fe406 	br	61d88 <__alt_data_end+0xfffedd88>
							  str_clr(buffer,16);

							  flag = RECORDER_FLAG_WAIT_FOR_NAME;

						  }else{
							  say(tree -> speaker,(uint8_t*)"Nodetect");
   61df8:	81000617 	ldw	r4,24(r16)
   61dfc:	014001b4 	movhi	r5,6
   61e00:	29539904 	addi	r5,r5,20068
   61e04:	0063ef00 	call	63ef0 <say>
							  flag = RECORDER_FLAG_WAIT_FOR_NAME;
						  }



						  transactions ++;
   61e08:	b5800044 	addi	r22,r22,1
   61e0c:	0027883a 	mov	r19,zero
						  state = MEET_STATE_WAIT_FOR_NAME;
						  retry = 0;
   61e10:	0025883a 	mov	r18,zero
   61e14:	003f3306 	br	61ae4 <__alt_data_end+0xfffedae4>
		  }

	  }


}
   61e18:	dfc02f17 	ldw	ra,188(sp)
   61e1c:	ddc02e17 	ldw	r23,184(sp)
   61e20:	dd802d17 	ldw	r22,180(sp)
   61e24:	dd402c17 	ldw	r21,176(sp)
   61e28:	dd002b17 	ldw	r20,172(sp)
   61e2c:	dcc02a17 	ldw	r19,168(sp)
   61e30:	dc802917 	ldw	r18,164(sp)
   61e34:	dc402817 	ldw	r17,160(sp)
   61e38:	dc002717 	ldw	r16,156(sp)
   61e3c:	dec03004 	addi	sp,sp,192
   61e40:	f800283a 	ret

00061e44 <mic_isr>:
#define MAX_SAMPLES_IN_ONE_ISR				     		4
typedef uint8_t Microphone_minus_t;

Queue_t queue;

static void mic_isr(void* context){
   61e44:	defff904 	addi	sp,sp,-28
   61e48:	dd400515 	stw	r21,20(sp)
   61e4c:	dd000415 	stw	r20,16(sp)
   61e50:	dc800215 	stw	r18,8(sp)
			if((*MIC_STATUS & 0x2) == 0){
				microphone -> flag = MICROPHONE_FLAG_UP;

				put_on_queue(microphone ->mic_queue,*MIC_VALUE);
			}else{
				*MIC_ENABLE = 0;
   61e54:	050000f4 	movhi	r20,3

	Microphone_t* microphone = (Microphone_t*) context;

	for(Queue_pos_t n = 0 ; n < MAX_SAMPLES_IN_ONE_ISR ; n ++){

		if((*MIC_STATUS & 0x1) == 0){
   61e58:	048000f4 	movhi	r18,3
			if((*MIC_STATUS & 0x2) == 0){
				microphone -> flag = MICROPHONE_FLAG_UP;

				put_on_queue(microphone ->mic_queue,*MIC_VALUE);
   61e5c:	054000f4 	movhi	r21,3
#define MAX_SAMPLES_IN_ONE_ISR				     		4
typedef uint8_t Microphone_minus_t;

Queue_t queue;

static void mic_isr(void* context){
   61e60:	dcc00315 	stw	r19,12(sp)
   61e64:	dc400115 	stw	r17,4(sp)
   61e68:	dc000015 	stw	r16,0(sp)
   61e6c:	dfc00615 	stw	ra,24(sp)
   61e70:	2023883a 	mov	r17,r4
   61e74:	04000104 	movi	r16,4

	Microphone_t* microphone = (Microphone_t*) context;

	for(Queue_pos_t n = 0 ; n < MAX_SAMPLES_IN_ONE_ISR ; n ++){

		if((*MIC_STATUS & 0x1) == 0){
   61e78:	94a40304 	addi	r18,r18,-28660
   61e7c:	04c00044 	movi	r19,1
			if((*MIC_STATUS & 0x2) == 0){
				microphone -> flag = MICROPHONE_FLAG_UP;

				put_on_queue(microphone ->mic_queue,*MIC_VALUE);
			}else{
				*MIC_ENABLE = 0;
   61e80:	a5240104 	addi	r20,r20,-28668

		if((*MIC_STATUS & 0x1) == 0){
			if((*MIC_STATUS & 0x2) == 0){
				microphone -> flag = MICROPHONE_FLAG_UP;

				put_on_queue(microphone ->mic_queue,*MIC_VALUE);
   61e84:	ad640204 	addi	r21,r21,-28664

	Microphone_t* microphone = (Microphone_t*) context;

	for(Queue_pos_t n = 0 ; n < MAX_SAMPLES_IN_ONE_ISR ; n ++){

		if((*MIC_STATUS & 0x1) == 0){
   61e88:	90800017 	ldw	r2,0(r18)
   61e8c:	1080004c 	andi	r2,r2,1
   61e90:	10000c26 	beq	r2,zero,61ec4 <mic_isr+0x80>
			break;
		}

	}

	*MIC_IRQ_RET = 0;
   61e94:	008000f4 	movhi	r2,3
   61e98:	10a40004 	addi	r2,r2,-28672
   61e9c:	10000015 	stw	zero,0(r2)
}
   61ea0:	dfc00617 	ldw	ra,24(sp)
   61ea4:	dd400517 	ldw	r21,20(sp)
   61ea8:	dd000417 	ldw	r20,16(sp)
   61eac:	dcc00317 	ldw	r19,12(sp)
   61eb0:	dc800217 	ldw	r18,8(sp)
   61eb4:	dc400117 	ldw	r17,4(sp)
   61eb8:	dc000017 	ldw	r16,0(sp)
   61ebc:	dec00704 	addi	sp,sp,28
   61ec0:	f800283a 	ret
	Microphone_t* microphone = (Microphone_t*) context;

	for(Queue_pos_t n = 0 ; n < MAX_SAMPLES_IN_ONE_ISR ; n ++){

		if((*MIC_STATUS & 0x1) == 0){
			if((*MIC_STATUS & 0x2) == 0){
   61ec4:	90800017 	ldw	r2,0(r18)
   61ec8:	1080008c 	andi	r2,r2,2
   61ecc:	1000051e 	bne	r2,zero,61ee4 <mic_isr+0xa0>
				microphone -> flag = MICROPHONE_FLAG_UP;
   61ed0:	8cc00015 	stw	r19,0(r17)

				put_on_queue(microphone ->mic_queue,*MIC_VALUE);
   61ed4:	a9400017 	ldw	r5,0(r21)
   61ed8:	89000317 	ldw	r4,12(r17)
   61edc:	00620740 	call	62074 <put_on_queue>
   61ee0:	00000206 	br	61eec <mic_isr+0xa8>
			}else{
				*MIC_ENABLE = 0;
   61ee4:	a0000015 	stw	zero,0(r20)
				*MIC_ENABLE = 1;
   61ee8:	a4c00015 	stw	r19,0(r20)
   61eec:	80bfffc4 	addi	r2,r16,-1
   61ef0:	1021883a 	mov	r16,r2

static void mic_isr(void* context){

	Microphone_t* microphone = (Microphone_t*) context;

	for(Queue_pos_t n = 0 ; n < MAX_SAMPLES_IN_ONE_ISR ; n ++){
   61ef4:	10bfffcc 	andi	r2,r2,65535
   61ef8:	103fe31e 	bne	r2,zero,61e88 <__alt_data_end+0xfffede88>
   61efc:	003fe506 	br	61e94 <__alt_data_end+0xfffede94>

00061f00 <value_reducer>:
	*MIC_IRQ_RET = 0;
}

Microphone_sound_t value_reducer(Microphone_huge_sound_t hsound){

	Microphone_minus_t max_value= (hsound >> 20)&0xF;
   61f00:	2004d53a 	srli	r2,r4,20

	Microphone_sound_t value = 0;

	if(max_value == 0xF){
   61f04:	00c003c4 	movi	r3,15
   61f08:	108003cc 	andi	r2,r2,15
   61f0c:	10c0021e 	bne	r2,r3,61f18 <value_reducer+0x18>
		// minus
		value = (hsound >> SOUND_SHIFT);
   61f10:	2004d13a 	srli	r2,r4,4
   61f14:	f800283a 	ret
	}else if(max_value == POSITIVE_MAX_VALUE){
   61f18:	00c001c4 	movi	r3,7
   61f1c:	10c00426 	beq	r2,r3,61f30 <value_reducer+0x30>
		// overflow
		value = MAX_VALUE;
	}else if(max_value == NEGATIVE_MAX_VALUE){
   61f20:	00c00204 	movi	r3,8
   61f24:	10fffa1e 	bne	r2,r3,61f10 <__alt_data_end+0xfffedf10>
		// overflow
		value = MIN_VALUE;
   61f28:	00a00004 	movi	r2,-32768
   61f2c:	f800283a 	ret
	if(max_value == 0xF){
		// minus
		value = (hsound >> SOUND_SHIFT);
	}else if(max_value == POSITIVE_MAX_VALUE){
		// overflow
		value = MAX_VALUE;
   61f30:	009fffc4 	movi	r2,32767
	}else{
		value = (hsound >> SOUND_SHIFT);
	}

	return value;
}
   61f34:	f800283a 	ret

00061f38 <MIC_getSample>:

Microphone_status_t MIC_getSample(volatile Microphone_t* microphone, Microphone_sound_t* sound){
   61f38:	defffb04 	addi	sp,sp,-20
   61f3c:	dfc00415 	stw	ra,16(sp)
   61f40:	dc800315 	stw	r18,12(sp)
   61f44:	dc400215 	stw	r17,8(sp)
   61f48:	dc000115 	stw	r16,4(sp)
   61f4c:	2023883a 	mov	r17,r4

	microphone -> flag = MICROPHONE_FLAG_DOWN;
   61f50:	20000015 	stw	zero,0(r4)
	}

	return value;
}

Microphone_status_t MIC_getSample(volatile Microphone_t* microphone, Microphone_sound_t* sound){
   61f54:	2825883a 	mov	r18,r5

	microphone -> flag = MICROPHONE_FLAG_DOWN;
	Microphone_huge_sound_t hsound =0;

	alt_ic_irq_disable(MICROPHONE_0_IRQ_INTERRUPT_CONTROLLER_ID,MICROPHONE_0_IRQ);
   61f58:	0009883a 	mov	r4,zero
   61f5c:	01400204 	movi	r5,8
}

Microphone_status_t MIC_getSample(volatile Microphone_t* microphone, Microphone_sound_t* sound){

	microphone -> flag = MICROPHONE_FLAG_DOWN;
	Microphone_huge_sound_t hsound =0;
   61f60:	d8000015 	stw	zero,0(sp)

	alt_ic_irq_disable(MICROPHONE_0_IRQ_INTERRUPT_CONTROLLER_ID,MICROPHONE_0_IRQ);
   61f64:	00648ec0 	call	648ec <alt_ic_irq_disable>

	Queue_operation_status_t status = pick_from_queue(microphone ->mic_queue,&hsound);
   61f68:	89000317 	ldw	r4,12(r17)
   61f6c:	d80b883a 	mov	r5,sp
   61f70:	00620d40 	call	620d4 <pick_from_queue>

	if(status == QUEUE_OPERATION_EMPTY_QUEUE){
   61f74:	00c00084 	movi	r3,2
   61f78:	10c0051e 	bne	r2,r3,61f90 <MIC_getSample+0x58>
		alt_ic_irq_enable(MICROPHONE_0_IRQ_INTERRUPT_CONTROLLER_ID,MICROPHONE_0_IRQ);
   61f7c:	01400204 	movi	r5,8
   61f80:	0009883a 	mov	r4,zero
   61f84:	00648b40 	call	648b4 <alt_ic_irq_enable>
		return MICROPHONE_STATUS_EMPTY;
   61f88:	0005883a 	mov	r2,zero
   61f8c:	00001806 	br	61ff0 <MIC_getSample+0xb8>
	}else if(status == QUEUE_OPERATION_FULL_QUEUE){
   61f90:	04000044 	movi	r16,1
		alt_ic_irq_enable(MICROPHONE_0_IRQ_INTERRUPT_CONTROLLER_ID,MICROPHONE_0_IRQ);
   61f94:	01400204 	movi	r5,8
   61f98:	0009883a 	mov	r4,zero
	Queue_operation_status_t status = pick_from_queue(microphone ->mic_queue,&hsound);

	if(status == QUEUE_OPERATION_EMPTY_QUEUE){
		alt_ic_irq_enable(MICROPHONE_0_IRQ_INTERRUPT_CONTROLLER_ID,MICROPHONE_0_IRQ);
		return MICROPHONE_STATUS_EMPTY;
	}else if(status == QUEUE_OPERATION_FULL_QUEUE){
   61f9c:	1400031e 	bne	r2,r16,61fac <MIC_getSample+0x74>
		alt_ic_irq_enable(MICROPHONE_0_IRQ_INTERRUPT_CONTROLLER_ID,MICROPHONE_0_IRQ);
   61fa0:	00648b40 	call	648b4 <alt_ic_irq_enable>
		return MICROPHONE_STATUS_FULL;
   61fa4:	008000c4 	movi	r2,3
   61fa8:	00001106 	br	61ff0 <MIC_getSample+0xb8>
	}

	alt_ic_irq_enable(MICROPHONE_0_IRQ_INTERRUPT_CONTROLLER_ID,MICROPHONE_0_IRQ);
   61fac:	00648b40 	call	648b4 <alt_ic_irq_enable>


	Microphone_sound_t value = value_reducer(hsound);
   61fb0:	d9000017 	ldw	r4,0(sp)
   61fb4:	0061f000 	call	61f00 <value_reducer>
	*sound = value & BIT_16_MASK;
   61fb8:	9080000d 	sth	r2,0(r18)

	if(*sound == POTENTIONAL_ERROR_SOUND){
   61fbc:	00ffffd4 	movui	r3,65535
   61fc0:	10bfffcc 	andi	r2,r2,65535
   61fc4:	10c0081e 	bne	r2,r3,61fe8 <MIC_getSample+0xb0>
		microphone -> counter ++;
   61fc8:	88800417 	ldw	r2,16(r17)
   61fcc:	10800044 	addi	r2,r2,1
   61fd0:	88800415 	stw	r2,16(r17)

		if(microphone -> counter >= MAX_POT_ERRORS){
   61fd4:	88c00417 	ldw	r3,16(r17)
   61fd8:	008f9fc4 	movi	r2,15999
		}
	}else{
		microphone -> counter =0;
	}

	return MICROPHONE_STATUS_READY;
   61fdc:	10c5803a 	cmpltu	r2,r2,r3
   61fe0:	10800044 	addi	r2,r2,1
   61fe4:	00000206 	br	61ff0 <MIC_getSample+0xb8>

		if(microphone -> counter >= MAX_POT_ERRORS){
			return MICROPHONE_STATUS_ERROR;
		}
	}else{
		microphone -> counter =0;
   61fe8:	88000415 	stw	zero,16(r17)
	}

	return MICROPHONE_STATUS_READY;
   61fec:	8005883a 	mov	r2,r16
}
   61ff0:	dfc00417 	ldw	ra,16(sp)
   61ff4:	dc800317 	ldw	r18,12(sp)
   61ff8:	dc400217 	ldw	r17,8(sp)
   61ffc:	dc000117 	ldw	r16,4(sp)
   62000:	dec00504 	addi	sp,sp,20
   62004:	f800283a 	ret

00062008 <MIC_start>:

void MIC_start(){
	 *MIC_ENABLE = 1;
   62008:	008000f4 	movhi	r2,3
   6200c:	00c00044 	movi	r3,1
   62010:	10a40104 	addi	r2,r2,-28668
   62014:	10c00015 	stw	r3,0(r2)
   62018:	f800283a 	ret

0006201c <MIC_stop>:
}

void MIC_stop(){
	 *MIC_ENABLE = 0;
   6201c:	008000f4 	movhi	r2,3
   62020:	10a40104 	addi	r2,r2,-28668
   62024:	10000015 	stw	zero,0(r2)
   62028:	f800283a 	ret

0006202c <MIC_init>:
}

void MIC_init(volatile Microphone_t* microphone){
   6202c:	defffd04 	addi	sp,sp,-12
   62030:	dfc00215 	stw	ra,8(sp)
   62034:	dc000115 	stw	r16,4(sp)

	microphone ->counter = 0;
   62038:	20000415 	stw	zero,16(r4)

void MIC_stop(){
	 *MIC_ENABLE = 0;
}

void MIC_init(volatile Microphone_t* microphone){
   6203c:	2021883a 	mov	r16,r4

	microphone ->counter = 0;

	queue_init(microphone ->mic_queue);
   62040:	21000317 	ldw	r4,12(r4)
   62044:	00621400 	call	62140 <queue_init>

	  alt_ic_isr_register(MICROPHONE_0_IRQ_INTERRUPT_CONTROLLER_ID,MICROPHONE_0_IRQ,
   62048:	018001b4 	movhi	r6,6
   6204c:	d8000015 	stw	zero,0(sp)
   62050:	800f883a 	mov	r7,r16
   62054:	31879104 	addi	r6,r6,7748
   62058:	01400204 	movi	r5,8
   6205c:	0009883a 	mov	r4,zero
   62060:	00648b00 	call	648b0 <alt_ic_isr_register>
			  mic_isr,(Microphone_t*) microphone,0);
}
   62064:	dfc00217 	ldw	ra,8(sp)
   62068:	dc000117 	ldw	r16,4(sp)
   6206c:	dec00304 	addi	sp,sp,12
   62070:	f800283a 	ret

00062074 <put_on_queue>:
#include "microphone_types.h"
#include "queue_types.h"


Queue_operation_status_t put_on_queue(Queue_t* queue, Microphone_huge_sound_t value){
	if(queue -> size_fifo < STANDARD_QUEUE_SIZE){
   62074:	2180020b 	ldhu	r6,8(r4)
   62078:	00c003c4 	movi	r3,15
   6207c:	30bfffcc 	andi	r2,r6,65535
   62080:	18801236 	bltu	r3,r2,620cc <put_on_queue+0x58>

		queue -> fifo_sound[queue -> write_ptr] = value;
   62084:	20c0018b 	ldhu	r3,6(r4)
   62088:	21c00017 	ldw	r7,0(r4)
   6208c:	18bfffcc 	andi	r2,r3,65535
   62090:	1085883a 	add	r2,r2,r2
   62094:	1085883a 	add	r2,r2,r2
   62098:	3885883a 	add	r2,r7,r2
   6209c:	11400015 	stw	r5,0(r2)

		queue -> write_ptr ++;
   620a0:	18800044 	addi	r2,r3,1
		if(queue -> write_ptr == STANDARD_QUEUE_SIZE) {
   620a4:	117fffcc 	andi	r5,r2,65535
   620a8:	00c00404 	movi	r3,16
   620ac:	28c00226 	beq	r5,r3,620b8 <put_on_queue+0x44>
Queue_operation_status_t put_on_queue(Queue_t* queue, Microphone_huge_sound_t value){
	if(queue -> size_fifo < STANDARD_QUEUE_SIZE){

		queue -> fifo_sound[queue -> write_ptr] = value;

		queue -> write_ptr ++;
   620b0:	2080018d 	sth	r2,6(r4)
   620b4:	00000106 	br	620bc <put_on_queue+0x48>
		if(queue -> write_ptr == STANDARD_QUEUE_SIZE) {
			queue -> write_ptr = 0;
   620b8:	2000018d 	sth	zero,6(r4)
		}

		queue -> size_fifo ++;
   620bc:	31800044 	addi	r6,r6,1
   620c0:	2180020d 	sth	r6,8(r4)
		return QUEUE_OPERATION_OK;
   620c4:	0005883a 	mov	r2,zero
   620c8:	f800283a 	ret
	}else{
		return QUEUE_OPERATION_FULL_QUEUE;
   620cc:	00800044 	movi	r2,1
	}
}
   620d0:	f800283a 	ret

000620d4 <pick_from_queue>:

Queue_operation_status_t pick_from_queue(Queue_t* queue, Microphone_huge_sound_t* value){

	if(queue -> size_fifo > 0){
   620d4:	2180020b 	ldhu	r6,8(r4)
   620d8:	30bfffcc 	andi	r2,r6,65535
   620dc:	10001426 	beq	r2,zero,62130 <pick_from_queue+0x5c>

		if(queue -> size_fifo > STANDARD_QUEUE_SIZE){
   620e0:	01c00404 	movi	r7,16
   620e4:	38801436 	bltu	r7,r2,62138 <pick_from_queue+0x64>
			return QUEUE_OPERATION_FULL_QUEUE;
		}

		*value = queue -> fifo_sound[queue -> read_ptr];
   620e8:	20c0010b 	ldhu	r3,4(r4)
   620ec:	22000017 	ldw	r8,0(r4)
   620f0:	18bfffcc 	andi	r2,r3,65535
   620f4:	1085883a 	add	r2,r2,r2
   620f8:	1085883a 	add	r2,r2,r2
   620fc:	4085883a 	add	r2,r8,r2
   62100:	10800017 	ldw	r2,0(r2)
   62104:	28800015 	stw	r2,0(r5)

		queue -> read_ptr ++;
   62108:	18800044 	addi	r2,r3,1
		if(queue -> read_ptr == STANDARD_QUEUE_SIZE) {
   6210c:	10ffffcc 	andi	r3,r2,65535
   62110:	19c00226 	beq	r3,r7,6211c <pick_from_queue+0x48>
			return QUEUE_OPERATION_FULL_QUEUE;
		}

		*value = queue -> fifo_sound[queue -> read_ptr];

		queue -> read_ptr ++;
   62114:	2080010d 	sth	r2,4(r4)
   62118:	00000106 	br	62120 <pick_from_queue+0x4c>
		if(queue -> read_ptr == STANDARD_QUEUE_SIZE) {
			queue -> read_ptr = 0;
   6211c:	2000010d 	sth	zero,4(r4)
		}

		queue -> size_fifo --;
   62120:	31bfffc4 	addi	r6,r6,-1
   62124:	2180020d 	sth	r6,8(r4)

		return QUEUE_OPERATION_OK;
   62128:	0005883a 	mov	r2,zero
   6212c:	f800283a 	ret
	}else{
		return QUEUE_OPERATION_EMPTY_QUEUE;
   62130:	00800084 	movi	r2,2
   62134:	f800283a 	ret
Queue_operation_status_t pick_from_queue(Queue_t* queue, Microphone_huge_sound_t* value){

	if(queue -> size_fifo > 0){

		if(queue -> size_fifo > STANDARD_QUEUE_SIZE){
			return QUEUE_OPERATION_FULL_QUEUE;
   62138:	00800044 	movi	r2,1

		return QUEUE_OPERATION_OK;
	}else{
		return QUEUE_OPERATION_EMPTY_QUEUE;
	}
}
   6213c:	f800283a 	ret

00062140 <queue_init>:
	queue -> read_ptr = 0;

	queue -> size_fifo = 0;

	for(Queue_pos_t n = 0 ; n < STANDARD_QUEUE_SIZE ; n++){
		queue ->fifo_sound[n] = 0;
   62140:	20800017 	ldw	r2,0(r4)
		return QUEUE_OPERATION_EMPTY_QUEUE;
	}
}

void queue_init(Queue_t* queue){
	queue -> write_ptr = 0;
   62144:	2000018d 	sth	zero,6(r4)
	queue -> read_ptr = 0;
   62148:	2000010d 	sth	zero,4(r4)

	queue -> size_fifo = 0;
   6214c:	2000020d 	sth	zero,8(r4)
   62150:	10c01004 	addi	r3,r2,64

	for(Queue_pos_t n = 0 ; n < STANDARD_QUEUE_SIZE ; n++){
		queue ->fifo_sound[n] = 0;
   62154:	10000015 	stw	zero,0(r2)
   62158:	10800104 	addi	r2,r2,4
	queue -> write_ptr = 0;
	queue -> read_ptr = 0;

	queue -> size_fifo = 0;

	for(Queue_pos_t n = 0 ; n < STANDARD_QUEUE_SIZE ; n++){
   6215c:	10fffd1e 	bne	r2,r3,62154 <__alt_data_end+0xfffee154>
		queue ->fifo_sound[n] = 0;
	}
}
   62160:	f800283a 	ret

00062164 <Recorder_record>:
typedef uint32_t Distance_tries_counter_t;


Recorder_status_t Recorder_record(volatile Recorder_t* recorder,volatile Timer_time_t* time, Timer_time_t timeout,Recorder_flag_t flag){

	DMA_table_mem_t* table = (DMA_table_mem_t*) recorder -> memories -> table;
   62164:	20800117 	ldw	r2,4(r4)
#define INITIAL_SAMPLES		(Sample_counter_t)2048

typedef uint32_t Distance_tries_counter_t;


Recorder_status_t Recorder_record(volatile Recorder_t* recorder,volatile Timer_time_t* time, Timer_time_t timeout,Recorder_flag_t flag){
   62168:	deffef04 	addi	sp,sp,-68
   6216c:	dc000715 	stw	r16,28(sp)

	DMA_table_mem_t* table = (DMA_table_mem_t*) recorder -> memories -> table;
   62170:	10800017 	ldw	r2,0(r2)
#define INITIAL_SAMPLES		(Sample_counter_t)2048

typedef uint32_t Distance_tries_counter_t;


Recorder_status_t Recorder_record(volatile Recorder_t* recorder,volatile Timer_time_t* time, Timer_time_t timeout,Recorder_flag_t flag){
   62174:	2021883a 	mov	r16,r4
	Sample_counter_t n=0;
	Sample_counter_t mmargin = 0;

	Sample_counter_t initial = 0;

	Timer_reset(recorder -> timer);
   62178:	21000017 	ldw	r4,0(r4)
typedef uint32_t Distance_tries_counter_t;


Recorder_status_t Recorder_record(volatile Recorder_t* recorder,volatile Timer_time_t* time, Timer_time_t timeout,Recorder_flag_t flag){

	DMA_table_mem_t* table = (DMA_table_mem_t*) recorder -> memories -> table;
   6217c:	d8800315 	stw	r2,12(sp)
#define INITIAL_SAMPLES		(Sample_counter_t)2048

typedef uint32_t Distance_tries_counter_t;


Recorder_status_t Recorder_record(volatile Recorder_t* recorder,volatile Timer_time_t* time, Timer_time_t timeout,Recorder_flag_t flag){
   62180:	dfc01015 	stw	ra,64(sp)
   62184:	dd400c15 	stw	r21,48(sp)
   62188:	d9400415 	stw	r5,16(sp)
   6218c:	302b883a 	mov	r21,r6
   62190:	d9c00515 	stw	r7,20(sp)
   62194:	df000f15 	stw	fp,60(sp)
   62198:	ddc00e15 	stw	r23,56(sp)
   6219c:	dd800d15 	stw	r22,52(sp)
   621a0:	dd000b15 	stw	r20,44(sp)
   621a4:	dcc00a15 	stw	r19,40(sp)
   621a8:	dc800915 	stw	r18,36(sp)
   621ac:	dc400815 	stw	r17,32(sp)
	Sample_counter_t n=0;
	Sample_counter_t mmargin = 0;

	Sample_counter_t initial = 0;

	Timer_reset(recorder -> timer);
   621b0:	00645c00 	call	645c0 <Timer_reset>


	Distance_measurement_t meas;
	init_distance_measurement(&meas);
   621b4:	d809883a 	mov	r4,sp
   621b8:	00632f80 	call	632f8 <init_distance_measurement>

	Gpio_timer_t schedulder = 0;
	Gpio_detection_status_t rstatus = GPIO_DETECT_IN_RANGE;

	for(int n=0;n<recorder ->memories -> table_size ; n++){
   621bc:	0005883a 	mov	r2,zero
   621c0:	80c00117 	ldw	r3,4(r16)
   621c4:	18c00317 	ldw	r3,12(r3)
   621c8:	10c0070e 	bge	r2,r3,621e8 <Recorder_record+0x84>
		recorder ->memories ->table[n] = 0;
   621cc:	80c00117 	ldw	r3,4(r16)
   621d0:	19000017 	ldw	r4,0(r3)
   621d4:	1087883a 	add	r3,r2,r2
	init_distance_measurement(&meas);

	Gpio_timer_t schedulder = 0;
	Gpio_detection_status_t rstatus = GPIO_DETECT_IN_RANGE;

	for(int n=0;n<recorder ->memories -> table_size ; n++){
   621d8:	10800044 	addi	r2,r2,1
		recorder ->memories ->table[n] = 0;
   621dc:	20c7883a 	add	r3,r4,r3
   621e0:	1800000d 	sth	zero,0(r3)
   621e4:	003ff606 	br	621c0 <__alt_data_end+0xfffee1c0>
	}

	MIC_start();
   621e8:	00620080 	call	62008 <MIC_start>

	Distance_measurement_t meas;
	init_distance_measurement(&meas);

	Gpio_timer_t schedulder = 0;
	Gpio_detection_status_t rstatus = GPIO_DETECT_IN_RANGE;
   621ec:	002d883a 	mov	r22,zero


	Distance_measurement_t meas;
	init_distance_measurement(&meas);

	Gpio_timer_t schedulder = 0;
   621f0:	0025883a 	mov	r18,zero
	DMA_table_mem_t* table = (DMA_table_mem_t*) recorder -> memories -> table;

	Sample_counter_t n=0;
	Sample_counter_t mmargin = 0;

	Sample_counter_t initial = 0;
   621f4:	0029883a 	mov	r20,zero
Recorder_status_t Recorder_record(volatile Recorder_t* recorder,volatile Timer_time_t* time, Timer_time_t timeout,Recorder_flag_t flag){

	DMA_table_mem_t* table = (DMA_table_mem_t*) recorder -> memories -> table;

	Sample_counter_t n=0;
	Sample_counter_t mmargin = 0;
   621f8:	0023883a 	mov	r17,zero

Recorder_status_t Recorder_record(volatile Recorder_t* recorder,volatile Timer_time_t* time, Timer_time_t timeout,Recorder_flag_t flag){

	DMA_table_mem_t* table = (DMA_table_mem_t*) recorder -> memories -> table;

	Sample_counter_t n=0;
   621fc:	0027883a 	mov	r19,zero

		if(status == MICROPHONE_STATUS_EMPTY){
			continue;
		}

		if(status == MICROPHONE_STATUS_ERROR){
   62200:	05c00084 	movi	r23,2
			}

		}

		Distance_button_t button = BUTTON_NOT_PRESSED;
		switch(schedulder){
   62204:	07000044 	movi	fp,1
	MIC_start();

	while(1){

		Microphone_sound_t sound = 0;
		Microphone_status_t status = MIC_getSample((Microphone_t*)recorder -> microphone, &sound);
   62208:	81000317 	ldw	r4,12(r16)
   6220c:	d9400204 	addi	r5,sp,8

	MIC_start();

	while(1){

		Microphone_sound_t sound = 0;
   62210:	d800020d 	sth	zero,8(sp)
		Microphone_status_t status = MIC_getSample((Microphone_t*)recorder -> microphone, &sound);
   62214:	0061f380 	call	61f38 <MIC_getSample>

		if(status == MICROPHONE_STATUS_FULL){
   62218:	00c000c4 	movi	r3,3
   6221c:	10c0151e 	bne	r2,r3,62274 <Recorder_record+0x110>
   62220:	0005883a 	mov	r2,zero

			for(int n=0;n<recorder ->memories -> table_size ; n++){
   62224:	80c00117 	ldw	r3,4(r16)
   62228:	18c00317 	ldw	r3,12(r3)
   6222c:	10c0070e 	bge	r2,r3,6224c <Recorder_record+0xe8>
				recorder ->memories ->table[n] = 0;
   62230:	80c00117 	ldw	r3,4(r16)
   62234:	19000017 	ldw	r4,0(r3)
   62238:	1087883a 	add	r3,r2,r2
		Microphone_sound_t sound = 0;
		Microphone_status_t status = MIC_getSample((Microphone_t*)recorder -> microphone, &sound);

		if(status == MICROPHONE_STATUS_FULL){

			for(int n=0;n<recorder ->memories -> table_size ; n++){
   6223c:	10800044 	addi	r2,r2,1
				recorder ->memories ->table[n] = 0;
   62240:	20c7883a 	add	r3,r4,r3
   62244:	1800000d 	sth	zero,0(r3)
   62248:	003ff606 	br	62224 <__alt_data_end+0xfffee224>
   6224c:	00c00404 	movi	r3,16
			}

			for(int n=0;n<16;n++){
				if(MIC_getSample((Microphone_t*)recorder -> microphone, &sound) == MICROPHONE_STATUS_EMPTY){
   62250:	81000317 	ldw	r4,12(r16)
   62254:	d9400204 	addi	r5,sp,8
   62258:	d8c00615 	stw	r3,24(sp)
   6225c:	0061f380 	call	61f38 <MIC_getSample>
   62260:	d8c00617 	ldw	r3,24(sp)
   62264:	103fe826 	beq	r2,zero,62208 <__alt_data_end+0xfffee208>
   62268:	18ffffc4 	addi	r3,r3,-1

			for(int n=0;n<recorder ->memories -> table_size ; n++){
				recorder ->memories ->table[n] = 0;
			}

			for(int n=0;n<16;n++){
   6226c:	183ff81e 	bne	r3,zero,62250 <__alt_data_end+0xfffee250>
   62270:	003fe506 	br	62208 <__alt_data_end+0xfffee208>
			}

			continue;
		}

		if(status == MICROPHONE_STATUS_EMPTY){
   62274:	103fe426 	beq	r2,zero,62208 <__alt_data_end+0xfffee208>
			continue;
		}

		if(status == MICROPHONE_STATUS_ERROR){
   62278:	15c07726 	beq	r2,r23,62458 <Recorder_record+0x2f4>

			return RECORDER_ERROR;
		}

		if(rstatus == GPIO_DETECT_IN_RANGE){
   6227c:	b000311e 	bne	r22,zero,62344 <Recorder_record+0x1e0>
			recorder -> console -> in_range = DATA_TRUE;
   62280:	80c00517 	ldw	r3,20(r16)
   62284:	1f000615 	stw	fp,24(r3)

			if(status == MICROPHONE_STATUS_READY){
   62288:	1700491e 	bne	r2,fp,623b0 <Recorder_record+0x24c>
				if(initial < INITIAL_SAMPLES){
   6228c:	0081ffc4 	movi	r2,2047
   62290:	15000236 	bltu	r2,r20,6229c <Recorder_record+0x138>
					initial ++;
   62294:	a5000044 	addi	r20,r20,1
   62298:	00004506 	br	623b0 <Recorder_record+0x24c>
				}else{

					table[n] = (DMA_table_mem_t) sound;
   6229c:	d8c00317 	ldw	r3,12(sp)
   622a0:	9cc5883a 	add	r2,r19,r19
   622a4:	1885883a 	add	r2,r3,r2
   622a8:	d8c0020b 	ldhu	r3,8(sp)
   622ac:	10c0000d 	sth	r3,0(r2)

					if(mmargin == 0){
   622b0:	8800051e 	bne	r17,zero,622c8 <Recorder_record+0x164>
						if(sound > MIC_DETECT_MIN && sound < MAX_16_BIT_VALUE - MIC_DETECT_MIN){
							mmargin = 1;
   622b4:	dc40020b 	ldhu	r17,8(sp)
   622b8:	8c7e7fc4 	addi	r17,r17,-1537
   622bc:	8c7fffcc 	andi	r17,r17,65535
   622c0:	8c7cffb0 	cmpltui	r17,r17,62462
   622c4:	00001306 	br	62314 <Recorder_record+0x1b0>
						}
					}else{
						mmargin ++;
   622c8:	8c400044 	addi	r17,r17,1
					}


					if(mmargin >= MAX_MARGIN_SIZE){
   622cc:	008bab44 	movi	r2,11949
   622d0:	1440102e 	bgeu	r2,r17,62314 <Recorder_record+0x1b0>
						MIC_stop();
   622d4:	006201c0 	call	6201c <MIC_stop>
						Nor_normalizeSamples(recorder -> normaliser,recorder -> memories);
   622d8:	81000217 	ldw	r4,8(r16)
   622dc:	81400117 	ldw	r5,4(r16)
   622e0:	00636640 	call	63664 <Nor_normalizeSamples>

						// swapping

						uint32_t index = n + 1;

						DMA_copy_to_swap(recorder -> memories,index,(MAX_SIZE_WITH_SPACE) * 2);
   622e4:	81000117 	ldw	r4,4(r16)
   622e8:	01aeae14 	movui	r6,47800
   622ec:	99400044 	addi	r5,r19,1
   622f0:	00611240 	call	61124 <DMA_copy_to_swap>
						DMA_paste_from_swap(recorder -> memories,(MAX_SIZE_WITH_SPACE) * 2);
   622f4:	81000117 	ldw	r4,4(r16)
   622f8:	016eae14 	movui	r5,47800
   622fc:	00611940 	call	61194 <DMA_paste_from_swap>
		}


	}

	*time =  MAX_SIZE;
   62300:	d8c00417 	ldw	r3,16(sp)
   62304:	00977004 	movi	r2,24000
   62308:	18800015 	stw	r2,0(r3)

	return RECORDER_RECORDED_FRAGMENT;
   6230c:	0005883a 	mov	r2,zero
   62310:	00005606 	br	6246c <Recorder_record+0x308>
						DMA_copy_to_swap(recorder -> memories,index,(MAX_SIZE_WITH_SPACE) * 2);
						DMA_paste_from_swap(recorder -> memories,(MAX_SIZE_WITH_SPACE) * 2);

						break;
					}else{
						if((Timer_get_time(recorder -> timer) > timeout) && (timeout != -1)){
   62314:	81000017 	ldw	r4,0(r16)
   62318:	00646600 	call	64660 <Timer_get_time>
   6231c:	a880052e 	bgeu	r21,r2,62334 <Recorder_record+0x1d0>
   62320:	00bfffc4 	movi	r2,-1
   62324:	a8800326 	beq	r21,r2,62334 <Recorder_record+0x1d0>
							MIC_stop();
   62328:	006201c0 	call	6201c <MIC_stop>
							return RECORDER_TIMEOUT;
   6232c:	00800044 	movi	r2,1
   62330:	00004e06 	br	6246c <Recorder_record+0x308>
						}
					}

					n++;
   62334:	9cc00044 	addi	r19,r19,1

					if(n == MAX_SIZE_WITH_SPACE){
   62338:	00975704 	movi	r2,23900
   6233c:	98801c1e 	bne	r19,r2,623b0 <Recorder_record+0x24c>
   62340:	00001a06 	br	623ac <Recorder_record+0x248>
						n = 0;
					}
				}
			}
		}else{
			if(recorder -> console -> in_range){
   62344:	80800517 	ldw	r2,20(r16)
   62348:	10800617 	ldw	r2,24(r2)
   6234c:	10000226 	beq	r2,zero,62358 <Recorder_record+0x1f4>
   62350:	0005883a 	mov	r2,zero
   62354:	00000406 	br	62368 <Recorder_record+0x204>
				mmargin = 0;

				initial = 0;
			}

			recorder -> console -> in_range = DATA_FALSE;
   62358:	80800517 	ldw	r2,20(r16)
   6235c:	10000615 	stw	zero,24(r2)

			if(rstatus == GPIO_DETECT_ERROR){
   62360:	b5c00b1e 	bne	r22,r23,62390 <Recorder_record+0x22c>
   62364:	00003c06 	br	62458 <Recorder_record+0x2f4>
					}
				}
			}
		}else{
			if(recorder -> console -> in_range){
				for(int n=0;n<recorder ->memories -> table_size ; n++){
   62368:	80c00117 	ldw	r3,4(r16)
   6236c:	18c00317 	ldw	r3,12(r3)
   62370:	10fff90e 	bge	r2,r3,62358 <__alt_data_end+0xfffee358>
					recorder ->memories ->table[n] = 0;
   62374:	80c00117 	ldw	r3,4(r16)
   62378:	19000017 	ldw	r4,0(r3)
   6237c:	1087883a 	add	r3,r2,r2
					}
				}
			}
		}else{
			if(recorder -> console -> in_range){
				for(int n=0;n<recorder ->memories -> table_size ; n++){
   62380:	10800044 	addi	r2,r2,1
					recorder ->memories ->table[n] = 0;
   62384:	20c7883a 	add	r3,r4,r3
   62388:	1800000d 	sth	zero,0(r3)
   6238c:	003ff606 	br	62368 <__alt_data_end+0xfffee368>

			n=0;
			mmargin = 0;
			initial = 0;

			if((Timer_get_time(recorder -> timer) > timeout) && (timeout != -1)){
   62390:	81000017 	ldw	r4,0(r16)
   62394:	00646600 	call	64660 <Timer_get_time>
   62398:	a880022e 	bgeu	r21,r2,623a4 <Recorder_record+0x240>
   6239c:	00bfffc4 	movi	r2,-1
   623a0:	a8bfe11e 	bne	r21,r2,62328 <__alt_data_end+0xfffee328>
				return RECORDER_ERROR;
			}

			n=0;
			mmargin = 0;
			initial = 0;
   623a4:	0029883a 	mov	r20,zero
			if(rstatus == GPIO_DETECT_ERROR){
				return RECORDER_ERROR;
			}

			n=0;
			mmargin = 0;
   623a8:	0023883a 	mov	r17,zero

			if(rstatus == GPIO_DETECT_ERROR){
				return RECORDER_ERROR;
			}

			n=0;
   623ac:	0027883a 	mov	r19,zero
			}

		}

		Distance_button_t button = BUTTON_NOT_PRESSED;
		switch(schedulder){
   623b0:	97000e26 	beq	r18,fp,623ec <Recorder_record+0x288>
   623b4:	90000926 	beq	r18,zero,623dc <Recorder_record+0x278>
   623b8:	95c00f26 	beq	r18,r23,623f8 <Recorder_record+0x294>
   623bc:	008000c4 	movi	r2,3
   623c0:	9080201e 	bne	r18,r2,62444 <Recorder_record+0x2e0>
					return RECORDER_VOLUME;
				}

				break;
			case 3:
				rstatus = in_proper_distance(recorder -> timer -> mdistance,&meas);
   623c4:	80800017 	ldw	r2,0(r16)
   623c8:	d80b883a 	mov	r5,sp
   623cc:	11000517 	ldw	r4,20(r2)
   623d0:	00633040 	call	63304 <in_proper_distance>
   623d4:	102d883a 	mov	r22,r2
				break;
   623d8:	00001a06 	br	62444 <Recorder_record+0x2e0>
		}

		Distance_button_t button = BUTTON_NOT_PRESSED;
		switch(schedulder){
			case 0:
				if(wait_for_connection_recorder(recorder)){
   623dc:	8009883a 	mov	r4,r16
   623e0:	0062ddc0 	call	62ddc <wait_for_connection_recorder>
   623e4:	10001726 	beq	r2,zero,62444 <Recorder_record+0x2e0>
   623e8:	00001d06 	br	62460 <Recorder_record+0x2fc>
					return RECORDER_RESET;
				}
				break;
			case 1:
				BLE_console(recorder -> console);
   623ec:	81000517 	ldw	r4,20(r16)
   623f0:	0062a280 	call	62a28 <BLE_console>
				break;
   623f4:	00001306 	br	62444 <Recorder_record+0x2e0>
			case 2:

				button = gpio_button_buffered_status(recorder -> timer ->gpio);
   623f8:	80800017 	ldw	r2,0(r16)
   623fc:	11000617 	ldw	r4,24(r2)
   62400:	0062ecc0 	call	62ecc <gpio_button_buffered_status>
				if(button == BUTTON_LISTEN){
   62404:	1480051e 	bne	r2,r18,6241c <Recorder_record+0x2b8>

					MIC_stop();
   62408:	006201c0 	call	6201c <MIC_stop>

					if(flag == RECORDER_FLAG_WAIT_FOR_NAME){
   6240c:	d8c00517 	ldw	r3,20(sp)
   62410:	18001526 	beq	r3,zero,62468 <Recorder_record+0x304>

						return RECORDER_START;
					}else{

						return RECORDER_CANCEL;
   62414:	00800144 	movi	r2,5
   62418:	00001406 	br	6246c <Recorder_record+0x308>
					}

				}else if(button == BUTTON_RESET){
   6241c:	00c000c4 	movi	r3,3
   62420:	10c0021e 	bne	r2,r3,6242c <Recorder_record+0x2c8>

					MIC_stop();
   62424:	006201c0 	call	6201c <MIC_stop>
   62428:	00000d06 	br	62460 <Recorder_record+0x2fc>
					return RECORDER_RESET;

				}else if(button == BUTTON_VOLUME){
   6242c:	00c00104 	movi	r3,4
   62430:	10c0041e 	bne	r2,r3,62444 <Recorder_record+0x2e0>
					MIC_stop();
   62434:	d8800615 	stw	r2,24(sp)
   62438:	006201c0 	call	6201c <MIC_stop>
					return RECORDER_VOLUME;
   6243c:	d8800617 	ldw	r2,24(sp)
   62440:	00000a06 	br	6246c <Recorder_record+0x308>
				rstatus = in_proper_distance(recorder -> timer -> mdistance,&meas);
				break;

		}

		schedulder ++;
   62444:	94800044 	addi	r18,r18,1

		if(schedulder == 10){
   62448:	00800284 	movi	r2,10
   6244c:	90bf6e1e 	bne	r18,r2,62208 <__alt_data_end+0xfffee208>
			schedulder = 0;
   62450:	0025883a 	mov	r18,zero
   62454:	003f6c06 	br	62208 <__alt_data_end+0xfffee208>
			continue;
		}

		if(status == MICROPHONE_STATUS_ERROR){

			return RECORDER_ERROR;
   62458:	00800084 	movi	r2,2
   6245c:	00000306 	br	6246c <Recorder_record+0x308>

		Distance_button_t button = BUTTON_NOT_PRESSED;
		switch(schedulder){
			case 0:
				if(wait_for_connection_recorder(recorder)){
					return RECORDER_RESET;
   62460:	00800184 	movi	r2,6
   62464:	00000106 	br	6246c <Recorder_record+0x308>

					MIC_stop();

					if(flag == RECORDER_FLAG_WAIT_FOR_NAME){

						return RECORDER_START;
   62468:	008000c4 	movi	r2,3
	}

	*time =  MAX_SIZE;

	return RECORDER_RECORDED_FRAGMENT;
}
   6246c:	dfc01017 	ldw	ra,64(sp)
   62470:	df000f17 	ldw	fp,60(sp)
   62474:	ddc00e17 	ldw	r23,56(sp)
   62478:	dd800d17 	ldw	r22,52(sp)
   6247c:	dd400c17 	ldw	r21,48(sp)
   62480:	dd000b17 	ldw	r20,44(sp)
   62484:	dcc00a17 	ldw	r19,40(sp)
   62488:	dc800917 	ldw	r18,36(sp)
   6248c:	dc400817 	ldw	r17,32(sp)
   62490:	dc000717 	ldw	r16,28(sp)
   62494:	dec01104 	addi	sp,sp,68
   62498:	f800283a 	ret

0006249c <ble_isr>:
static void ble_isr(void* context){
	BLE_UART_t* ble_uart = (BLE_UART_t*) context;

	for(int n=0;n<MAX_READS_WRITES_ON_ONE_ISR;n++){

		if((*BLE_STATUS & 0x4) == 0){
   6249c:	018000f4 	movhi	r6,3
			if(ble_uart ->operation == BLE_WRITE){

				ble_uart -> read_rdy = DATA_FALSE;

				if((*BLE_STATUS & 0x1)== 0){
					*BLE_BYTE_SEND = ble_uart ->message_out[ble_uart -> write_pos];
   624a0:	024000f4 	movhi	r9,3
				}
			}

			if((*BLE_STATUS & 0x2) == 0x0){

				uint8_t character = *BLE_BYTE_READ & 0xFF;
   624a4:	028000f4 	movhi	r10,3
		alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
		return DATA_TRUE;
	}
}

static void ble_isr(void* context){
   624a8:	00c00104 	movi	r3,4
	BLE_UART_t* ble_uart = (BLE_UART_t*) context;

	for(int n=0;n<MAX_READS_WRITES_ON_ONE_ISR;n++){

		if((*BLE_STATUS & 0x4) == 0){
   624ac:	31a00204 	addi	r6,r6,-32760

			if(ble_uart ->operation == BLE_WRITE){
   624b0:	02000044 	movi	r8,1

				ble_uart -> read_rdy = DATA_FALSE;

				if((*BLE_STATUS & 0x1)== 0){
					*BLE_BYTE_SEND = ble_uart ->message_out[ble_uart -> write_pos];
   624b4:	4a600104 	addi	r9,r9,-32764
					ble_uart -> write_pos ++;

					if((ble_uart -> write_pos == STANDARD_BLE_BUFFER_SIZE) || (ble_uart -> write_pos == ble_uart ->write_len)){
   624b8:	01c00504 	movi	r7,20
				}
			}

			if((*BLE_STATUS & 0x2) == 0x0){

				uint8_t character = *BLE_BYTE_READ & 0xFF;
   624bc:	52a00304 	addi	r10,r10,-32756
				ble_uart -> message_in[ble_uart -> read_pos] = character;

				if(character == '\n'){
   624c0:	02c00284 	movi	r11,10
static void ble_isr(void* context){
	BLE_UART_t* ble_uart = (BLE_UART_t*) context;

	for(int n=0;n<MAX_READS_WRITES_ON_ONE_ISR;n++){

		if((*BLE_STATUS & 0x4) == 0){
   624c4:	30800017 	ldw	r2,0(r6)
   624c8:	1080010c 	andi	r2,r2,4
   624cc:	1000351e 	bne	r2,zero,625a4 <ble_isr+0x108>

			if(ble_uart ->operation == BLE_WRITE){
   624d0:	20800917 	ldw	r2,36(r4)
   624d4:	1200131e 	bne	r2,r8,62524 <ble_isr+0x88>

				ble_uart -> read_rdy = DATA_FALSE;
   624d8:	20000515 	stw	zero,20(r4)

				if((*BLE_STATUS & 0x1)== 0){
   624dc:	30800017 	ldw	r2,0(r6)
   624e0:	1080004c 	andi	r2,r2,1
   624e4:	10000f1e 	bne	r2,zero,62524 <ble_isr+0x88>
					*BLE_BYTE_SEND = ble_uart ->message_out[ble_uart -> write_pos];
   624e8:	20800717 	ldw	r2,28(r4)
   624ec:	21400617 	ldw	r5,24(r4)
   624f0:	2885883a 	add	r2,r5,r2
   624f4:	10800003 	ldbu	r2,0(r2)
   624f8:	10803fcc 	andi	r2,r2,255
   624fc:	48800015 	stw	r2,0(r9)
					ble_uart -> write_pos ++;
   62500:	20800717 	ldw	r2,28(r4)
   62504:	10800044 	addi	r2,r2,1
   62508:	20800715 	stw	r2,28(r4)

					if((ble_uart -> write_pos == STANDARD_BLE_BUFFER_SIZE) || (ble_uart -> write_pos == ble_uart ->write_len)){
   6250c:	20800717 	ldw	r2,28(r4)
   62510:	11c00326 	beq	r2,r7,62520 <ble_isr+0x84>
   62514:	21400717 	ldw	r5,28(r4)
   62518:	20800817 	ldw	r2,32(r4)
   6251c:	2880011e 	bne	r5,r2,62524 <ble_isr+0x88>
						ble_uart ->operation = BLE_NONE;
   62520:	20000915 	stw	zero,36(r4)
					}

				}
			}

			if((*BLE_STATUS & 0x2) == 0x0){
   62524:	008000f4 	movhi	r2,3
   62528:	10a00204 	addi	r2,r2,-32760
   6252c:	10800017 	ldw	r2,0(r2)
   62530:	1080008c 	andi	r2,r2,2
   62534:	1000221e 	bne	r2,zero,625c0 <ble_isr+0x124>

				uint8_t character = *BLE_BYTE_READ & 0xFF;
   62538:	50800017 	ldw	r2,0(r10)
				ble_uart -> message_in[ble_uart -> read_pos] = character;
   6253c:	23000217 	ldw	r12,8(r4)
   62540:	21400317 	ldw	r5,12(r4)
   62544:	614b883a 	add	r5,r12,r5
   62548:	28800005 	stb	r2,0(r5)

				if(character == '\n'){
   6254c:	10803fcc 	andi	r2,r2,255
   62550:	12c00c1e 	bne	r2,r11,62584 <ble_isr+0xe8>
					ble_uart -> read_len = ble_uart -> read_pos + 2;
   62554:	20800317 	ldw	r2,12(r4)
					ble_uart -> message_in[ble_uart -> read_pos + 1] = 0;
   62558:	20c00217 	ldw	r3,8(r4)

				uint8_t character = *BLE_BYTE_READ & 0xFF;
				ble_uart -> message_in[ble_uart -> read_pos] = character;

				if(character == '\n'){
					ble_uart -> read_len = ble_uart -> read_pos + 2;
   6255c:	10800084 	addi	r2,r2,2
   62560:	20800415 	stw	r2,16(r4)
					ble_uart -> message_in[ble_uart -> read_pos + 1] = 0;
   62564:	20800317 	ldw	r2,12(r4)
   62568:	10800044 	addi	r2,r2,1
   6256c:	1885883a 	add	r2,r3,r2
   62570:	10000005 	stb	zero,0(r2)

					ble_uart -> read_rdy = DATA_TRUE;
   62574:	00800044 	movi	r2,1
   62578:	20800515 	stw	r2,20(r4)

					ble_uart ->read_pos = 0;
   6257c:	20000315 	stw	zero,12(r4)
					break;
   62580:	00001106 	br	625c8 <ble_isr+0x12c>

				}else{
					ble_uart -> read_rdy = DATA_FALSE;
   62584:	20000515 	stw	zero,20(r4)
				}

				ble_uart -> read_pos ++;
   62588:	20800317 	ldw	r2,12(r4)
   6258c:	10800044 	addi	r2,r2,1
   62590:	20800315 	stw	r2,12(r4)

				if(ble_uart -> read_pos == STANDARD_BLE_BUFFER_SIZE){
   62594:	20800317 	ldw	r2,12(r4)
   62598:	11c0091e 	bne	r2,r7,625c0 <ble_isr+0x124>
					ble_uart ->read_pos = 0;
   6259c:	20000315 	stw	zero,12(r4)
   625a0:	00000706 	br	625c0 <ble_isr+0x124>

			}


		}else{
			ble_uart ->flag = BLE_FLAG_DOWN;
   625a4:	20000015 	stw	zero,0(r4)

			ble_uart ->read_len = 0;
   625a8:	20000415 	stw	zero,16(r4)
			ble_uart ->read_pos = 0;
   625ac:	20000315 	stw	zero,12(r4)

			ble_uart -> write_len = 0;
   625b0:	20000815 	stw	zero,32(r4)
			ble_uart -> write_pos = 0;
   625b4:	20000715 	stw	zero,28(r4)

			ble_uart ->read_rdy = DATA_FALSE;
   625b8:	20000515 	stw	zero,20(r4)
			break;
   625bc:	00000206 	br	625c8 <ble_isr+0x12c>
   625c0:	18ffffc4 	addi	r3,r3,-1
}

static void ble_isr(void* context){
	BLE_UART_t* ble_uart = (BLE_UART_t*) context;

	for(int n=0;n<MAX_READS_WRITES_ON_ONE_ISR;n++){
   625c4:	183fbf1e 	bne	r3,zero,624c4 <__alt_data_end+0xfffee4c4>

			ble_uart ->read_rdy = DATA_FALSE;
			break;
		}
	}
	ble_uart ->flag = BLE_FLAG_UP;
   625c8:	00800044 	movi	r2,1
   625cc:	20800015 	stw	r2,0(r4)

	*BLE_IRQ_RET = 0;
   625d0:	008000f4 	movhi	r2,3
   625d4:	10a00004 	addi	r2,r2,-32768
   625d8:	10000015 	stw	zero,0(r2)
   625dc:	f800283a 	ret

000625e0 <Is_connected>:
#define BLE_ENABLE				(volatile uint32_t*) 0x28010
#define BLE_MODULE_STATUS		(volatile uint32_t*) 0x28010

#define MAX_READS_WRITES_ON_ONE_ISR		4

Data_bool_t Is_connected(){
   625e0:	deffff04 	addi	sp,sp,-4

	alt_ic_irq_disable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   625e4:	014001c4 	movi	r5,7
   625e8:	0009883a 	mov	r4,zero
#define BLE_ENABLE				(volatile uint32_t*) 0x28010
#define BLE_MODULE_STATUS		(volatile uint32_t*) 0x28010

#define MAX_READS_WRITES_ON_ONE_ISR		4

Data_bool_t Is_connected(){
   625ec:	dfc00015 	stw	ra,0(sp)

	alt_ic_irq_disable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   625f0:	00648ec0 	call	648ec <alt_ic_irq_disable>
	if ((*BLE_MODULE_STATUS & 0x2) == 0x0){
   625f4:	008000f4 	movhi	r2,3
   625f8:	10a00404 	addi	r2,r2,-32752
   625fc:	10800017 	ldw	r2,0(r2)
		alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   62600:	014001c4 	movi	r5,7
   62604:	0009883a 	mov	r4,zero
#define MAX_READS_WRITES_ON_ONE_ISR		4

Data_bool_t Is_connected(){

	alt_ic_irq_disable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
	if ((*BLE_MODULE_STATUS & 0x2) == 0x0){
   62608:	1080008c 	andi	r2,r2,2
   6260c:	1000031e 	bne	r2,zero,6261c <Is_connected+0x3c>
		alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   62610:	00648b40 	call	648b4 <alt_ic_irq_enable>
   62614:	0005883a 	mov	r2,zero
   62618:	00000206 	br	62624 <Is_connected+0x44>
		return DATA_FALSE;
	}else{
		alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   6261c:	00648b40 	call	648b4 <alt_ic_irq_enable>
		return DATA_TRUE;
   62620:	00800044 	movi	r2,1
	}
}
   62624:	dfc00017 	ldw	ra,0(sp)
   62628:	dec00104 	addi	sp,sp,4
   6262c:	f800283a 	ret

00062630 <BLE_send_data>:
	ble_uart ->flag = BLE_FLAG_UP;

	*BLE_IRQ_RET = 0;
}

BLE_write_status_t BLE_send_data(volatile BLE_UART_t* ble_uart,uint8_t* data){
   62630:	defffc04 	addi	sp,sp,-16
   62634:	dc400115 	stw	r17,4(sp)
   62638:	dc000015 	stw	r16,0(sp)
   6263c:	dfc00315 	stw	ra,12(sp)
   62640:	dc800215 	stw	r18,8(sp)
   62644:	2021883a 	mov	r16,r4
   62648:	2823883a 	mov	r17,r5

	if(!Is_connected()){
   6264c:	00625e00 	call	625e0 <Is_connected>
   62650:	10002726 	beq	r2,zero,626f0 <BLE_send_data+0xc0>
		return BLE_WRITE_DISCONNECTED;
	}

	Data_bool_t finish = DATA_FALSE;

	if(ble_uart ->operation == BLE_WRITE){
   62654:	80c00917 	ldw	r3,36(r16)
   62658:	00800044 	movi	r2,1
   6265c:	18802626 	beq	r3,r2,626f8 <BLE_send_data+0xc8>
   62660:	880b883a 	mov	r5,r17
			break;
		}

		len ++;

		if(data[n] =='\n'){
   62664:	01000284 	movi	r4,10
		return BLE_WRITE_DISCONNECTED;
	}

	Data_bool_t finish = DATA_FALSE;

	if(ble_uart ->operation == BLE_WRITE){
   62668:	0023883a 	mov	r17,zero
		return BLE_WRITE_WAIT_FOR_READY;
	}

	Data_size_t len = 0;

	for(Data_size_t n=0; n < STANDARD_BLE_BUFFER_SIZE ; n++){
   6266c:	00c00504 	movi	r3,20

		ble_uart ->message_out[n] = data[n];
   62670:	80800617 	ldw	r2,24(r16)
   62674:	29800003 	ldbu	r6,0(r5)
   62678:	1445883a 	add	r2,r2,r17
   6267c:	11800005 	stb	r6,0(r2)

		if(data[n] == 0){
   62680:	28800003 	ldbu	r2,0(r5)
   62684:	10000426 	beq	r2,zero,62698 <BLE_send_data+0x68>
			break;
		}

		len ++;
   62688:	8c400044 	addi	r17,r17,1

		if(data[n] =='\n'){
   6268c:	11000426 	beq	r2,r4,626a0 <BLE_send_data+0x70>
   62690:	29400044 	addi	r5,r5,1
		return BLE_WRITE_WAIT_FOR_READY;
	}

	Data_size_t len = 0;

	for(Data_size_t n=0; n < STANDARD_BLE_BUFFER_SIZE ; n++){
   62694:	88fff61e 	bne	r17,r3,62670 <__alt_data_end+0xfffee670>

	if(!Is_connected()){
		return BLE_WRITE_DISCONNECTED;
	}

	Data_bool_t finish = DATA_FALSE;
   62698:	0025883a 	mov	r18,zero
   6269c:	00000106 	br	626a4 <BLE_send_data+0x74>
		}

		len ++;

		if(data[n] =='\n'){
			finish = DATA_TRUE;
   626a0:	04800044 	movi	r18,1
			break;
		}

	}

	alt_ic_irq_disable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   626a4:	014001c4 	movi	r5,7
   626a8:	0009883a 	mov	r4,zero
   626ac:	00648ec0 	call	648ec <alt_ic_irq_disable>

	ble_uart -> write_pos = 1;
   626b0:	00800044 	movi	r2,1
   626b4:	80800715 	stw	r2,28(r16)
	ble_uart -> write_len = len;
   626b8:	84400815 	stw	r17,32(r16)

	ble_uart -> operation = BLE_WRITE;
   626bc:	80800915 	stw	r2,36(r16)

	*BLE_BYTE_SEND = ble_uart -> message_out[0];
   626c0:	80800617 	ldw	r2,24(r16)
   626c4:	00c000f4 	movhi	r3,3
   626c8:	18e00104 	addi	r3,r3,-32764
   626cc:	10800003 	ldbu	r2,0(r2)

	alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   626d0:	014001c4 	movi	r5,7
   626d4:	0009883a 	mov	r4,zero
	ble_uart -> write_pos = 1;
	ble_uart -> write_len = len;

	ble_uart -> operation = BLE_WRITE;

	*BLE_BYTE_SEND = ble_uart -> message_out[0];
   626d8:	10803fcc 	andi	r2,r2,255
   626dc:	18800015 	stw	r2,0(r3)

	alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   626e0:	00648b40 	call	648b4 <alt_ic_irq_enable>
	if(finish){
   626e4:	9000061e 	bne	r18,zero,62700 <BLE_send_data+0xd0>
		return BLE_WRITE_EOL_OK;
	}else{
		return BLE_WRITE_OK;
   626e8:	0005883a 	mov	r2,zero
   626ec:	00000506 	br	62704 <BLE_send_data+0xd4>
}

BLE_write_status_t BLE_send_data(volatile BLE_UART_t* ble_uart,uint8_t* data){

	if(!Is_connected()){
		return BLE_WRITE_DISCONNECTED;
   626f0:	00800104 	movi	r2,4
   626f4:	00000306 	br	62704 <BLE_send_data+0xd4>
	}

	Data_bool_t finish = DATA_FALSE;

	if(ble_uart ->operation == BLE_WRITE){
		return BLE_WRITE_WAIT_FOR_READY;
   626f8:	00800084 	movi	r2,2
   626fc:	00000106 	br	62704 <BLE_send_data+0xd4>

	*BLE_BYTE_SEND = ble_uart -> message_out[0];

	alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
	if(finish){
		return BLE_WRITE_EOL_OK;
   62700:	008000c4 	movi	r2,3
	}else{
		return BLE_WRITE_OK;
	}
}
   62704:	dfc00317 	ldw	ra,12(sp)
   62708:	dc800217 	ldw	r18,8(sp)
   6270c:	dc400117 	ldw	r17,4(sp)
   62710:	dc000017 	ldw	r16,0(sp)
   62714:	dec00404 	addi	sp,sp,16
   62718:	f800283a 	ret

0006271c <BLE_read_data>:

BLE_read_status_t BLE_read_data(volatile BLE_UART_t* ble_uart,uint8_t* data,Data_size_t size){
   6271c:	defffc04 	addi	sp,sp,-16
   62720:	dc800215 	stw	r18,8(sp)
   62724:	dc400115 	stw	r17,4(sp)
   62728:	dc000015 	stw	r16,0(sp)
   6272c:	dfc00315 	stw	ra,12(sp)
   62730:	2021883a 	mov	r16,r4
   62734:	2823883a 	mov	r17,r5
   62738:	3025883a 	mov	r18,r6

	if(!Is_connected()){
   6273c:	00625e00 	call	625e0 <Is_connected>
   62740:	10002126 	beq	r2,zero,627c8 <BLE_read_data+0xac>
		return BLE_READ_DISCONNECTED;
	}

	alt_ic_irq_disable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   62744:	014001c4 	movi	r5,7
   62748:	0009883a 	mov	r4,zero
   6274c:	00648ec0 	call	648ec <alt_ic_irq_disable>

	if(ble_uart ->read_rdy == DATA_FALSE){
   62750:	80800517 	ldw	r2,20(r16)
   62754:	10000326 	beq	r2,zero,62764 <BLE_read_data+0x48>
   62758:	8ca5883a 	add	r18,r17,r18
   6275c:	8805883a 	mov	r2,r17
   62760:	00000a06 	br	6278c <BLE_read_data+0x70>
		alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   62764:	014001c4 	movi	r5,7
   62768:	0009883a 	mov	r4,zero
   6276c:	00648b40 	call	648b4 <alt_ic_irq_enable>
		return BLE_READ_NO_DATA;
   62770:	00800084 	movi	r2,2
   62774:	00001506 	br	627cc <BLE_read_data+0xb0>
		if(n >= size){
			alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);

			return BLE_READ_ERROR;
		}else{
			data[n] = ble_uart -> message_in[n];
   62778:	81000217 	ldw	r4,8(r16)
   6277c:	10800044 	addi	r2,r2,1
   62780:	20c7883a 	add	r3,r4,r3
   62784:	18c00003 	ldbu	r3,0(r3)
   62788:	10ffffc5 	stb	r3,-1(r2)
		return BLE_READ_NO_DATA;
	}



	for(Data_size_t n=0 ; n < ble_uart ->read_len ; n++){
   6278c:	81000417 	ldw	r4,16(r16)
   62790:	1447c83a 	sub	r3,r2,r17
   62794:	1900062e 	bgeu	r3,r4,627b0 <BLE_read_data+0x94>
		if(n >= size){
   62798:	14bff71e 	bne	r2,r18,62778 <__alt_data_end+0xfffee778>
			alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   6279c:	014001c4 	movi	r5,7
   627a0:	0009883a 	mov	r4,zero
   627a4:	00648b40 	call	648b4 <alt_ic_irq_enable>

			return BLE_READ_ERROR;
   627a8:	00800044 	movi	r2,1
   627ac:	00000706 	br	627cc <BLE_read_data+0xb0>
		}else{
			data[n] = ble_uart -> message_in[n];
		}
	}

	ble_uart ->read_rdy = DATA_FALSE;
   627b0:	80000515 	stw	zero,20(r16)

	alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);
   627b4:	014001c4 	movi	r5,7
   627b8:	0009883a 	mov	r4,zero
   627bc:	00648b40 	call	648b4 <alt_ic_irq_enable>


	return BLE_READ_OK;
   627c0:	0005883a 	mov	r2,zero
   627c4:	00000106 	br	627cc <BLE_read_data+0xb0>
}

BLE_read_status_t BLE_read_data(volatile BLE_UART_t* ble_uart,uint8_t* data,Data_size_t size){

	if(!Is_connected()){
		return BLE_READ_DISCONNECTED;
   627c8:	00800104 	movi	r2,4

	alt_ic_irq_enable(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ);


	return BLE_READ_OK;
}
   627cc:	dfc00317 	ldw	ra,12(sp)
   627d0:	dc800217 	ldw	r18,8(sp)
   627d4:	dc400117 	ldw	r17,4(sp)
   627d8:	dc000017 	ldw	r16,0(sp)
   627dc:	dec00404 	addi	sp,sp,16
   627e0:	f800283a 	ret

000627e4 <BLE_print_str>:

void BLE_print_str(volatile BLE_UART_t* ble_uart, uint8_t* string){
   627e4:	defffb04 	addi	sp,sp,-20
   627e8:	dcc00315 	stw	r19,12(sp)
   627ec:	dc800215 	stw	r18,8(sp)
   627f0:	dc400115 	stw	r17,4(sp)
   627f4:	dc000015 	stw	r16,0(sp)
   627f8:	dfc00415 	stw	ra,16(sp)
   627fc:	2025883a 	mov	r18,r4
   62800:	2821883a 	mov	r16,r5
   62804:	2c404104 	addi	r17,r5,260

	for(int n=0;n<256;n+=20){
		while(1){
			BLE_write_status_t status = BLE_send_data(ble_uart,&string[n]);

			if(status == BLE_WRITE_EOL_OK){
   62808:	04c000c4 	movi	r19,3
void BLE_print_str(volatile BLE_UART_t* ble_uart, uint8_t* string){
	Data_bool_t finished = DATA_FALSE;

	for(int n=0;n<256;n+=20){
		while(1){
			BLE_write_status_t status = BLE_send_data(ble_uart,&string[n]);
   6280c:	800b883a 	mov	r5,r16
   62810:	9009883a 	mov	r4,r18
   62814:	00626300 	call	62630 <BLE_send_data>

			if(status == BLE_WRITE_EOL_OK){
   62818:	14c00326 	beq	r2,r19,62828 <BLE_print_str+0x44>
				finished = DATA_TRUE;
				break;
			}

			if(status == BLE_WRITE_OK){
   6281c:	103ffb1e 	bne	r2,zero,6280c <__alt_data_end+0xfffee80c>
   62820:	84000504 	addi	r16,r16,20
}

void BLE_print_str(volatile BLE_UART_t* ble_uart, uint8_t* string){
	Data_bool_t finished = DATA_FALSE;

	for(int n=0;n<256;n+=20){
   62824:	8c3ff91e 	bne	r17,r16,6280c <__alt_data_end+0xfffee80c>

		if(finished){
			break;
		}
	}
}
   62828:	dfc00417 	ldw	ra,16(sp)
   6282c:	dcc00317 	ldw	r19,12(sp)
   62830:	dc800217 	ldw	r18,8(sp)
   62834:	dc400117 	ldw	r17,4(sp)
   62838:	dc000017 	ldw	r16,0(sp)
   6283c:	dec00504 	addi	sp,sp,20
   62840:	f800283a 	ret

00062844 <init_BLE>:



void init_BLE(volatile BLE_UART_t* ble_uart){
   62844:	defff204 	addi	sp,sp,-56

	*BLE_ENABLE =1;
   62848:	008000f4 	movhi	r2,3
	}
}



void init_BLE(volatile BLE_UART_t* ble_uart){
   6284c:	dc000b15 	stw	r16,44(sp)
   62850:	dfc00d15 	stw	ra,52(sp)
   62854:	dc400c15 	stw	r17,48(sp)

	*BLE_ENABLE =1;
   62858:	10a00404 	addi	r2,r2,-32752
   6285c:	00c00044 	movi	r3,1
	}
}



void init_BLE(volatile BLE_UART_t* ble_uart){
   62860:	2021883a 	mov	r16,r4

	*BLE_ENABLE =1;
   62864:	10c00015 	stw	r3,0(r2)

	while((*BLE_MODULE_STATUS & 0x2) == 0x0){
   62868:	10c00017 	ldw	r3,0(r2)
   6286c:	18c0008c 	andi	r3,r3,2
   62870:	183ffd26 	beq	r3,zero,62868 <__alt_data_end+0xfffee868>
	}

	Timer_reset(ble_uart -> timer);
   62874:	81000a17 	ldw	r4,40(r16)
	while(Timer_get_time(ble_uart -> timer) < 1000);
   62878:	0440f9c4 	movi	r17,999
	*BLE_ENABLE =1;

	while((*BLE_MODULE_STATUS & 0x2) == 0x0){
	}

	Timer_reset(ble_uart -> timer);
   6287c:	00645c00 	call	645c0 <Timer_reset>
	while(Timer_get_time(ble_uart -> timer) < 1000);
   62880:	81000a17 	ldw	r4,40(r16)
   62884:	00646600 	call	64660 <Timer_get_time>
   62888:	88bffd2e 	bgeu	r17,r2,62880 <__alt_data_end+0xfffee880>

	ble_uart ->flag = BLE_FLAG_DOWN;
   6288c:	80000015 	stw	zero,0(r16)
	ble_uart -> operation = BLE_NONE;
   62890:	80000915 	stw	zero,36(r16)

	ble_uart ->read_len = 0;
   62894:	80000415 	stw	zero,16(r16)
	ble_uart ->read_pos = 0;
   62898:	80000315 	stw	zero,12(r16)

	ble_uart -> write_len = 0;
   6289c:	80000815 	stw	zero,32(r16)
	ble_uart -> write_pos = 0;
   628a0:	80000715 	stw	zero,28(r16)

	ble_uart ->read_rdy = DATA_FALSE;

	alt_ic_isr_register(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ, ble_isr, (BLE_UART_t*)ble_uart, 0);
   628a4:	018001b4 	movhi	r6,6
   628a8:	800f883a 	mov	r7,r16
   628ac:	31892704 	addi	r6,r6,9372
   628b0:	014001c4 	movi	r5,7
   628b4:	0009883a 	mov	r4,zero
	ble_uart ->read_pos = 0;

	ble_uart -> write_len = 0;
	ble_uart -> write_pos = 0;

	ble_uart ->read_rdy = DATA_FALSE;
   628b8:	80000515 	stw	zero,20(r16)

	alt_ic_isr_register(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ, ble_isr, (BLE_UART_t*)ble_uart, 0);
   628bc:	d8000015 	stw	zero,0(sp)
   628c0:	00648b00 	call	648b0 <alt_ic_isr_register>


	uint8_t buffer[40] = "Speech IoT Node ver 1.0 (C) 2024 PW \r\n";
   628c4:	014001b4 	movhi	r5,6
   628c8:	018009c4 	movi	r6,39
   628cc:	2953a404 	addi	r5,r5,20112
   628d0:	d9000104 	addi	r4,sp,4
   628d4:	00648880 	call	64888 <memcpy>

	BLE_print_str(ble_uart,buffer);
   628d8:	d9400104 	addi	r5,sp,4
   628dc:	8009883a 	mov	r4,r16
	ble_uart ->read_rdy = DATA_FALSE;

	alt_ic_isr_register(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ, ble_isr, (BLE_UART_t*)ble_uart, 0);


	uint8_t buffer[40] = "Speech IoT Node ver 1.0 (C) 2024 PW \r\n";
   628e0:	d8000ac5 	stb	zero,43(sp)

	BLE_print_str(ble_uart,buffer);
	while(Timer_get_time(ble_uart -> timer) < 500);
   628e4:	04407cc4 	movi	r17,499
	alt_ic_isr_register(BLE_UART_IRQ_INTERRUPT_CONTROLLER_ID, BLE_UART_IRQ, ble_isr, (BLE_UART_t*)ble_uart, 0);


	uint8_t buffer[40] = "Speech IoT Node ver 1.0 (C) 2024 PW \r\n";

	BLE_print_str(ble_uart,buffer);
   628e8:	00627e40 	call	627e4 <BLE_print_str>
	while(Timer_get_time(ble_uart -> timer) < 500);
   628ec:	81000a17 	ldw	r4,40(r16)
   628f0:	00646600 	call	64660 <Timer_get_time>
   628f4:	88bffd2e 	bgeu	r17,r2,628ec <__alt_data_end+0xfffee8ec>

}
   628f8:	dfc00d17 	ldw	ra,52(sp)
   628fc:	dc400c17 	ldw	r17,48(sp)
   62900:	dc000b17 	ldw	r16,44(sp)
   62904:	dec00e04 	addi	sp,sp,56
   62908:	f800283a 	ret

0006290c <parse_command>:
	BLE_COMMAND_RESET = 6
}BLE_console_command_t;

BLE_console_command_t parse_command(uint8_t* command){

	if(compare(command,(uint8_t*)"time\r\n",16)){
   6290c:	014001b4 	movhi	r5,6
	BLE_COMMAND_INFO = 4,
	BLE_COMMAND_RANGE = 5,
	BLE_COMMAND_RESET = 6
}BLE_console_command_t;

BLE_console_command_t parse_command(uint8_t* command){
   62910:	defffe04 	addi	sp,sp,-8

	if(compare(command,(uint8_t*)"time\r\n",16)){
   62914:	01800404 	movi	r6,16
   62918:	2953ae04 	addi	r5,r5,20152
	BLE_COMMAND_INFO = 4,
	BLE_COMMAND_RANGE = 5,
	BLE_COMMAND_RESET = 6
}BLE_console_command_t;

BLE_console_command_t parse_command(uint8_t* command){
   6291c:	dc000015 	stw	r16,0(sp)
   62920:	dfc00115 	stw	ra,4(sp)
   62924:	2021883a 	mov	r16,r4

	if(compare(command,(uint8_t*)"time\r\n",16)){
   62928:	00642d40 	call	642d4 <compare>
   6292c:	1000141e 	bne	r2,zero,62980 <parse_command+0x74>
		return BLE_COMMAND_TIME;
	}

	if(compare(command,(uint8_t*)"word\r\n",16)){
   62930:	014001b4 	movhi	r5,6
   62934:	01800404 	movi	r6,16
   62938:	2953b004 	addi	r5,r5,20160
   6293c:	8009883a 	mov	r4,r16
   62940:	00642d40 	call	642d4 <compare>
   62944:	1000101e 	bne	r2,zero,62988 <parse_command+0x7c>
		return BLE_COMMAND_WORD;
	}

	if(compare(command,(uint8_t*)"echo\r\n",16)){
   62948:	014001b4 	movhi	r5,6
   6294c:	01800404 	movi	r6,16
   62950:	2953b204 	addi	r5,r5,20168
   62954:	8009883a 	mov	r4,r16
   62958:	00642d40 	call	642d4 <compare>
   6295c:	10000c1e 	bne	r2,zero,62990 <parse_command+0x84>
		return BLE_COMMAND_ECHO;
	}

	if(compare(command,(uint8_t*)"inrange\r\n",16)){
   62960:	014001b4 	movhi	r5,6
   62964:	01800404 	movi	r6,16
   62968:	2953b404 	addi	r5,r5,20176
   6296c:	8009883a 	mov	r4,r16
   62970:	00642d40 	call	642d4 <compare>
   62974:	10000726 	beq	r2,zero,62994 <parse_command+0x88>
		return BLE_COMMAND_RANGE;
   62978:	00800144 	movi	r2,5
   6297c:	00000506 	br	62994 <parse_command+0x88>
}BLE_console_command_t;

BLE_console_command_t parse_command(uint8_t* command){

	if(compare(command,(uint8_t*)"time\r\n",16)){
		return BLE_COMMAND_TIME;
   62980:	00800044 	movi	r2,1
   62984:	00000306 	br	62994 <parse_command+0x88>
	}

	if(compare(command,(uint8_t*)"word\r\n",16)){
		return BLE_COMMAND_WORD;
   62988:	00800084 	movi	r2,2
   6298c:	00000106 	br	62994 <parse_command+0x88>
	}

	if(compare(command,(uint8_t*)"echo\r\n",16)){
		return BLE_COMMAND_ECHO;
   62990:	008000c4 	movi	r2,3
		return BLE_COMMAND_RANGE;
	}


	return BLE_COMMAND_ERROR;
}
   62994:	dfc00117 	ldw	ra,4(sp)
   62998:	dc000017 	ldw	r16,0(sp)
   6299c:	dec00204 	addi	sp,sp,8
   629a0:	f800283a 	ret

000629a4 <BLE_add_word>:

void BLE_add_word(BLE_console_t* console,uint8_t* word){
   629a4:	defffd04 	addi	sp,sp,-12
   629a8:	dc000015 	stw	r16,0(sp)
   629ac:	2021883a 	mov	r16,r4

	console -> word_time = Timer_get_datetime(console ->timer);
   629b0:	21000017 	ldw	r4,0(r4)


	return BLE_COMMAND_ERROR;
}

void BLE_add_word(BLE_console_t* console,uint8_t* word){
   629b4:	dfc00215 	stw	ra,8(sp)
   629b8:	dc400115 	stw	r17,4(sp)
   629bc:	2823883a 	mov	r17,r5

	console -> word_time = Timer_get_datetime(console ->timer);
   629c0:	00646040 	call	64604 <Timer_get_datetime>
	str_cpy(word, console ->word,16);
   629c4:	81400317 	ldw	r5,12(r16)
   629c8:	01800404 	movi	r6,16
   629cc:	8809883a 	mov	r4,r17
	return BLE_COMMAND_ERROR;
}

void BLE_add_word(BLE_console_t* console,uint8_t* word){

	console -> word_time = Timer_get_datetime(console ->timer);
   629d0:	80800415 	stw	r2,16(r16)
   629d4:	80c00515 	stw	r3,20(r16)
	str_cpy(word, console ->word,16);
   629d8:	00642980 	call	64298 <str_cpy>

	for(int n=0;n<15;n++){
   629dc:	0005883a 	mov	r2,zero
		if(console -> word[n] == 0){
			console -> word[n] = '\r';
   629e0:	01400344 	movi	r5,13
			console -> word[n] = '\n';
   629e4:	01800284 	movi	r6,10
void BLE_add_word(BLE_console_t* console,uint8_t* word){

	console -> word_time = Timer_get_datetime(console ->timer);
	str_cpy(word, console ->word,16);

	for(int n=0;n<15;n++){
   629e8:	010003c4 	movi	r4,15
		if(console -> word[n] == 0){
   629ec:	80c00317 	ldw	r3,12(r16)
   629f0:	1887883a 	add	r3,r3,r2
   629f4:	19c00003 	ldbu	r7,0(r3)
   629f8:	3800041e 	bne	r7,zero,62a0c <BLE_add_word+0x68>
			console -> word[n] = '\r';
   629fc:	19400005 	stb	r5,0(r3)
			console -> word[n] = '\n';
   62a00:	80c00317 	ldw	r3,12(r16)
   62a04:	1887883a 	add	r3,r3,r2
   62a08:	19800005 	stb	r6,0(r3)
void BLE_add_word(BLE_console_t* console,uint8_t* word){

	console -> word_time = Timer_get_datetime(console ->timer);
	str_cpy(word, console ->word,16);

	for(int n=0;n<15;n++){
   62a0c:	10800044 	addi	r2,r2,1
   62a10:	113ff61e 	bne	r2,r4,629ec <__alt_data_end+0xfffee9ec>
			console -> word[n] = '\r';
			console -> word[n] = '\n';
		}
	}

}
   62a14:	dfc00217 	ldw	ra,8(sp)
   62a18:	dc400117 	ldw	r17,4(sp)
   62a1c:	dc000017 	ldw	r16,0(sp)
   62a20:	dec00304 	addi	sp,sp,12
   62a24:	f800283a 	ret

00062a28 <BLE_console>:

void BLE_console(BLE_console_t* console){
   62a28:	defff604 	addi	sp,sp,-40
   62a2c:	dc000815 	stw	r16,32(sp)
   62a30:	2021883a 	mov	r16,r4
	uint8_t buffer[BUFFER_SIZE];
	BLE_read_status_t status = BLE_read_data(console -> buart,buffer,BUFFER_SIZE);
   62a34:	21000117 	ldw	r4,4(r4)
   62a38:	01800404 	movi	r6,16
   62a3c:	d98b883a 	add	r5,sp,r6
		}
	}

}

void BLE_console(BLE_console_t* console){
   62a40:	dfc00915 	stw	ra,36(sp)
	uint8_t buffer[BUFFER_SIZE];
	BLE_read_status_t status = BLE_read_data(console -> buart,buffer,BUFFER_SIZE);
   62a44:	006271c0 	call	6271c <BLE_read_data>

	if(status ==BLE_READ_OK){
   62a48:	1000741e 	bne	r2,zero,62c1c <BLE_console+0x1f4>

		BLE_console_command_t comm = parse_command(buffer);
   62a4c:	d9000404 	addi	r4,sp,16
   62a50:	006290c0 	call	6290c <parse_command>
		uint8_t buff[16];

		Datetime_t time;

		switch(comm){
   62a54:	10bfffc4 	addi	r2,r2,-1
   62a58:	00c00144 	movi	r3,5
   62a5c:	18806736 	bltu	r3,r2,62bfc <BLE_console+0x1d4>
   62a60:	100490ba 	slli	r2,r2,2
   62a64:	00c001b4 	movhi	r3,6
   62a68:	18ca9e04 	addi	r3,r3,10872
   62a6c:	10c5883a 	add	r2,r2,r3
   62a70:	10800017 	ldw	r2,0(r2)
   62a74:	1000683a 	jmp	r2
   62a78:	00062b64 	muli	zero,zero,6317
   62a7c:	00062a90 	cmplti	zero,zero,6314
   62a80:	00062be8 	cmpgeui	zero,zero,6319
   62a84:	00062bfc 	xorhi	zero,zero,6319
   62a88:	00062bc0 	call	62bc <__alt_mem_SysRAM-0x59d44>
   62a8c:	00062c1c 	xori	zero,zero,6320
			case BLE_COMMAND_WORD:

				if(console ->word_time != 0){
   62a90:	81400417 	ldw	r5,16(r16)
   62a94:	80800517 	ldw	r2,20(r16)
   62a98:	2884b03a 	or	r2,r5,r2
   62a9c:	10002c26 	beq	r2,zero,62b50 <BLE_console+0x128>
					uint8_t num_buff[10];

					snprintnum(num_buff,console ->word_time);
   62aa0:	d809883a 	mov	r4,sp
   62aa4:	00643c40 	call	643c4 <snprintnum>

					console -> buffer_out[0] = 32;
   62aa8:	80c00217 	ldw	r3,8(r16)
   62aac:	00800804 	movi	r2,32
   62ab0:	18800005 	stb	r2,0(r3)
					console -> buffer_out[1] = 32;
   62ab4:	80c00217 	ldw	r3,8(r16)
   62ab8:	18800045 	stb	r2,1(r3)
					console -> buffer_out[2] = 32;
   62abc:	80c00217 	ldw	r3,8(r16)
   62ac0:	18800085 	stb	r2,2(r3)
					console -> buffer_out[3] = '.';
   62ac4:	80800217 	ldw	r2,8(r16)
   62ac8:	00c00b84 	movi	r3,46
   62acc:	10c000c5 	stb	r3,3(r2)

					for(int n=0;n<10;n++)
   62ad0:	0005883a 	mov	r2,zero
   62ad4:	00c00284 	movi	r3,10
					{
						if(num_buff[n] == 0){
   62ad8:	d889883a 	add	r4,sp,r2
   62adc:	21000003 	ldbu	r4,0(r4)
   62ae0:	2000141e 	bne	r4,zero,62b34 <BLE_console+0x10c>
							n--;
   62ae4:	10ffffc4 	addi	r3,r2,-1
							if(n == -1){
   62ae8:	013fffc4 	movi	r4,-1
   62aec:	19001326 	beq	r3,r4,62b3c <BLE_console+0x114>
								break;
							}
							console -> buffer_out[2] = num_buff[n];
   62af0:	d8c7883a 	add	r3,sp,r3
   62af4:	18c00003 	ldbu	r3,0(r3)
   62af8:	81400217 	ldw	r5,8(r16)
   62afc:	28c00085 	stb	r3,2(r5)
							n--;
   62b00:	10ffff84 	addi	r3,r2,-2
							if(n == -1){
   62b04:	19000d26 	beq	r3,r4,62b3c <BLE_console+0x114>
								break;
							}
							console -> buffer_out[1] = num_buff[n];
   62b08:	d8c7883a 	add	r3,sp,r3
   62b0c:	81400217 	ldw	r5,8(r16)
   62b10:	18c00003 	ldbu	r3,0(r3)
							n--;
   62b14:	10bfff44 	addi	r2,r2,-3
							console -> buffer_out[2] = num_buff[n];
							n--;
							if(n == -1){
								break;
							}
							console -> buffer_out[1] = num_buff[n];
   62b18:	28c00045 	stb	r3,1(r5)
							n--;
							if(n == -1){
   62b1c:	11000726 	beq	r2,r4,62b3c <BLE_console+0x114>
								break;
							}
							console -> buffer_out[0] = num_buff[n];
   62b20:	d885883a 	add	r2,sp,r2
   62b24:	80c00217 	ldw	r3,8(r16)
   62b28:	10800003 	ldbu	r2,0(r2)
   62b2c:	18800005 	stb	r2,0(r3)
							break;
   62b30:	00000206 	br	62b3c <BLE_console+0x114>
					console -> buffer_out[0] = 32;
					console -> buffer_out[1] = 32;
					console -> buffer_out[2] = 32;
					console -> buffer_out[3] = '.';

					for(int n=0;n<10;n++)
   62b34:	10800044 	addi	r2,r2,1
   62b38:	10ffe71e 	bne	r2,r3,62ad8 <__alt_data_end+0xfffeead8>
						}

					}


					str_cpy(console ->word,&console -> buffer_out[4],12);
   62b3c:	81400217 	ldw	r5,8(r16)
   62b40:	01800304 	movi	r6,12
   62b44:	81000317 	ldw	r4,12(r16)
   62b48:	29400104 	addi	r5,r5,4
   62b4c:	00002f06 	br	62c0c <BLE_console+0x1e4>
					BLE_send_data(console -> buart,console ->buffer_out);
				}else{
					str_cpy((uint8_t*)"No detecion\r\n",console -> buffer_out,16);
   62b50:	010001b4 	movhi	r4,6
   62b54:	01800404 	movi	r6,16
   62b58:	81400217 	ldw	r5,8(r16)
   62b5c:	2113b704 	addi	r4,r4,20188
   62b60:	00002a06 	br	62c0c <BLE_console+0x1e4>
					BLE_send_data(console -> buart,console ->buffer_out);
				}
				break;
			case BLE_COMMAND_TIME:
				time = Timer_get_datetime(console -> timer);
   62b64:	81000017 	ldw	r4,0(r16)
   62b68:	00646040 	call	64604 <Timer_get_datetime>

				snprintnum(buff,time);
   62b6c:	100b883a 	mov	r5,r2
   62b70:	d809883a 	mov	r4,sp
   62b74:	00643c40 	call	643c4 <snprintnum>
				int index = 0;

				for(int n = 0 ; n < BUFFER_SIZE ; n++){
   62b78:	0005883a 	mov	r2,zero
   62b7c:	00c00404 	movi	r3,16
					if(buff[n] == 0){
   62b80:	d889883a 	add	r4,sp,r2
   62b84:	21000003 	ldbu	r4,0(r4)
   62b88:	20000326 	beq	r4,zero,62b98 <BLE_console+0x170>
				time = Timer_get_datetime(console -> timer);

				snprintnum(buff,time);
				int index = 0;

				for(int n = 0 ; n < BUFFER_SIZE ; n++){
   62b8c:	10800044 	addi	r2,r2,1
   62b90:	10fffb1e 	bne	r2,r3,62b80 <__alt_data_end+0xfffeeb80>
				break;
			case BLE_COMMAND_TIME:
				time = Timer_get_datetime(console -> timer);

				snprintnum(buff,time);
				int index = 0;
   62b94:	0005883a 	mov	r2,zero
						index = n;
						break;
					}
				}

				buff[index] = '\r';
   62b98:	d887883a 	add	r3,sp,r2
   62b9c:	01000344 	movi	r4,13
   62ba0:	19000005 	stb	r4,0(r3)
				buff[index + 1] = '\n';
   62ba4:	1805883a 	mov	r2,r3
   62ba8:	00c00284 	movi	r3,10
   62bac:	10c00045 	stb	r3,1(r2)

				str_cpy(buff,console -> buffer_out,16);
   62bb0:	01800404 	movi	r6,16
   62bb4:	81400217 	ldw	r5,8(r16)
   62bb8:	d809883a 	mov	r4,sp
   62bbc:	00001306 	br	62c0c <BLE_console+0x1e4>
				BLE_send_data(console -> buart,console ->buffer_out);

				break;
			case BLE_COMMAND_RANGE:
				if(console ->in_range){
   62bc0:	80800617 	ldw	r2,24(r16)
   62bc4:	81400217 	ldw	r5,8(r16)
					str_cpy((uint8_t*)"T\r\n",console -> buffer_out,16);
   62bc8:	01800404 	movi	r6,16
				str_cpy(buff,console -> buffer_out,16);
				BLE_send_data(console -> buart,console ->buffer_out);

				break;
			case BLE_COMMAND_RANGE:
				if(console ->in_range){
   62bcc:	10000326 	beq	r2,zero,62bdc <BLE_console+0x1b4>
					str_cpy((uint8_t*)"T\r\n",console -> buffer_out,16);
   62bd0:	010001b4 	movhi	r4,6
   62bd4:	2113bb04 	addi	r4,r4,20204
   62bd8:	00000c06 	br	62c0c <BLE_console+0x1e4>
				}else{
					str_cpy((uint8_t*)"N\r\n",console -> buffer_out,16);
   62bdc:	010001b4 	movhi	r4,6
   62be0:	2113bc04 	addi	r4,r4,20208
   62be4:	00000906 	br	62c0c <BLE_console+0x1e4>
				}
				BLE_send_data(console -> buart,console ->buffer_out);
				break;
			case BLE_COMMAND_ECHO:

				str_cpy((uint8_t*)"Echo\r\n",console -> buffer_out,16);
   62be8:	010001b4 	movhi	r4,6
   62bec:	01800404 	movi	r6,16
   62bf0:	81400217 	ldw	r5,8(r16)
   62bf4:	2113bd04 	addi	r4,r4,20212
   62bf8:	00000406 	br	62c0c <BLE_console+0x1e4>
				break;
			case BLE_COMMAND_RESET:
				break;
			default:

				str_cpy((uint8_t*)"Bad command\r\n",console -> buffer_out,16);
   62bfc:	81400217 	ldw	r5,8(r16)
   62c00:	010001b4 	movhi	r4,6
   62c04:	01800404 	movi	r6,16
   62c08:	2113bf04 	addi	r4,r4,20220
   62c0c:	00642980 	call	64298 <str_cpy>
				BLE_send_data(console -> buart,console ->buffer_out);
   62c10:	81400217 	ldw	r5,8(r16)
   62c14:	81000117 	ldw	r4,4(r16)
   62c18:	00626300 	call	62630 <BLE_send_data>
				break;
		}

	}

}
   62c1c:	dfc00917 	ldw	ra,36(sp)
   62c20:	dc000817 	ldw	r16,32(sp)
   62c24:	dec00a04 	addi	sp,sp,40
   62c28:	f800283a 	ret

00062c2c <startup_panic>:
#include "exceptions.h"
#include "./BLE/BLE.h"
#include "../utils/timer/timer.h"
#include "../utils/reset.h"

void startup_panic(volatile BLE_UART_t* buart,Gpio_distance_t* gpio ,Exceptions_t exception){
   62c2c:	defffd04 	addi	sp,sp,-12



	gpio_stop_flash(gpio);
   62c30:	2809883a 	mov	r4,r5
#include "exceptions.h"
#include "./BLE/BLE.h"
#include "../utils/timer/timer.h"
#include "../utils/reset.h"

void startup_panic(volatile BLE_UART_t* buart,Gpio_distance_t* gpio ,Exceptions_t exception){
   62c34:	dfc00215 	stw	ra,8(sp)
   62c38:	dc400115 	stw	r17,4(sp)
   62c3c:	dc000015 	stw	r16,0(sp)
   62c40:	3023883a 	mov	r17,r6
   62c44:	2821883a 	mov	r16,r5



	gpio_stop_flash(gpio);
   62c48:	00630d40 	call	630d4 <gpio_stop_flash>
	gpio_set_pin(gpio,GPIO_PIN_READY,GPIO_PIN_DOWN);
   62c4c:	000d883a 	mov	r6,zero
   62c50:	000b883a 	mov	r5,zero
   62c54:	8009883a 	mov	r4,r16
   62c58:	0062fb00 	call	62fb0 <gpio_set_pin>

	if(exception == PANIC_NO_DISK){
   62c5c:	00800044 	movi	r2,1
   62c60:	88800226 	beq	r17,r2,62c6c <startup_panic+0x40>
		gpio_flash_pin(gpio,GPIO_PIN_NO_DISK);
	}else if(exception == PANIC_FILE_ERROR){
   62c64:	00800084 	movi	r2,2
   62c68:	8880021e 	bne	r17,r2,62c74 <startup_panic+0x48>
		gpio_flash_pin(gpio,GPIO_PIN_DISK_ERROR);
   62c6c:	880b883a 	mov	r5,r17
   62c70:	00000106 	br	62c78 <startup_panic+0x4c>
	}else{
		gpio_flash_pin(gpio,GPIO_PIN_OTHER_ERROR);
   62c74:	014000c4 	movi	r5,3
   62c78:	8009883a 	mov	r4,r16
   62c7c:	00630100 	call	63010 <gpio_flash_pin>
	}

	while(1){
		Distance_button_t button = gpio_button_buffered_status(gpio);

		if(button == BUTTON_RESET){
   62c80:	044000c4 	movi	r17,3
	}else{
		gpio_flash_pin(gpio,GPIO_PIN_OTHER_ERROR);
	}

	while(1){
		Distance_button_t button = gpio_button_buffered_status(gpio);
   62c84:	8009883a 	mov	r4,r16
   62c88:	0062ecc0 	call	62ecc <gpio_button_buffered_status>

		if(button == BUTTON_RESET){
   62c8c:	147ffd1e 	bne	r2,r17,62c84 <__alt_data_end+0xfffeec84>
			break;
		}
	}
}
   62c90:	dfc00217 	ldw	ra,8(sp)
   62c94:	dc400117 	ldw	r17,4(sp)
   62c98:	dc000017 	ldw	r16,0(sp)
   62c9c:	dec00304 	addi	sp,sp,12
   62ca0:	f800283a 	ret

00062ca4 <panic>:


void panic(volatile BLE_UART_t* buart,Gpio_distance_t* gpio ,Exceptions_t exception){
   62ca4:	defffc04 	addi	sp,sp,-16
   62ca8:	dc800215 	stw	r18,8(sp)
   62cac:	2025883a 	mov	r18,r4



	gpio_stop_flash(gpio);
   62cb0:	2809883a 	mov	r4,r5
		}
	}
}


void panic(volatile BLE_UART_t* buart,Gpio_distance_t* gpio ,Exceptions_t exception){
   62cb4:	dfc00315 	stw	ra,12(sp)
   62cb8:	dc400115 	stw	r17,4(sp)
   62cbc:	dc000015 	stw	r16,0(sp)
   62cc0:	3023883a 	mov	r17,r6
   62cc4:	2821883a 	mov	r16,r5



	gpio_stop_flash(gpio);
   62cc8:	00630d40 	call	630d4 <gpio_stop_flash>
	gpio_set_pin(gpio,GPIO_PIN_READY,GPIO_PIN_DOWN);
   62ccc:	000d883a 	mov	r6,zero
   62cd0:	000b883a 	mov	r5,zero
   62cd4:	8009883a 	mov	r4,r16
   62cd8:	0062fb00 	call	62fb0 <gpio_set_pin>

	if(exception == PANIC_NO_DISK){
   62cdc:	00800044 	movi	r2,1
   62ce0:	8880061e 	bne	r17,r2,62cfc <panic+0x58>
		gpio_flash_pin(gpio,GPIO_PIN_NO_DISK);
   62ce4:	880b883a 	mov	r5,r17
   62ce8:	8009883a 	mov	r4,r16
   62cec:	00630100 	call	63010 <gpio_flash_pin>
		BLE_send_data(buart,(uint8_t*)"No disk in node\r\n");
   62cf0:	014001b4 	movhi	r5,6
   62cf4:	2953c304 	addi	r5,r5,20236
   62cf8:	00000d06 	br	62d30 <panic+0x8c>
	}else if(exception == PANIC_FILE_ERROR){
   62cfc:	00800084 	movi	r2,2
   62d00:	8880061e 	bne	r17,r2,62d1c <panic+0x78>
		gpio_flash_pin(gpio,GPIO_PIN_DISK_ERROR);
   62d04:	880b883a 	mov	r5,r17
   62d08:	8009883a 	mov	r4,r16
   62d0c:	00630100 	call	63010 <gpio_flash_pin>
		BLE_send_data(buart,(uint8_t*)"SD Storage error\r\n");
   62d10:	014001b4 	movhi	r5,6
   62d14:	2953c804 	addi	r5,r5,20256
   62d18:	00000506 	br	62d30 <panic+0x8c>
	}else{
		gpio_flash_pin(gpio,GPIO_PIN_OTHER_ERROR);
   62d1c:	014000c4 	movi	r5,3
   62d20:	8009883a 	mov	r4,r16
   62d24:	00630100 	call	63010 <gpio_flash_pin>
		BLE_send_data(buart,(uint8_t*)"Mic/Dist broken\r\n");
   62d28:	014001b4 	movhi	r5,6
   62d2c:	2953cd04 	addi	r5,r5,20276
   62d30:	9009883a 	mov	r4,r18
   62d34:	00626300 	call	62630 <BLE_send_data>
	}

	while(1){
		Distance_button_t button = gpio_button_buffered_status(gpio);

		if(button == BUTTON_RESET){
   62d38:	044000c4 	movi	r17,3
		gpio_flash_pin(gpio,GPIO_PIN_OTHER_ERROR);
		BLE_send_data(buart,(uint8_t*)"Mic/Dist broken\r\n");
	}

	while(1){
		Distance_button_t button = gpio_button_buffered_status(gpio);
   62d3c:	8009883a 	mov	r4,r16
   62d40:	0062ecc0 	call	62ecc <gpio_button_buffered_status>

		if(button == BUTTON_RESET){
   62d44:	147ffd1e 	bne	r2,r17,62d3c <__alt_data_end+0xfffeed3c>
			break;
		}
	}
}
   62d48:	dfc00317 	ldw	ra,12(sp)
   62d4c:	dc800217 	ldw	r18,8(sp)
   62d50:	dc400117 	ldw	r17,4(sp)
   62d54:	dc000017 	ldw	r16,0(sp)
   62d58:	dec00404 	addi	sp,sp,16
   62d5c:	f800283a 	ret

00062d60 <wait_for_connection>:

void wait_for_connection(volatile Device_tree_t* tree){
   62d60:	defffd04 	addi	sp,sp,-12
   62d64:	dc000015 	stw	r16,0(sp)
   62d68:	2021883a 	mov	r16,r4
	gpio_flash_pin(tree -> distancer,GPIO_PIN_READY);
   62d6c:	21000917 	ldw	r4,36(r4)
   62d70:	000b883a 	mov	r5,zero
			break;
		}
	}
}

void wait_for_connection(volatile Device_tree_t* tree){
   62d74:	dc400115 	stw	r17,4(sp)
   62d78:	dfc00215 	stw	ra,8(sp)
	gpio_flash_pin(tree -> distancer,GPIO_PIN_READY);

	Data_bool_t one_time = DATA_TRUE;
   62d7c:	04400044 	movi	r17,1
		}
	}
}

void wait_for_connection(volatile Device_tree_t* tree){
	gpio_flash_pin(tree -> distancer,GPIO_PIN_READY);
   62d80:	00630100 	call	63010 <gpio_flash_pin>

	Data_bool_t one_time = DATA_TRUE;
	while(1){
		if(Is_connected()){
   62d84:	00625e00 	call	625e0 <Is_connected>
   62d88:	1000021e 	bne	r2,zero,62d94 <wait_for_connection+0x34>
			break;
		}


		one_time = DATA_FALSE;
   62d8c:	0023883a 	mov	r17,zero
   62d90:	003ffc06 	br	62d84 <__alt_data_end+0xfffeed84>
	}


	if(one_time == DATA_FALSE){
   62d94:	88000a26 	beq	r17,zero,62dc0 <wait_for_connection+0x60>
		Timer_reset(tree -> timer);
		while(Timer_get_time(tree -> timer) < 1000);
	}

	gpio_stop_flash(tree -> distancer);
   62d98:	81000917 	ldw	r4,36(r16)
   62d9c:	00630d40 	call	630d4 <gpio_stop_flash>
	gpio_set_pin(tree -> distancer,GPIO_PIN_READY,GPIO_PIN_UP);
   62da0:	81000917 	ldw	r4,36(r16)
   62da4:	01800044 	movi	r6,1
   62da8:	000b883a 	mov	r5,zero
}
   62dac:	dfc00217 	ldw	ra,8(sp)
   62db0:	dc400117 	ldw	r17,4(sp)
   62db4:	dc000017 	ldw	r16,0(sp)
   62db8:	dec00304 	addi	sp,sp,12
		Timer_reset(tree -> timer);
		while(Timer_get_time(tree -> timer) < 1000);
	}

	gpio_stop_flash(tree -> distancer);
	gpio_set_pin(tree -> distancer,GPIO_PIN_READY,GPIO_PIN_UP);
   62dbc:	0062fb01 	jmpi	62fb0 <gpio_set_pin>
		one_time = DATA_FALSE;
	}


	if(one_time == DATA_FALSE){
		Timer_reset(tree -> timer);
   62dc0:	81000717 	ldw	r4,28(r16)
		while(Timer_get_time(tree -> timer) < 1000);
   62dc4:	0440f9c4 	movi	r17,999
		one_time = DATA_FALSE;
	}


	if(one_time == DATA_FALSE){
		Timer_reset(tree -> timer);
   62dc8:	00645c00 	call	645c0 <Timer_reset>
		while(Timer_get_time(tree -> timer) < 1000);
   62dcc:	81000717 	ldw	r4,28(r16)
   62dd0:	00646600 	call	64660 <Timer_get_time>
   62dd4:	88bffd2e 	bgeu	r17,r2,62dcc <__alt_data_end+0xfffeedcc>
   62dd8:	003fef06 	br	62d98 <__alt_data_end+0xfffeed98>

00062ddc <wait_for_connection_recorder>:

	gpio_stop_flash(tree -> distancer);
	gpio_set_pin(tree -> distancer,GPIO_PIN_READY,GPIO_PIN_UP);
}

Data_bool_t wait_for_connection_recorder(volatile Recorder_t* record){
   62ddc:	defffc04 	addi	sp,sp,-16
   62de0:	dc800215 	stw	r18,8(sp)
   62de4:	dc400115 	stw	r17,4(sp)
   62de8:	dc000015 	stw	r16,0(sp)
   62dec:	dfc00315 	stw	ra,12(sp)
   62df0:	2021883a 	mov	r16,r4

	Data_bool_t one_time = DATA_TRUE;
   62df4:	04400044 	movi	r17,1
		if(one_time)
			gpio_flash_pin(record -> gpio,GPIO_PIN_READY);

		Distance_button_t button = gpio_button_buffered_status(record ->gpio);

		if(button == BUTTON_RESET){
   62df8:	048000c4 	movi	r18,3

Data_bool_t wait_for_connection_recorder(volatile Recorder_t* record){

	Data_bool_t one_time = DATA_TRUE;
	while(1){
		if(Is_connected()){
   62dfc:	00625e00 	call	625e0 <Is_connected>
   62e00:	10000326 	beq	r2,zero,62e10 <wait_for_connection_recorder+0x34>

			if(one_time){
				return DATA_FALSE;
   62e04:	0005883a 	mov	r2,zero

	Data_bool_t one_time = DATA_TRUE;
	while(1){
		if(Is_connected()){

			if(one_time){
   62e08:	88000b26 	beq	r17,zero,62e38 <wait_for_connection_recorder+0x5c>
   62e0c:	00002106 	br	62e94 <wait_for_connection_recorder+0xb8>
			}

			break;
		}

		if(one_time)
   62e10:	88000326 	beq	r17,zero,62e20 <wait_for_connection_recorder+0x44>
			gpio_flash_pin(record -> gpio,GPIO_PIN_READY);
   62e14:	81000617 	ldw	r4,24(r16)
   62e18:	000b883a 	mov	r5,zero
   62e1c:	00630100 	call	63010 <gpio_flash_pin>

		Distance_button_t button = gpio_button_buffered_status(record ->gpio);
   62e20:	81000617 	ldw	r4,24(r16)

		if(button == BUTTON_RESET){
			return DATA_TRUE;
		}

		one_time = DATA_FALSE;
   62e24:	0023883a 	mov	r17,zero
		}

		if(one_time)
			gpio_flash_pin(record -> gpio,GPIO_PIN_READY);

		Distance_button_t button = gpio_button_buffered_status(record ->gpio);
   62e28:	0062ecc0 	call	62ecc <gpio_button_buffered_status>

		if(button == BUTTON_RESET){
   62e2c:	14bff31e 	bne	r2,r18,62dfc <__alt_data_end+0xfffeedfc>
			return DATA_TRUE;
   62e30:	00800044 	movi	r2,1
   62e34:	00001706 	br	62e94 <wait_for_connection_recorder+0xb8>
		one_time = DATA_FALSE;
	}



	for(int n=0;n < record ->memories ->table_size ; n++){
   62e38:	80c00117 	ldw	r3,4(r16)
   62e3c:	18c00317 	ldw	r3,12(r3)
   62e40:	10c0070e 	bge	r2,r3,62e60 <wait_for_connection_recorder+0x84>
		record ->memories ->table[n] = 0;
   62e44:	80c00117 	ldw	r3,4(r16)
   62e48:	19000017 	ldw	r4,0(r3)
   62e4c:	1087883a 	add	r3,r2,r2
		one_time = DATA_FALSE;
	}



	for(int n=0;n < record ->memories ->table_size ; n++){
   62e50:	10800044 	addi	r2,r2,1
		record ->memories ->table[n] = 0;
   62e54:	20c7883a 	add	r3,r4,r3
   62e58:	1800000d 	sth	zero,0(r3)
   62e5c:	003ff606 	br	62e38 <__alt_data_end+0xfffeee38>
	}

	if(one_time == DATA_FALSE){
		Timer_reset(record -> timer);
   62e60:	81000017 	ldw	r4,0(r16)
		while(Timer_get_time(record -> timer) < 900);
   62e64:	0440e0c4 	movi	r17,899
	for(int n=0;n < record ->memories ->table_size ; n++){
		record ->memories ->table[n] = 0;
	}

	if(one_time == DATA_FALSE){
		Timer_reset(record -> timer);
   62e68:	00645c00 	call	645c0 <Timer_reset>
		while(Timer_get_time(record -> timer) < 900);
   62e6c:	81000017 	ldw	r4,0(r16)
   62e70:	00646600 	call	64660 <Timer_get_time>
   62e74:	88bffd2e 	bgeu	r17,r2,62e6c <__alt_data_end+0xfffeee6c>
	}

	gpio_stop_flash(record -> gpio);
   62e78:	81000617 	ldw	r4,24(r16)
   62e7c:	00630d40 	call	630d4 <gpio_stop_flash>
	gpio_set_pin(record -> gpio,GPIO_PIN_READY,GPIO_PIN_UP);
   62e80:	81000617 	ldw	r4,24(r16)
   62e84:	01800044 	movi	r6,1
   62e88:	000b883a 	mov	r5,zero
   62e8c:	0062fb00 	call	62fb0 <gpio_set_pin>

	return DATA_FALSE;
   62e90:	0005883a 	mov	r2,zero
}
   62e94:	dfc00317 	ldw	ra,12(sp)
   62e98:	dc800217 	ldw	r18,8(sp)
   62e9c:	dc400117 	ldw	r17,4(sp)
   62ea0:	dc000017 	ldw	r16,0(sp)
   62ea4:	dec00404 	addi	sp,sp,16
   62ea8:	f800283a 	ret

00062eac <gpio_start_distance_measure>:
#define GPIO_DISTANCE_CHECK_DIST 		(volatile uint32_t*) 0x27008
#define GPIO_DISTANCE_BUTTON	 		(volatile uint32_t*) 0x2700c


void gpio_start_distance_measure(Gpio_pin_status_t status){
	*GPIO_DISTANCE_START_SIGNAL = status;
   62eac:	008000b4 	movhi	r2,2
   62eb0:	109c0004 	addi	r2,r2,28672
   62eb4:	11000015 	stw	r4,0(r2)
   62eb8:	f800283a 	ret

00062ebc <gpio_button_status>:
}

Distance_button_t gpio_button_status(){
	return *GPIO_DISTANCE_BUTTON;
   62ebc:	008000b4 	movhi	r2,2
   62ec0:	109c0304 	addi	r2,r2,28684
   62ec4:	10800017 	ldw	r2,0(r2)
}
   62ec8:	f800283a 	ret

00062ecc <gpio_button_buffered_status>:

Distance_button_t gpio_button_buffered_status(Gpio_distance_t* gpio){
   62ecc:	defffc04 	addi	sp,sp,-16
   62ed0:	dc400115 	stw	r17,4(sp)


	Distance_button_t button;

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62ed4:	04400044 	movi	r17,1

Distance_button_t gpio_button_status(){
	return *GPIO_DISTANCE_BUTTON;
}

Distance_button_t gpio_button_buffered_status(Gpio_distance_t* gpio){
   62ed8:	dc000015 	stw	r16,0(sp)


	Distance_button_t button;

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62edc:	880b883a 	mov	r5,r17

Distance_button_t gpio_button_status(){
	return *GPIO_DISTANCE_BUTTON;
}

Distance_button_t gpio_button_buffered_status(Gpio_distance_t* gpio){
   62ee0:	2021883a 	mov	r16,r4


	Distance_button_t button;

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62ee4:	0009883a 	mov	r4,zero

Distance_button_t gpio_button_status(){
	return *GPIO_DISTANCE_BUTTON;
}

Distance_button_t gpio_button_buffered_status(Gpio_distance_t* gpio){
   62ee8:	dc800215 	stw	r18,8(sp)
   62eec:	dfc00315 	stw	ra,12(sp)


	Distance_button_t button;

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62ef0:	00648ec0 	call	648ec <alt_ic_irq_disable>
	button = gpio -> button;
   62ef4:	84800717 	ldw	r18,28(r16)

	if(gpio -> button != BUTTON_PRESSED){
   62ef8:	80800717 	ldw	r2,28(r16)
   62efc:	14400126 	beq	r2,r17,62f04 <gpio_button_buffered_status+0x38>
		gpio -> button = BUTTON_NOT_PRESSED;
   62f00:	80000715 	stw	zero,28(r16)
	}

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62f04:	01400044 	movi	r5,1
   62f08:	0009883a 	mov	r4,zero
   62f0c:	00648b40 	call	648b4 <alt_ic_irq_enable>

	return button;
}
   62f10:	9005883a 	mov	r2,r18
   62f14:	dfc00317 	ldw	ra,12(sp)
   62f18:	dc800217 	ldw	r18,8(sp)
   62f1c:	dc400117 	ldw	r17,4(sp)
   62f20:	dc000017 	ldw	r16,0(sp)
   62f24:	dec00404 	addi	sp,sp,16
   62f28:	f800283a 	ret

00062f2c <gpio_distance_check>:

Gpio_pin_status_t gpio_distance_check(){
	return (Gpio_pin_status_t) *GPIO_DISTANCE_CHECK_DIST;
   62f2c:	008000b4 	movhi	r2,2
   62f30:	109c0204 	addi	r2,r2,28680
   62f34:	10800017 	ldw	r2,0(r2)
}
   62f38:	f800283a 	ret

00062f3c <gpio_set_pin_irq>:

void gpio_set_pin_irq(Gpio_distance_t* gpio, Gpio_pin_select_t select, Gpio_pin_status_t status){
   62f3c:	defffb04 	addi	sp,sp,-20
   62f40:	dc800215 	stw	r18,8(sp)

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62f44:	04800044 	movi	r18,1

Gpio_pin_status_t gpio_distance_check(){
	return (Gpio_pin_status_t) *GPIO_DISTANCE_CHECK_DIST;
}

void gpio_set_pin_irq(Gpio_distance_t* gpio, Gpio_pin_select_t select, Gpio_pin_status_t status){
   62f48:	dcc00315 	stw	r19,12(sp)
   62f4c:	dc400115 	stw	r17,4(sp)
   62f50:	2827883a 	mov	r19,r5
   62f54:	2023883a 	mov	r17,r4

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62f58:	900b883a 	mov	r5,r18
   62f5c:	0009883a 	mov	r4,zero

Gpio_pin_status_t gpio_distance_check(){
	return (Gpio_pin_status_t) *GPIO_DISTANCE_CHECK_DIST;
}

void gpio_set_pin_irq(Gpio_distance_t* gpio, Gpio_pin_select_t select, Gpio_pin_status_t status){
   62f60:	dfc00415 	stw	ra,16(sp)
   62f64:	dc000015 	stw	r16,0(sp)
   62f68:	3021883a 	mov	r16,r6

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62f6c:	00648ec0 	call	648ec <alt_ic_irq_disable>
	Gpio_distance_content_t content = gpio -> content;
   62f70:	88800017 	ldw	r2,0(r17)
	content = status << select;
   62f74:	84e0983a 	sll	r16,r16,r19

	*GPIO_DISTANCE_WRTIE = content;
   62f78:	008000b4 	movhi	r2,2
   62f7c:	109c0104 	addi	r2,r2,28676
   62f80:	14000015 	stw	r16,0(r2)
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62f84:	900b883a 	mov	r5,r18
   62f88:	0009883a 	mov	r4,zero
   62f8c:	00648b40 	call	648b4 <alt_ic_irq_enable>

	gpio -> content = content;
   62f90:	8c000015 	stw	r16,0(r17)
}
   62f94:	dfc00417 	ldw	ra,16(sp)
   62f98:	dcc00317 	ldw	r19,12(sp)
   62f9c:	dc800217 	ldw	r18,8(sp)
   62fa0:	dc400117 	ldw	r17,4(sp)
   62fa4:	dc000017 	ldw	r16,0(sp)
   62fa8:	dec00504 	addi	sp,sp,20
   62fac:	f800283a 	ret

00062fb0 <gpio_set_pin>:
void gpio_set_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select, Gpio_pin_status_t status){
   62fb0:	defffb04 	addi	sp,sp,-20
   62fb4:	dc000115 	stw	r16,4(sp)

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62fb8:	04000044 	movi	r16,1
	*GPIO_DISTANCE_WRTIE = content;
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);

	gpio -> content = content;
}
void gpio_set_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select, Gpio_pin_status_t status){
   62fbc:	dc800315 	stw	r18,12(sp)
   62fc0:	dc400215 	stw	r17,8(sp)
   62fc4:	2825883a 	mov	r18,r5
   62fc8:	2023883a 	mov	r17,r4

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62fcc:	800b883a 	mov	r5,r16
   62fd0:	0009883a 	mov	r4,zero
	*GPIO_DISTANCE_WRTIE = content;
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);

	gpio -> content = content;
}
void gpio_set_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select, Gpio_pin_status_t status){
   62fd4:	dfc00415 	stw	ra,16(sp)

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62fd8:	d9800015 	stw	r6,0(sp)
   62fdc:	00648ec0 	call	648ec <alt_ic_irq_disable>
	gpio_set_pin_irq(gpio,select, status);
   62fe0:	d9800017 	ldw	r6,0(sp)
   62fe4:	900b883a 	mov	r5,r18
   62fe8:	8809883a 	mov	r4,r17
   62fec:	0062f3c0 	call	62f3c <gpio_set_pin_irq>
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   62ff0:	800b883a 	mov	r5,r16
   62ff4:	0009883a 	mov	r4,zero
}
   62ff8:	dfc00417 	ldw	ra,16(sp)
   62ffc:	dc800317 	ldw	r18,12(sp)
   63000:	dc400217 	ldw	r17,8(sp)
   63004:	dc000117 	ldw	r16,4(sp)
   63008:	dec00504 	addi	sp,sp,20
}
void gpio_set_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select, Gpio_pin_status_t status){

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
	gpio_set_pin_irq(gpio,select, status);
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   6300c:	00648b41 	jmpi	648b4 <alt_ic_irq_enable>

00063010 <gpio_flash_pin>:
}

void gpio_flash_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select){
   63010:	defffc04 	addi	sp,sp,-16
   63014:	dc000015 	stw	r16,0(sp)
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63018:	04000044 	movi	r16,1
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
	gpio_set_pin_irq(gpio,select, status);
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

void gpio_flash_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select){
   6301c:	dc800215 	stw	r18,8(sp)
   63020:	dc400115 	stw	r17,4(sp)
   63024:	2825883a 	mov	r18,r5
   63028:	2023883a 	mov	r17,r4
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   6302c:	800b883a 	mov	r5,r16
   63030:	0009883a 	mov	r4,zero
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
	gpio_set_pin_irq(gpio,select, status);
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

void gpio_flash_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select){
   63034:	dfc00315 	stw	ra,12(sp)
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63038:	00648ec0 	call	648ec <alt_ic_irq_disable>

	gpio->last_pin = GPIO_PIN_DOWN;
   6303c:	88000415 	stw	zero,16(r17)
	gpio->flash_pin = select;
   63040:	8c800215 	stw	r18,8(r17)

	gpio->flashing = GPIO_FLASH;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63044:	800b883a 	mov	r5,r16
   63048:	0009883a 	mov	r4,zero
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);

	gpio->last_pin = GPIO_PIN_DOWN;
	gpio->flash_pin = select;

	gpio->flashing = GPIO_FLASH;
   6304c:	8c000115 	stw	r16,4(r17)

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}
   63050:	dfc00317 	ldw	ra,12(sp)
   63054:	dc800217 	ldw	r18,8(sp)
   63058:	dc400117 	ldw	r17,4(sp)
   6305c:	dc000017 	ldw	r16,0(sp)
   63060:	dec00404 	addi	sp,sp,16
	gpio->last_pin = GPIO_PIN_DOWN;
	gpio->flash_pin = select;

	gpio->flashing = GPIO_FLASH;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63064:	00648b41 	jmpi	648b4 <alt_ic_irq_enable>

00063068 <gpio_pulse_pin>:
}

void gpio_pulse_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select,Gpio_timer_t pulse_time){
   63068:	defffb04 	addi	sp,sp,-20
   6306c:	dc400115 	stw	r17,4(sp)
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63070:	04400044 	movi	r17,1
	gpio->flashing = GPIO_FLASH;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

void gpio_pulse_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select,Gpio_timer_t pulse_time){
   63074:	dc800215 	stw	r18,8(sp)
   63078:	dc000015 	stw	r16,0(sp)
   6307c:	2825883a 	mov	r18,r5
   63080:	2021883a 	mov	r16,r4
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63084:	880b883a 	mov	r5,r17
   63088:	0009883a 	mov	r4,zero
	gpio->flashing = GPIO_FLASH;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

void gpio_pulse_pin(Gpio_distance_t* gpio, Gpio_pin_select_t select,Gpio_timer_t pulse_time){
   6308c:	dcc00315 	stw	r19,12(sp)
   63090:	dfc00415 	stw	ra,16(sp)
   63094:	3027883a 	mov	r19,r6
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63098:	00648ec0 	call	648ec <alt_ic_irq_disable>

	gpio->last_pin = GPIO_PIN_DOWN;
   6309c:	80000415 	stw	zero,16(r16)
	gpio -> pulse_time = pulse_time;
   630a0:	84c00b15 	stw	r19,44(r16)
	gpio->flash_pin = select;
   630a4:	84800215 	stw	r18,8(r16)

	gpio->flashing = GPIO_PULSE;
   630a8:	00800084 	movi	r2,2

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   630ac:	880b883a 	mov	r5,r17
   630b0:	0009883a 	mov	r4,zero

	gpio->last_pin = GPIO_PIN_DOWN;
	gpio -> pulse_time = pulse_time;
	gpio->flash_pin = select;

	gpio->flashing = GPIO_PULSE;
   630b4:	80800115 	stw	r2,4(r16)

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}
   630b8:	dfc00417 	ldw	ra,16(sp)
   630bc:	dcc00317 	ldw	r19,12(sp)
   630c0:	dc800217 	ldw	r18,8(sp)
   630c4:	dc400117 	ldw	r17,4(sp)
   630c8:	dc000017 	ldw	r16,0(sp)
   630cc:	dec00504 	addi	sp,sp,20
	gpio -> pulse_time = pulse_time;
	gpio->flash_pin = select;

	gpio->flashing = GPIO_PULSE;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   630d0:	00648b41 	jmpi	648b4 <alt_ic_irq_enable>

000630d4 <gpio_stop_flash>:
}

void gpio_stop_flash(Gpio_distance_t* gpio){
   630d4:	defffd04 	addi	sp,sp,-12
   630d8:	dc000015 	stw	r16,0(sp)
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   630dc:	04000044 	movi	r16,1
	gpio->flashing = GPIO_PULSE;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

void gpio_stop_flash(Gpio_distance_t* gpio){
   630e0:	dc400115 	stw	r17,4(sp)
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   630e4:	800b883a 	mov	r5,r16
	gpio->flashing = GPIO_PULSE;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

void gpio_stop_flash(Gpio_distance_t* gpio){
   630e8:	2023883a 	mov	r17,r4
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   630ec:	0009883a 	mov	r4,zero
	gpio->flashing = GPIO_PULSE;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

void gpio_stop_flash(Gpio_distance_t* gpio){
   630f0:	dfc00215 	stw	ra,8(sp)
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   630f4:	00648ec0 	call	648ec <alt_ic_irq_disable>

	gpio->flashing= GPIO_NOT_FLASH;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   630f8:	800b883a 	mov	r5,r16
   630fc:	0009883a 	mov	r4,zero
}

void gpio_stop_flash(Gpio_distance_t* gpio){
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);

	gpio->flashing= GPIO_NOT_FLASH;
   63100:	88000115 	stw	zero,4(r17)

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}
   63104:	dfc00217 	ldw	ra,8(sp)
   63108:	dc400117 	ldw	r17,4(sp)
   6310c:	dc000017 	ldw	r16,0(sp)
   63110:	dec00304 	addi	sp,sp,12
void gpio_stop_flash(Gpio_distance_t* gpio){
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);

	gpio->flashing= GPIO_NOT_FLASH;

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63114:	00648b41 	jmpi	648b4 <alt_ic_irq_enable>

00063118 <person_detected>:
}


Gpio_distance_status_t person_detected(){
	if(*GPIO_DISTANCE_CHECK_DIST){
   63118:	008000b4 	movhi	r2,2
   6311c:	109c0204 	addi	r2,r2,28680
   63120:	10800017 	ldw	r2,0(r2)
		return GPIO_NOT_DETECTED;
	}else{
		return GPIO_DETECTED;
	}

}
   63124:	1005003a 	cmpeq	r2,r2,zero
   63128:	f800283a 	ret

0006312c <gpio_init>:

void gpio_init(Gpio_distance_t* gpio){
	gpio -> content = 0x0;
   6312c:	20000015 	stw	zero,0(r4)
	gpio -> time = 0;
   63130:	20000315 	stw	zero,12(r4)

	gpio->last_pin = GPIO_PIN_DOWN;
   63134:	20000415 	stw	zero,16(r4)
	gpio->flash_pin = GPIO_PIN_READY;
   63138:	20000215 	stw	zero,8(r4)

	gpio->flash_pin = GPIO_NOT_FLASH;
   6313c:	20000215 	stw	zero,8(r4)

	gpio ->press_time = 0;
   63140:	20000515 	stw	zero,20(r4)
	gpio -> button = BUTTON_NOT_PRESSED;
   63144:	20000715 	stw	zero,28(r4)
	gpio -> last_button = BUTTON_NOT_PRESSED;
   63148:	20000615 	stw	zero,24(r4)

	gpio -> press_time_v = 0;
   6314c:	20000815 	stw	zero,32(r4)

	gpio -> last_vbutton = BUTTON_NOT_PRESSED;
   63150:	20000915 	stw	zero,36(r4)
	gpio -> vbutton = BUTTON_NOT_PRESSED;

	*GPIO_DISTANCE_START_SIGNAL = 1;
   63154:	008000b4 	movhi	r2,2
	gpio -> last_button = BUTTON_NOT_PRESSED;

	gpio -> press_time_v = 0;

	gpio -> last_vbutton = BUTTON_NOT_PRESSED;
	gpio -> vbutton = BUTTON_NOT_PRESSED;
   63158:	20000a15 	stw	zero,40(r4)

	*GPIO_DISTANCE_START_SIGNAL = 1;
   6315c:	109c0004 	addi	r2,r2,28672
   63160:	00c00044 	movi	r3,1
   63164:	10c00015 	stw	r3,0(r2)
	*GPIO_DISTANCE_WRTIE = 0;
   63168:	008000b4 	movhi	r2,2
   6316c:	109c0104 	addi	r2,r2,28676
   63170:	10000015 	stw	zero,0(r2)
   63174:	f800283a 	ret

00063178 <init_measurement>:
#define MIN_DEBOUNCER							8

#define MAX_MEASURE_RETRIES						16
void init_measurement(Gpio_distance_measure_t* measure){

	measure -> counter = 0;
   63178:	20000115 	stw	zero,4(r4)
	measure -> counter_start = 0;
   6317c:	20000215 	stw	zero,8(r4)
	measure -> distance = 0;
   63180:	20000315 	stw	zero,12(r4)

	measure -> retries = 0;
   63184:	20000515 	stw	zero,20(r4)

	measure ->ready = GPIO_MEAS_NOT_READY;
   63188:	20000415 	stw	zero,16(r4)
	measure ->tries = 0;
   6318c:	20000015 	stw	zero,0(r4)
   63190:	f800283a 	ret

00063194 <irq_distance_measurement>:

}

void irq_distance_measurement(Gpio_distance_measure_t* measure){

	measure ->tries ++;
   63194:	20800017 	ldw	r2,0(r4)


	if(measure ->tries == MAX_MEASURE_DISTANCE){
   63198:	00c02004 	movi	r3,128

}

void irq_distance_measurement(Gpio_distance_measure_t* measure){

	measure ->tries ++;
   6319c:	10800044 	addi	r2,r2,1
   631a0:	20800015 	stw	r2,0(r4)


	if(measure ->tries == MAX_MEASURE_DISTANCE){
   631a4:	10c0091e 	bne	r2,r3,631cc <irq_distance_measurement+0x38>

		if(measure -> counter_start == 0x0){
   631a8:	20800217 	ldw	r2,8(r4)
   631ac:	1000021e 	bne	r2,zero,631b8 <irq_distance_measurement+0x24>
			measure -> ready = GPIO_MEAS_ERROR;
   631b0:	00800084 	movi	r2,2
   631b4:	20800415 	stw	r2,16(r4)
		}

		measure -> tries = 0;
   631b8:	20000015 	stw	zero,0(r4)
		measure -> counter = 0;
   631bc:	20000115 	stw	zero,4(r4)
		measure -> counter_start = 0;
   631c0:	20000215 	stw	zero,8(r4)

		gpio_start_distance_measure(GPIO_PIN_UP);
   631c4:	01000044 	movi	r4,1
   631c8:	0062eac1 	jmpi	62eac <gpio_start_distance_measure>
	measure ->ready = GPIO_MEAS_NOT_READY;
	measure ->tries = 0;

}

void irq_distance_measurement(Gpio_distance_measure_t* measure){
   631cc:	defffe04 	addi	sp,sp,-8
   631d0:	dc000015 	stw	r16,0(sp)
   631d4:	2021883a 	mov	r16,r4
		measure -> counter = 0;
		measure -> counter_start = 0;

		gpio_start_distance_measure(GPIO_PIN_UP);
	}else{
		gpio_start_distance_measure(GPIO_PIN_DOWN);
   631d8:	0009883a 	mov	r4,zero
	measure ->ready = GPIO_MEAS_NOT_READY;
	measure ->tries = 0;

}

void irq_distance_measurement(Gpio_distance_measure_t* measure){
   631dc:	dfc00115 	stw	ra,4(sp)
		measure -> counter = 0;
		measure -> counter_start = 0;

		gpio_start_distance_measure(GPIO_PIN_UP);
	}else{
		gpio_start_distance_measure(GPIO_PIN_DOWN);
   631e0:	0062eac0 	call	62eac <gpio_start_distance_measure>


			if(gpio_distance_check()){
   631e4:	0062f2c0 	call	62f2c <gpio_distance_check>
   631e8:	80c00117 	ldw	r3,4(r16)
   631ec:	10000626 	beq	r2,zero,63208 <irq_distance_measurement+0x74>
				if(measure -> counter == 0){
   631f0:	1800021e 	bne	r3,zero,631fc <irq_distance_measurement+0x68>
					measure -> counter_start =measure -> tries;
   631f4:	80800017 	ldw	r2,0(r16)
   631f8:	80800215 	stw	r2,8(r16)
				}
				measure -> counter ++;
   631fc:	18c00044 	addi	r3,r3,1
   63200:	80c00115 	stw	r3,4(r16)
   63204:	00001506 	br	6325c <irq_distance_measurement+0xc8>
			}else{
				if(measure -> counter != 0){
   63208:	18001326 	beq	r3,zero,63258 <irq_distance_measurement+0xc4>

					if(measure -> counter_start == 0x1 || measure -> counter_start == 0x18){
   6320c:	81000217 	ldw	r4,8(r16)
   63210:	00800044 	movi	r2,1
   63214:	20800226 	beq	r4,r2,63220 <irq_distance_measurement+0x8c>
   63218:	01400604 	movi	r5,24
   6321c:	2140071e 	bne	r4,r5,6323c <irq_distance_measurement+0xa8>
						if(measure -> ready != GPIO_MEAS_ERROR){
   63220:	81400417 	ldw	r5,16(r16)
   63224:	01000084 	movi	r4,2
   63228:	29000226 	beq	r5,r4,63234 <irq_distance_measurement+0xa0>
							measure ->ready = GPIO_MEAS_READY;
   6322c:	80800415 	stw	r2,16(r16)
							measure ->distance = measure -> counter;
   63230:	80c00315 	stw	r3,12(r16)
						}

						measure -> retries = 0;
   63234:	80000515 	stw	zero,20(r16)
   63238:	00000706 	br	63258 <irq_distance_measurement+0xc4>
					}else{
						measure -> retries ++;
   6323c:	80800517 	ldw	r2,20(r16)

						if(measure -> retries == MAX_MEASURE_RETRIES){
   63240:	00c00404 	movi	r3,16
							measure ->distance = measure -> counter;
						}

						measure -> retries = 0;
					}else{
						measure -> retries ++;
   63244:	10800044 	addi	r2,r2,1
   63248:	80800515 	stw	r2,20(r16)

						if(measure -> retries == MAX_MEASURE_RETRIES){
   6324c:	10c0021e 	bne	r2,r3,63258 <irq_distance_measurement+0xc4>
							measure -> ready = GPIO_MEAS_ERROR;
   63250:	00800084 	movi	r2,2
   63254:	80800415 	stw	r2,16(r16)
						}
					}

				}
				measure -> counter = 0;
   63258:	80000115 	stw	zero,4(r16)
			}


	}

}
   6325c:	dfc00117 	ldw	ra,4(sp)
   63260:	dc000017 	ldw	r16,0(sp)
   63264:	dec00204 	addi	sp,sp,8
   63268:	f800283a 	ret

0006326c <distance_measurement>:

Gpio_measure_status_t distance_measurement(Gpio_distance_measure_t* measure,Distance_t* value){
   6326c:	defffb04 	addi	sp,sp,-20
   63270:	dc400115 	stw	r17,4(sp)

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63274:	04400044 	movi	r17,1

	}

}

Gpio_measure_status_t distance_measurement(Gpio_distance_measure_t* measure,Distance_t* value){
   63278:	dcc00315 	stw	r19,12(sp)
   6327c:	dc800215 	stw	r18,8(sp)
   63280:	2827883a 	mov	r19,r5
   63284:	2025883a 	mov	r18,r4

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63288:	880b883a 	mov	r5,r17
   6328c:	0009883a 	mov	r4,zero

	}

}

Gpio_measure_status_t distance_measurement(Gpio_distance_measure_t* measure,Distance_t* value){
   63290:	dc000015 	stw	r16,0(sp)
   63294:	dfc00415 	stw	ra,16(sp)

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   63298:	00648ec0 	call	648ec <alt_ic_irq_disable>

	if(measure -> ready == GPIO_MEAS_READY){
   6329c:	94000417 	ldw	r16,16(r18)
   632a0:	8440061e 	bne	r16,r17,632bc <distance_measurement+0x50>
		*value = measure -> distance;
   632a4:	90800317 	ldw	r2,12(r18)
		alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
		return GPIO_MEAS_ERROR;

	}

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   632a8:	800b883a 	mov	r5,r16
   632ac:	0009883a 	mov	r4,zero
Gpio_measure_status_t distance_measurement(Gpio_distance_measure_t* measure,Distance_t* value){

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);

	if(measure -> ready == GPIO_MEAS_READY){
		*value = measure -> distance;
   632b0:	98800015 	stw	r2,0(r19)
		measure -> ready = GPIO_MEAS_NOT_READY;
   632b4:	90000415 	stw	zero,16(r18)
   632b8:	00000306 	br	632c8 <distance_measurement+0x5c>

	}else if(measure -> ready == GPIO_MEAS_NOT_READY){
		alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   632bc:	880b883a 	mov	r5,r17
   632c0:	0009883a 	mov	r4,zero

	if(measure -> ready == GPIO_MEAS_READY){
		*value = measure -> distance;
		measure -> ready = GPIO_MEAS_NOT_READY;

	}else if(measure -> ready == GPIO_MEAS_NOT_READY){
   632c4:	8000021e 	bne	r16,zero,632d0 <distance_measurement+0x64>
		alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   632c8:	00648b40 	call	648b4 <alt_ic_irq_enable>
		return GPIO_MEAS_NOT_READY;
   632cc:	00000206 	br	632d8 <distance_measurement+0x6c>
	}else{
		alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   632d0:	00648b40 	call	648b4 <alt_ic_irq_enable>
		return GPIO_MEAS_ERROR;
   632d4:	04000084 	movi	r16,2

	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);


	return GPIO_MEAS_READY;
}
   632d8:	8005883a 	mov	r2,r16
   632dc:	dfc00417 	ldw	ra,16(sp)
   632e0:	dcc00317 	ldw	r19,12(sp)
   632e4:	dc800217 	ldw	r18,8(sp)
   632e8:	dc400117 	ldw	r17,4(sp)
   632ec:	dc000017 	ldw	r16,0(sp)
   632f0:	dec00504 	addi	sp,sp,20
   632f4:	f800283a 	ret

000632f8 <init_distance_measurement>:

void init_distance_measurement(Distance_measurement_t* meas){
	meas ->deb_counter = 0;
   632f8:	20000015 	stw	zero,0(r4)
	meas ->proper_distance = DATA_FALSE;
   632fc:	20000115 	stw	zero,4(r4)
   63300:	f800283a 	ret

00063304 <in_proper_distance>:
}

Gpio_detection_status_t in_proper_distance(Gpio_distance_measure_t* measure,Distance_measurement_t* meas){
   63304:	defffd04 	addi	sp,sp,-12
   63308:	dc000115 	stw	r16,4(sp)
   6330c:	2821883a 	mov	r16,r5

	Distance_t distance = 0;
	Gpio_measure_status_t status = distance_measurement(measure,&distance);
   63310:	d80b883a 	mov	r5,sp
void init_distance_measurement(Distance_measurement_t* meas){
	meas ->deb_counter = 0;
	meas ->proper_distance = DATA_FALSE;
}

Gpio_detection_status_t in_proper_distance(Gpio_distance_measure_t* measure,Distance_measurement_t* meas){
   63314:	dfc00215 	stw	ra,8(sp)

	Distance_t distance = 0;
   63318:	d8000015 	stw	zero,0(sp)
	Gpio_measure_status_t status = distance_measurement(measure,&distance);
   6331c:	006326c0 	call	6326c <distance_measurement>

	if(status == GPIO_MEAS_ERROR){
   63320:	00c00084 	movi	r3,2
   63324:	10c01b26 	beq	r2,r3,63394 <in_proper_distance+0x90>
		return GPIO_DETECT_ERROR;
	}

	if(status == GPIO_MEAS_READY){
   63328:	01000044 	movi	r4,1
   6332c:	1100131e 	bne	r2,r4,6337c <in_proper_distance+0x78>
		if(distance <= MAX_DISTANCE && distance >= MIN_DISTANCE){
   63330:	d8800017 	ldw	r2,0(sp)
   63334:	00c01004 	movi	r3,64
   63338:	10bffe44 	addi	r2,r2,-7
   6333c:	18800236 	bltu	r3,r2,63348 <in_proper_distance+0x44>

			meas -> deb_counter = MAX_DEBOUNCER;
   63340:	80c00015 	stw	r3,0(r16)
   63344:	00000406 	br	63358 <in_proper_distance+0x54>

		}else{
			if(meas -> deb_counter > 0){
   63348:	80800017 	ldw	r2,0(r16)
   6334c:	10000226 	beq	r2,zero,63358 <in_proper_distance+0x54>
				meas -> deb_counter --;
   63350:	10bfffc4 	addi	r2,r2,-1
   63354:	80800015 	stw	r2,0(r16)
			}
		}

		if(meas -> deb_counter > MIN_DEBOUNCER){
   63358:	80c00017 	ldw	r3,0(r16)
   6335c:	01000204 	movi	r4,8
   63360:	00800044 	movi	r2,1
   63364:	20c0032e 	bgeu	r4,r3,63374 <in_proper_distance+0x70>

			meas ->proper_distance = DATA_TRUE;
   63368:	80800115 	stw	r2,4(r16)
			return GPIO_DETECT_IN_RANGE;
   6336c:	0005883a 	mov	r2,zero
   63370:	00000806 	br	63394 <in_proper_distance+0x90>
		}else{
			meas ->proper_distance = DATA_FALSE;
   63374:	80000115 	stw	zero,4(r16)
			return GPIO_DETECT_NOT_IN_RANGE;
   63378:	00000606 	br	63394 <in_proper_distance+0x90>
		}



	}else if(status == GPIO_MEAS_NOT_READY){
   6337c:	1000031e 	bne	r2,zero,6338c <in_proper_distance+0x88>

	Distance_t distance = 0;
	Gpio_measure_status_t status = distance_measurement(measure,&distance);

	if(status == GPIO_MEAS_ERROR){
		return GPIO_DETECT_ERROR;
   63380:	80800117 	ldw	r2,4(r16)
   63384:	1005003a 	cmpeq	r2,r2,zero
   63388:	00000206 	br	63394 <in_proper_distance+0x90>
		}else{
			return GPIO_DETECT_NOT_IN_RANGE;
		}
	}

	meas ->proper_distance = DATA_FALSE;
   6338c:	80000115 	stw	zero,4(r16)
	return GPIO_DETECT_ERROR;
   63390:	1805883a 	mov	r2,r3

}
   63394:	dfc00217 	ldw	ra,8(sp)
   63398:	dc000117 	ldw	r16,4(sp)
   6339c:	dec00304 	addi	sp,sp,12
   633a0:	f800283a 	ret

000633a4 <do_button>:
#define MAX_TIME_PULSE 		(Gpio_timer_t) 16

#define WAIT_FOR_BUTTON_CHECK 			   50
#define WAIT_FOR_BUTTON_CHECK_VOLUMER 	   500

void do_button(Gpio_distance_t* gpio){
   633a4:	defffe04 	addi	sp,sp,-8
   633a8:	dc000015 	stw	r16,0(sp)
   633ac:	dfc00115 	stw	ra,4(sp)
   633b0:	2021883a 	mov	r16,r4

	Distance_button_t button = gpio_button_status() & 0x1;
   633b4:	0062ebc0 	call	62ebc <gpio_button_status>
   633b8:	1080004c 	andi	r2,r2,1

	if(button == BUTTON_PRESSED && gpio -> last_button == BUTTON_NOT_PRESSED){
   633bc:	10000326 	beq	r2,zero,633cc <do_button+0x28>
   633c0:	80c00617 	ldw	r3,24(r16)
   633c4:	1800011e 	bne	r3,zero,633cc <do_button+0x28>
		gpio -> press_time  = 1;
   633c8:	80800515 	stw	r2,20(r16)
	}

	if(gpio -> press_time > 0){
   633cc:	80c00517 	ldw	r3,20(r16)
   633d0:	18001a26 	beq	r3,zero,6343c <do_button+0x98>
		gpio -> press_time ++;
   633d4:	80c00517 	ldw	r3,20(r16)

		if(gpio -> press_time == WAIT_FOR_BUTTON_CHECK){
   633d8:	01000c84 	movi	r4,50
	if(button == BUTTON_PRESSED && gpio -> last_button == BUTTON_NOT_PRESSED){
		gpio -> press_time  = 1;
	}

	if(gpio -> press_time > 0){
		gpio -> press_time ++;
   633dc:	18c00044 	addi	r3,r3,1
   633e0:	80c00515 	stw	r3,20(r16)

		if(gpio -> press_time == WAIT_FOR_BUTTON_CHECK){
   633e4:	81400517 	ldw	r5,20(r16)
   633e8:	00c00044 	movi	r3,1
   633ec:	2900061e 	bne	r5,r4,63408 <do_button+0x64>

			if(button == BUTTON_PRESSED && gpio -> last_button == BUTTON_PRESSED){
   633f0:	10c0041e 	bne	r2,r3,63404 <do_button+0x60>
   633f4:	81000617 	ldw	r4,24(r16)
   633f8:	2080021e 	bne	r4,r2,63404 <do_button+0x60>
				gpio -> button = BUTTON_PRESSED;
   633fc:	80800715 	stw	r2,28(r16)
   63400:	00000106 	br	63408 <do_button+0x64>
			}else{
				gpio -> press_time  = 0;
   63404:	80000515 	stw	zero,20(r16)
			}
		}

		if(gpio -> button == BUTTON_PRESSED){
   63408:	81000717 	ldw	r4,28(r16)
   6340c:	20c00b1e 	bne	r4,r3,6343c <do_button+0x98>
			if(gpio -> press_time == WAIT_FOR_BUTTON_CHECK_VOLUMER){
   63410:	81400517 	ldw	r5,20(r16)
   63414:	01007d04 	movi	r4,500
   63418:	2900081e 	bne	r5,r4,6343c <do_button+0x98>

				if(button == BUTTON_PRESSED && gpio -> last_button == BUTTON_PRESSED){
   6341c:	10c0041e 	bne	r2,r3,63430 <do_button+0x8c>
   63420:	80c00617 	ldw	r3,24(r16)
   63424:	1880021e 	bne	r3,r2,63430 <do_button+0x8c>
					gpio -> button = BUTTON_RESET;
   63428:	00c000c4 	movi	r3,3
   6342c:	00000106 	br	63434 <do_button+0x90>
				}else{
					gpio -> button = BUTTON_LISTEN;
   63430:	00c00084 	movi	r3,2
   63434:	80c00715 	stw	r3,28(r16)
				}

				gpio -> press_time  = 0;
   63438:	80000515 	stw	zero,20(r16)

			}
		}
	}

	gpio -> last_button = button;
   6343c:	80800615 	stw	r2,24(r16)
}
   63440:	dfc00117 	ldw	ra,4(sp)
   63444:	dc000017 	ldw	r16,0(sp)
   63448:	dec00204 	addi	sp,sp,8
   6344c:	f800283a 	ret

00063450 <do_vbutton>:

void do_vbutton(Gpio_distance_t* gpio){
   63450:	defffe04 	addi	sp,sp,-8
   63454:	dc000015 	stw	r16,0(sp)
   63458:	dfc00115 	stw	ra,4(sp)
   6345c:	2021883a 	mov	r16,r4

	Distance_button_t vbutton = (gpio_button_status() >> 1) & 0x1;
   63460:	0062ebc0 	call	62ebc <gpio_button_status>
   63464:	1004d07a 	srli	r2,r2,1
   63468:	1080004c 	andi	r2,r2,1

	if(vbutton == BUTTON_PRESSED && gpio -> last_vbutton ==  BUTTON_NOT_PRESSED){
   6346c:	10000326 	beq	r2,zero,6347c <do_vbutton+0x2c>
   63470:	80c00917 	ldw	r3,36(r16)
   63474:	1800011e 	bne	r3,zero,6347c <do_vbutton+0x2c>
		gpio -> press_time_v = 1;
   63478:	80800815 	stw	r2,32(r16)
	}

	if(gpio -> press_time_v > 0){
   6347c:	80c00817 	ldw	r3,32(r16)
   63480:	18000c26 	beq	r3,zero,634b4 <do_vbutton+0x64>
		gpio -> press_time_v ++;
   63484:	80c00817 	ldw	r3,32(r16)
   63488:	18c00044 	addi	r3,r3,1
   6348c:	80c00815 	stw	r3,32(r16)

		if(gpio -> press_time_v == WAIT_FOR_BUTTON_CHECK){
   63490:	81000817 	ldw	r4,32(r16)
   63494:	00c00c84 	movi	r3,50
   63498:	20c0061e 	bne	r4,r3,634b4 <do_vbutton+0x64>

			if(vbutton == BUTTON_PRESSED && gpio -> last_vbutton == BUTTON_PRESSED){
   6349c:	10000426 	beq	r2,zero,634b0 <do_vbutton+0x60>
   634a0:	80c00917 	ldw	r3,36(r16)
   634a4:	1880021e 	bne	r3,r2,634b0 <do_vbutton+0x60>
				gpio -> button = BUTTON_VOLUME;
   634a8:	00c00104 	movi	r3,4
   634ac:	80c00715 	stw	r3,28(r16)
			}

			gpio -> press_time_v = 0;
   634b0:	80000815 	stw	zero,32(r16)
		}
	}

	gpio -> last_vbutton = vbutton;
   634b4:	80800915 	stw	r2,36(r16)

}
   634b8:	dfc00117 	ldw	ra,4(sp)
   634bc:	dc000017 	ldw	r16,0(sp)
   634c0:	dec00204 	addi	sp,sp,8
   634c4:	f800283a 	ret

000634c8 <animate_pulse>:

void animate_pulse(Gpio_distance_t* gpio){
	if(gpio ->flashing == GPIO_FLASH){
   634c8:	20c00117 	ldw	r3,4(r4)
   634cc:	00800044 	movi	r2,1
   634d0:	18801a1e 	bne	r3,r2,6353c <animate_pulse+0x74>

		if(gpio -> time == MAX_TIME_CYCLE){
   634d4:	20c00317 	ldw	r3,12(r4)
   634d8:	00801904 	movi	r2,100
   634dc:	1880011e 	bne	r3,r2,634e4 <animate_pulse+0x1c>
			gpio ->time = 0;
   634e0:	20000315 	stw	zero,12(r4)
		}

		if(gpio -> time == 0){
   634e4:	20800317 	ldw	r2,12(r4)
   634e8:	1000141e 	bne	r2,zero,6353c <animate_pulse+0x74>
			if(gpio -> last_pin == GPIO_PIN_DOWN){
   634ec:	20800417 	ldw	r2,16(r4)

	gpio -> last_vbutton = vbutton;

}

void animate_pulse(Gpio_distance_t* gpio){
   634f0:	defffd04 	addi	sp,sp,-12
			gpio ->time = 0;
		}

		if(gpio -> time == 0){
			if(gpio -> last_pin == GPIO_PIN_DOWN){
				gpio_set_pin_irq(gpio, (Gpio_pin_select_t) gpio ->flash_pin ,GPIO_PIN_UP);
   634f4:	21400217 	ldw	r5,8(r4)

	gpio -> last_vbutton = vbutton;

}

void animate_pulse(Gpio_distance_t* gpio){
   634f8:	dc000015 	stw	r16,0(sp)
   634fc:	dfc00215 	stw	ra,8(sp)
   63500:	dc400115 	stw	r17,4(sp)
   63504:	2021883a 	mov	r16,r4
		if(gpio -> time == MAX_TIME_CYCLE){
			gpio ->time = 0;
		}

		if(gpio -> time == 0){
			if(gpio -> last_pin == GPIO_PIN_DOWN){
   63508:	1000051e 	bne	r2,zero,63520 <animate_pulse+0x58>
				gpio_set_pin_irq(gpio, (Gpio_pin_select_t) gpio ->flash_pin ,GPIO_PIN_UP);
   6350c:	04400044 	movi	r17,1
   63510:	880d883a 	mov	r6,r17
   63514:	0062f3c0 	call	62f3c <gpio_set_pin_irq>
				gpio -> last_pin = GPIO_PIN_UP;
   63518:	84400415 	stw	r17,16(r16)
   6351c:	00000306 	br	6352c <animate_pulse+0x64>
			}else{
				gpio_set_pin_irq(gpio, (Gpio_pin_select_t) gpio ->flash_pin ,GPIO_PIN_DOWN);
   63520:	000d883a 	mov	r6,zero
   63524:	0062f3c0 	call	62f3c <gpio_set_pin_irq>
				gpio -> last_pin = GPIO_PIN_DOWN;
   63528:	80000415 	stw	zero,16(r16)
			}
		}
	}
}
   6352c:	dfc00217 	ldw	ra,8(sp)
   63530:	dc400117 	ldw	r17,4(sp)
   63534:	dc000017 	ldw	r16,0(sp)
   63538:	dec00304 	addi	sp,sp,12
   6353c:	f800283a 	ret

00063540 <animate_flash>:

void animate_flash(Gpio_distance_t* gpio){
	if(gpio -> flashing == GPIO_PULSE){
   63540:	20c00117 	ldw	r3,4(r4)
   63544:	00800084 	movi	r2,2
   63548:	1880211e 	bne	r3,r2,635d0 <animate_flash+0x90>

		if(gpio -> time == MAX_TIME_PULSE){
   6354c:	20c00317 	ldw	r3,12(r4)
			}
		}
	}
}

void animate_flash(Gpio_distance_t* gpio){
   63550:	defffe04 	addi	sp,sp,-8
   63554:	dc000015 	stw	r16,0(sp)
   63558:	dfc00115 	stw	ra,4(sp)
	if(gpio -> flashing == GPIO_PULSE){

		if(gpio -> time == MAX_TIME_PULSE){
   6355c:	00800404 	movi	r2,16
   63560:	2021883a 	mov	r16,r4
   63564:	18800c1e 	bne	r3,r2,63598 <animate_flash+0x58>
			gpio -> time = 0;
   63568:	20000315 	stw	zero,12(r4)

			gpio -> pulse_time ++;
   6356c:	20800b17 	ldw	r2,44(r4)
			if(gpio -> pulse_time >= MAX_TIME_PULSE << 2){
   63570:	00c00fc4 	movi	r3,63
	if(gpio -> flashing == GPIO_PULSE){

		if(gpio -> time == MAX_TIME_PULSE){
			gpio -> time = 0;

			gpio -> pulse_time ++;
   63574:	10800044 	addi	r2,r2,1
   63578:	20800b15 	stw	r2,44(r4)
			if(gpio -> pulse_time >= MAX_TIME_PULSE << 2){
   6357c:	20800b17 	ldw	r2,44(r4)
   63580:	1880012e 	bgeu	r3,r2,63588 <animate_flash+0x48>
				gpio -> pulse_time = 0;
   63584:	20000b15 	stw	zero,44(r4)
			}

			gpio_set_pin_irq(gpio, (Gpio_pin_select_t) gpio ->flash_pin ,GPIO_PIN_UP);
   63588:	81400217 	ldw	r5,8(r16)
   6358c:	01800044 	movi	r6,1
   63590:	8009883a 	mov	r4,r16
   63594:	0062f3c0 	call	62f3c <gpio_set_pin_irq>
		}


		if(gpio -> time == (gpio -> pulse_time >> 2)){
   63598:	80c00317 	ldw	r3,12(r16)
   6359c:	80800b17 	ldw	r2,44(r16)
   635a0:	1004d0ba 	srli	r2,r2,2
   635a4:	1880071e 	bne	r3,r2,635c4 <animate_flash+0x84>
			gpio_set_pin_irq(gpio, (Gpio_pin_select_t) gpio ->flash_pin ,GPIO_PIN_DOWN);
   635a8:	81400217 	ldw	r5,8(r16)
   635ac:	000d883a 	mov	r6,zero
   635b0:	8009883a 	mov	r4,r16

		}
	}
}
   635b4:	dfc00117 	ldw	ra,4(sp)
   635b8:	dc000017 	ldw	r16,0(sp)
   635bc:	dec00204 	addi	sp,sp,8
			gpio_set_pin_irq(gpio, (Gpio_pin_select_t) gpio ->flash_pin ,GPIO_PIN_UP);
		}


		if(gpio -> time == (gpio -> pulse_time >> 2)){
			gpio_set_pin_irq(gpio, (Gpio_pin_select_t) gpio ->flash_pin ,GPIO_PIN_DOWN);
   635c0:	0062f3c1 	jmpi	62f3c <gpio_set_pin_irq>

		}
	}
}
   635c4:	dfc00117 	ldw	ra,4(sp)
   635c8:	dc000017 	ldw	r16,0(sp)
   635cc:	dec00204 	addi	sp,sp,8
   635d0:	f800283a 	ret

000635d4 <animate_gpio_status>:

void animate_gpio_status(Gpio_distance_t* gpio,Gpio_timer_t time){



	switch(time){
   635d4:	00800104 	movi	r2,4
   635d8:	11401b36 	bltu	r2,r5,63648 <animate_gpio_status+0x74>
   635dc:	280a90ba 	slli	r5,r5,2
   635e0:	008001b4 	movhi	r2,6
   635e4:	108d7d04 	addi	r2,r2,13812
   635e8:	288b883a 	add	r5,r5,r2
   635ec:	28800017 	ldw	r2,0(r5)
   635f0:	1000683a 	jmp	r2
   635f4:	00063608 	cmpgei	zero,zero,6360
   635f8:	00063638 	rdprs	zero,zero,6360
   635fc:	0006363c 	xorhi	zero,zero,6360
   63600:	00063640 	call	6364 <__alt_mem_SysRAM-0x59c9c>
   63604:	00063644 	movi	zero,6361
		case 0:
			if(gpio ->flashing == GPIO_FLASH || gpio ->flashing == GPIO_PULSE){
   63608:	20c00117 	ldw	r3,4(r4)
   6360c:	00800044 	movi	r2,1
   63610:	18800326 	beq	r3,r2,63620 <animate_gpio_status+0x4c>
   63614:	20c00117 	ldw	r3,4(r4)
   63618:	00800084 	movi	r2,2
   6361c:	1880041e 	bne	r3,r2,63630 <animate_gpio_status+0x5c>
				gpio -> time ++;
   63620:	20800317 	ldw	r2,12(r4)
   63624:	10800044 	addi	r2,r2,1
   63628:	20800315 	stw	r2,12(r4)
   6362c:	f800283a 	ret
			}else{
				gpio ->time  = 0;
   63630:	20000315 	stw	zero,12(r4)
   63634:	f800283a 	ret
			}
			break;
		case 1:
			animate_pulse(gpio);
   63638:	00634c81 	jmpi	634c8 <animate_pulse>
			break;
		case 2:
			animate_flash(gpio);
   6363c:	00635401 	jmpi	63540 <animate_flash>
			break;
		case 3:
			do_vbutton(gpio);
   63640:	00634501 	jmpi	63450 <do_vbutton>
			break;
		case 4:
			do_button(gpio);
   63644:	00633a41 	jmpi	633a4 <do_button>
   63648:	f800283a 	ret

0006364c <nor_isr>:
volatile int nor_flag = 0;

static void nor_isr(void* context){

	Normaliser_t* normaliser = (Normaliser_t*) context;
	normaliser -> flag = NORMALISATION_FLAG_UP;
   6364c:	00800044 	movi	r2,1
   63650:	20800015 	stw	r2,0(r4)
	*NORMALIZER_IRQ = 0;
   63654:	008000b4 	movhi	r2,2
   63658:	10940004 	addi	r2,r2,20480
   6365c:	10000015 	stw	zero,0(r2)
   63660:	f800283a 	ret

00063664 <Nor_normalizeSamples>:

void Nor_normalizeSamples(volatile Normaliser_t* normaliser,volatile DMA_memories_t* memories){

	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	*NORMALIZER_MAX_VAL = MASK_SAMPLE;
   63664:	008000b4 	movhi	r2,2
	*NORMALIZER_IRQ = 0;
}

void Nor_normalizeSamples(volatile Normaliser_t* normaliser,volatile DMA_memories_t* memories){

	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;
   63668:	29800017 	ldw	r6,0(r5)

	*NORMALIZER_MAX_VAL = MASK_SAMPLE;
   6366c:	00c07fc4 	movi	r3,511
   63670:	10940104 	addi	r2,r2,20484
   63674:	10c00015 	stw	r3,0(r2)
	*NORMALIZER_START_ADDR = (uint32_t) &table[0];
   63678:	008000b4 	movhi	r2,2
   6367c:	10940204 	addi	r2,r2,20488
   63680:	11800015 	stw	r6,0(r2)
	*NORMALIZER_STOP_ADDR = (uint32_t) &table[(memories ->table_size) - 4];
   63684:	28800317 	ldw	r2,12(r5)
   63688:	00c000b4 	movhi	r3,2
   6368c:	18d40304 	addi	r3,r3,20492
   63690:	1085883a 	add	r2,r2,r2
   63694:	10bffe04 	addi	r2,r2,-8
   63698:	3085883a 	add	r2,r6,r2
   6369c:	18800015 	stw	r2,0(r3)
	*NORMALIZER_LOGNOR = 0;
   636a0:	008000b4 	movhi	r2,2
   636a4:	10940504 	addi	r2,r2,20500
   636a8:	10000015 	stw	zero,0(r2)

	for(uint32_t n=((memories ->table_size) - EMPTY_SPACE_END_OF_TABLE);
   636ac:	28800317 	ldw	r2,12(r5)
   636b0:	10bfe704 	addi	r2,r2,-100
   636b4:	1087883a 	add	r3,r2,r2
   636b8:	30c7883a 	add	r3,r6,r3
			n<(memories ->table_size);n++){
   636bc:	29800317 	ldw	r6,12(r5)
	*NORMALIZER_MAX_VAL = MASK_SAMPLE;
	*NORMALIZER_START_ADDR = (uint32_t) &table[0];
	*NORMALIZER_STOP_ADDR = (uint32_t) &table[(memories ->table_size) - 4];
	*NORMALIZER_LOGNOR = 0;

	for(uint32_t n=((memories ->table_size) - EMPTY_SPACE_END_OF_TABLE);
   636c0:	1180042e 	bgeu	r2,r6,636d4 <Nor_normalizeSamples+0x70>
			n<(memories ->table_size);n++){
		table[n] = 0;
   636c4:	1800000d 	sth	zero,0(r3)
	*NORMALIZER_START_ADDR = (uint32_t) &table[0];
	*NORMALIZER_STOP_ADDR = (uint32_t) &table[(memories ->table_size) - 4];
	*NORMALIZER_LOGNOR = 0;

	for(uint32_t n=((memories ->table_size) - EMPTY_SPACE_END_OF_TABLE);
			n<(memories ->table_size);n++){
   636c8:	10800044 	addi	r2,r2,1
   636cc:	18c00084 	addi	r3,r3,2
   636d0:	003ffa06 	br	636bc <__alt_data_end+0xfffef6bc>
		table[n] = 0;
	}

	normaliser -> flag = NORMALISATION_FLAG_DOWN;
	*NORMALIZER_START = 1;
   636d4:	008000b4 	movhi	r2,2
	for(uint32_t n=((memories ->table_size) - EMPTY_SPACE_END_OF_TABLE);
			n<(memories ->table_size);n++){
		table[n] = 0;
	}

	normaliser -> flag = NORMALISATION_FLAG_DOWN;
   636d8:	20000015 	stw	zero,0(r4)
	*NORMALIZER_START = 1;
   636dc:	00c00044 	movi	r3,1
   636e0:	10940404 	addi	r2,r2,20496
   636e4:	10c00015 	stw	r3,0(r2)
	while(normaliser -> flag == NORMALISATION_FLAG_DOWN){}
   636e8:	20800017 	ldw	r2,0(r4)
   636ec:	103ffe26 	beq	r2,zero,636e8 <__alt_data_end+0xfffef6e8>
}
   636f0:	f800283a 	ret

000636f4 <Nor_log_normalisation>:
void Nor_log_normalisation(volatile Normaliser_t* normaliser,volatile DMA_memories_t* memories,
		DMA_table_mem_t* stop_ptr){

	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	*NORMALIZER_MAX_VAL = MASK_SPECTROGRAM;
   636f4:	008000b4 	movhi	r2,2
}

void Nor_log_normalisation(volatile Normaliser_t* normaliser,volatile DMA_memories_t* memories,
		DMA_table_mem_t* stop_ptr){

	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;
   636f8:	28c00017 	ldw	r3,0(r5)

	*NORMALIZER_MAX_VAL = MASK_SPECTROGRAM;
   636fc:	10940104 	addi	r2,r2,20484
   63700:	017fffd4 	movui	r5,65535
   63704:	11400015 	stw	r5,0(r2)
	*NORMALIZER_START_ADDR = (uint32_t) &table[0];
   63708:	008000b4 	movhi	r2,2
   6370c:	10940204 	addi	r2,r2,20488
   63710:	10c00015 	stw	r3,0(r2)
	*NORMALIZER_STOP_ADDR = (uint32_t) stop_ptr;
   63714:	008000b4 	movhi	r2,2
   63718:	10940304 	addi	r2,r2,20492
	*NORMALIZER_LOGNOR = 1;
   6371c:	00c000b4 	movhi	r3,2

	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	*NORMALIZER_MAX_VAL = MASK_SPECTROGRAM;
	*NORMALIZER_START_ADDR = (uint32_t) &table[0];
	*NORMALIZER_STOP_ADDR = (uint32_t) stop_ptr;
   63720:	11800015 	stw	r6,0(r2)
	*NORMALIZER_LOGNOR = 1;
   63724:	18d40504 	addi	r3,r3,20500
   63728:	00800044 	movi	r2,1
   6372c:	18800015 	stw	r2,0(r3)
	*NORMALIZER_AREAS = (  64 << 16 ) | (256);
   63730:	01401034 	movhi	r5,64
   63734:	00c000b4 	movhi	r3,2
   63738:	18d40604 	addi	r3,r3,20504
   6373c:	29404004 	addi	r5,r5,256
   63740:	19400015 	stw	r5,0(r3)

	normaliser -> flag = NORMALISATION_FLAG_DOWN;
	*NORMALIZER_START = 1;
   63744:	00c000b4 	movhi	r3,2
	*NORMALIZER_START_ADDR = (uint32_t) &table[0];
	*NORMALIZER_STOP_ADDR = (uint32_t) stop_ptr;
	*NORMALIZER_LOGNOR = 1;
	*NORMALIZER_AREAS = (  64 << 16 ) | (256);

	normaliser -> flag = NORMALISATION_FLAG_DOWN;
   63748:	20000015 	stw	zero,0(r4)
	*NORMALIZER_START = 1;
   6374c:	18d40404 	addi	r3,r3,20496
   63750:	18800015 	stw	r2,0(r3)
	while(normaliser -> flag == NORMALISATION_FLAG_DOWN){}
   63754:	20800017 	ldw	r2,0(r4)
   63758:	103ffe26 	beq	r2,zero,63754 <__alt_data_end+0xfffef754>
}
   6375c:	f800283a 	ret

00063760 <Nor_init>:


void Nor_init(volatile Normaliser_t* normaliser){
   63760:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(NORMALIZER_0_IRQ_INTERRUPT_CONTROLLER_ID, NORMALIZER_0_IRQ, nor_isr, (Normaliser_t*)normaliser, 0);
   63764:	018001b4 	movhi	r6,6
   63768:	200f883a 	mov	r7,r4
   6376c:	d8000015 	stw	zero,0(sp)
   63770:	318d9304 	addi	r6,r6,13900
   63774:	01400104 	movi	r5,4
   63778:	0009883a 	mov	r4,zero
	*NORMALIZER_START = 1;
	while(normaliser -> flag == NORMALISATION_FLAG_DOWN){}
}


void Nor_init(volatile Normaliser_t* normaliser){
   6377c:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(NORMALIZER_0_IRQ_INTERRUPT_CONTROLLER_ID, NORMALIZER_0_IRQ, nor_isr, (Normaliser_t*)normaliser, 0);
   63780:	00648b00 	call	648b0 <alt_ic_isr_register>
}
   63784:	dfc00117 	ldw	ra,4(sp)
   63788:	dec00204 	addi	sp,sp,8
   6378c:	f800283a 	ret

00063790 <sig_isr>:
volatile int sig_flag = 0;

static void sig_isr (void * context){

	Spectrogramer_t* spectrogramer = (Spectrogramer_t*) context;
	spectrogramer ->flag = SPECTROGRAM_FLAG_UP;
   63790:	20000015 	stw	zero,0(r4)

	*SIGNAL_IRQ_RET = 0;
   63794:	008000f4 	movhi	r2,3
   63798:	10000015 	stw	zero,0(r2)
   6379c:	f800283a 	ret

000637a0 <Signal_spectrogram>:
}

DMA_size_t Signal_spectrogram(volatile Spectrogramer_t* spectrogramer,int len){
   637a0:	defff904 	addi	sp,sp,-28
   637a4:	dc000015 	stw	r16,0(sp)
   637a8:	2021883a 	mov	r16,r4

	DMA_size_t height = 0;
	DMA_size_t mlen = 0;
	Timer_reset(spectrogramer-> timer);
   637ac:	21000317 	ldw	r4,12(r4)
	spectrogramer ->flag = SPECTROGRAM_FLAG_UP;

	*SIGNAL_IRQ_RET = 0;
}

DMA_size_t Signal_spectrogram(volatile Spectrogramer_t* spectrogramer,int len){
   637b0:	dd400515 	stw	r21,20(sp)
   637b4:	dd000415 	stw	r20,16(sp)
   637b8:	dcc00315 	stw	r19,12(sp)
   637bc:	dc800215 	stw	r18,8(sp)
   637c0:	dc400115 	stw	r17,4(sp)
   637c4:	282b883a 	mov	r21,r5
   637c8:	dfc00615 	stw	ra,24(sp)

	DMA_size_t height = 0;
	DMA_size_t mlen = 0;
	Timer_reset(spectrogramer-> timer);
   637cc:	00645c00 	call	645c0 <Timer_reset>



	DMA_memories_t* memories = (DMA_memories_t*) spectrogramer -> memories;
   637d0:	84c00117 	ldw	r19,4(r16)
	Normaliser_t* normaliser = (Normaliser_t*) spectrogramer -> normaliser;
   637d4:	85000217 	ldw	r20,8(r16)
	uint32_t* read_ptr = (uint32_t*) &table[0];
	uint32_t* write_ptr = (uint32_t*) &table[0];

	for(int n=0;n<len;n+=512){

		*SIGNAL_READ_ADDR = (uint32_t) read_ptr;
   637d8:	014000f4 	movhi	r5,3


	DMA_memories_t* memories = (DMA_memories_t*) spectrogramer -> memories;
	Normaliser_t* normaliser = (Normaliser_t*) spectrogramer -> normaliser;

	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;
   637dc:	99800017 	ldw	r6,0(r19)
	uint32_t* write_ptr = (uint32_t*) &table[0];

	for(int n=0;n<len;n+=512){

		*SIGNAL_READ_ADDR = (uint32_t) read_ptr;
		*SIGNAL_WRITE_ADDR = (uint32_t) write_ptr;
   637e0:	01c000f4 	movhi	r7,3

		spectrogramer ->flag = SPECTROGRAM_FLAG_DOWN;
   637e4:	00c00044 	movi	r3,1
		*SIGNAL_START = 1;
   637e8:	020000f4 	movhi	r8,3
	Normaliser_t* normaliser = (Normaliser_t*) spectrogramer -> normaliser;

	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	uint32_t* read_ptr = (uint32_t*) &table[0];
	uint32_t* write_ptr = (uint32_t*) &table[0];
   637ec:	3025883a 	mov	r18,r6

	for(int n=0;n<len;n+=512){
   637f0:	0005883a 	mov	r2,zero
}

DMA_size_t Signal_spectrogram(volatile Spectrogramer_t* spectrogramer,int len){

	DMA_size_t height = 0;
	DMA_size_t mlen = 0;
   637f4:	0023883a 	mov	r17,zero
	uint32_t* read_ptr = (uint32_t*) &table[0];
	uint32_t* write_ptr = (uint32_t*) &table[0];

	for(int n=0;n<len;n+=512){

		*SIGNAL_READ_ADDR = (uint32_t) read_ptr;
   637f8:	29400104 	addi	r5,r5,4
		*SIGNAL_WRITE_ADDR = (uint32_t) write_ptr;
   637fc:	39c00204 	addi	r7,r7,8

		spectrogramer ->flag = SPECTROGRAM_FLAG_DOWN;
		*SIGNAL_START = 1;
   63800:	42000304 	addi	r8,r8,12
   63804:	1813883a 	mov	r9,r3

		mlen += 320;

		height ++;

		if(mlen >= MAX_RANGE){
   63808:	02977004 	movi	r10,24000
	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	uint32_t* read_ptr = (uint32_t*) &table[0];
	uint32_t* write_ptr = (uint32_t*) &table[0];

	for(int n=0;n<len;n+=512){
   6380c:	15400d0e 	bge	r2,r21,63844 <Signal_spectrogram+0xa4>
   63810:	1089883a 	add	r4,r2,r2
   63814:	3109883a 	add	r4,r6,r4

		*SIGNAL_READ_ADDR = (uint32_t) read_ptr;
   63818:	29000015 	stw	r4,0(r5)
		*SIGNAL_WRITE_ADDR = (uint32_t) write_ptr;
   6381c:	3c800015 	stw	r18,0(r7)

		spectrogramer ->flag = SPECTROGRAM_FLAG_DOWN;
   63820:	80c00015 	stw	r3,0(r16)
		*SIGNAL_START = 1;
   63824:	40c00015 	stw	r3,0(r8)
		while(spectrogramer ->flag == SPECTROGRAM_FLAG_DOWN){}
   63828:	81000017 	ldw	r4,0(r16)
   6382c:	227ffe26 	beq	r4,r9,63828 <__alt_data_end+0xfffef828>

		read_ptr += 256;
		write_ptr += 160;

		mlen += 320;
   63830:	8c405004 	addi	r17,r17,320
		spectrogramer ->flag = SPECTROGRAM_FLAG_DOWN;
		*SIGNAL_START = 1;
		while(spectrogramer ->flag == SPECTROGRAM_FLAG_DOWN){}

		read_ptr += 256;
		write_ptr += 160;
   63834:	9480a004 	addi	r18,r18,640

		mlen += 320;

		height ++;

		if(mlen >= MAX_RANGE){
   63838:	8a800226 	beq	r17,r10,63844 <Signal_spectrogram+0xa4>
	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	uint32_t* read_ptr = (uint32_t*) &table[0];
	uint32_t* write_ptr = (uint32_t*) &table[0];

	for(int n=0;n<len;n+=512){
   6383c:	10808004 	addi	r2,r2,512
   63840:	003ff206 	br	6380c <__alt_data_end+0xfffef80c>
		if(mlen >= MAX_RANGE){
			break;
		}
	}

	alt_printf("Profile time: ");
   63844:	010001b4 	movhi	r4,6
   63848:	2113d204 	addi	r4,r4,20296
   6384c:	0064ab00 	call	64ab0 <alt_printf>
	printnum(Timer_get_time(spectrogramer-> timer));
   63850:	81000317 	ldw	r4,12(r16)
   63854:	00646600 	call	64660 <Timer_get_time>
   63858:	1009883a 	mov	r4,r2
   6385c:	00643080 	call	64308 <printnum>
	alt_printf(" ms \n");
   63860:	010001b4 	movhi	r4,6
   63864:	21136e04 	addi	r4,r4,19896
   63868:	0064ab00 	call	64ab0 <alt_printf>

	Timer_reset(spectrogramer-> timer);
   6386c:	81000317 	ldw	r4,12(r16)
   63870:	00645c00 	call	645c0 <Timer_reset>

	Nor_log_normalisation(normaliser,memories,(DMA_table_mem_t*)write_ptr);
   63874:	900d883a 	mov	r6,r18
   63878:	980b883a 	mov	r5,r19
   6387c:	a009883a 	mov	r4,r20
   63880:	00636f40 	call	636f4 <Nor_log_normalisation>

	alt_printf("Normalization time: ");
   63884:	010001b4 	movhi	r4,6
   63888:	2113d604 	addi	r4,r4,20312
   6388c:	0064ab00 	call	64ab0 <alt_printf>
	printnum(Timer_get_time(spectrogramer-> timer));
   63890:	81000317 	ldw	r4,12(r16)
   63894:	00646600 	call	64660 <Timer_get_time>
   63898:	1009883a 	mov	r4,r2
   6389c:	00643080 	call	64308 <printnum>
	alt_printf(" ms \n");
   638a0:	010001b4 	movhi	r4,6
   638a4:	21136e04 	addi	r4,r4,19896
   638a8:	0064ab00 	call	64ab0 <alt_printf>

	return mlen;
}
   638ac:	8805883a 	mov	r2,r17
   638b0:	dfc00617 	ldw	ra,24(sp)
   638b4:	dd400517 	ldw	r21,20(sp)
   638b8:	dd000417 	ldw	r20,16(sp)
   638bc:	dcc00317 	ldw	r19,12(sp)
   638c0:	dc800217 	ldw	r18,8(sp)
   638c4:	dc400117 	ldw	r17,4(sp)
   638c8:	dc000017 	ldw	r16,0(sp)
   638cc:	dec00704 	addi	sp,sp,28
   638d0:	f800283a 	ret

000638d4 <Signal_init>:

void Signal_init(volatile Spectrogramer_t* spectrogramer){
   638d4:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(SIGNAL_PROCESSOR_0_IRQ_INTERRUPT_CONTROLLER_ID, SIGNAL_PROCESSOR_0_IRQ,
   638d8:	018001b4 	movhi	r6,6
   638dc:	200f883a 	mov	r7,r4
   638e0:	d8000015 	stw	zero,0(sp)
   638e4:	318de404 	addi	r6,r6,14224
   638e8:	01400144 	movi	r5,5
   638ec:	0009883a 	mov	r4,zero
	alt_printf(" ms \n");

	return mlen;
}

void Signal_init(volatile Spectrogramer_t* spectrogramer){
   638f0:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(SIGNAL_PROCESSOR_0_IRQ_INTERRUPT_CONTROLLER_ID, SIGNAL_PROCESSOR_0_IRQ,
   638f4:	00648b00 	call	648b0 <alt_ic_isr_register>
			sig_isr, (Spectrogramer_t*) spectrogramer, 0);
}
   638f8:	dfc00117 	ldw	ra,4(sp)
   638fc:	dec00204 	addi	sp,sp,8
   63900:	f800283a 	ret

00063904 <selectLoud>:
#define FFT_SIZE				 512

Loud_fragment_status_t selectLoud(volatile DMA_memories_t* memories,DMA_size_t* select_size,
		DMA_size_t len){

	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;
   63904:	22400017 	ldw	r9,0(r4)

#define ROUND_TO_FOUR (uint32_t) 0xFFFFFFFC
#define FFT_SIZE				 512

Loud_fragment_status_t selectLoud(volatile DMA_memories_t* memories,DMA_size_t* select_size,
		DMA_size_t len){
   63908:	defffb04 	addi	sp,sp,-20
	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	DMA_size_t start = 0;
	DMA_size_t stop = 0;

	DMA_size_t lena = DETECT_NO_DETECT;
   6390c:	00bfffc4 	movi	r2,-1

#define ROUND_TO_FOUR (uint32_t) 0xFFFFFFFC
#define FFT_SIZE				 512

Loud_fragment_status_t selectLoud(volatile DMA_memories_t* memories,DMA_size_t* select_size,
		DMA_size_t len){
   63910:	dc000015 	stw	r16,0(sp)
   63914:	dfc00415 	stw	ra,16(sp)
   63918:	dcc00315 	stw	r19,12(sp)
   6391c:	dc800215 	stw	r18,8(sp)
   63920:	dc400115 	stw	r17,4(sp)
	DMA_size_t lena = DETECT_NO_DETECT;
	DMA_size_t lenb = 0;

	DMA_size_t sector_512_c = 0;

	for(DMA_size_t n=0;n<MAX_RANGE;n++){
   63924:	0007883a 	mov	r3,zero
	DMA_size_t stop = 0;

	DMA_size_t lena = DETECT_NO_DETECT;
	DMA_size_t lenb = 0;

	DMA_size_t sector_512_c = 0;
   63928:	000d883a 	mov	r6,zero
Loud_fragment_status_t selectLoud(volatile DMA_memories_t* memories,DMA_size_t* select_size,
		DMA_size_t len){

	DMA_table_mem_t* table = (DMA_table_mem_t*) memories -> table;

	DMA_size_t start = 0;
   6392c:	000f883a 	mov	r7,zero

	for(DMA_size_t n=0;n<MAX_RANGE;n++){

		sector_512_c ++;

		if(sector_512_c == FFT_SIZE){
   63930:	03008004 	movi	r12,512
			sector_512_c = 0;
		}

		int16_t sample = table[n];

		if(sample >= SELECT_DETECTION || sample <= -SELECT_DETECTION){
   63934:	03403f84 	movi	r13,254
   63938:	1015883a 	mov	r10,r2
		}

		if(lena != DETECT_NO_DETECT){
			lena++;

			if(sector_512_c == (FFT_SIZE - 1)){
   6393c:	03807fc4 	movi	r14,511
				if(lena >= SELECT_SIZE){
   63940:	02c4ffc4 	movi	r11,5119

					stop = n;
					lenb = stop - start;

					if(lenb < MIN_SIZE){
   63944:	03c6d604 	movi	r15,7000
	DMA_size_t lena = DETECT_NO_DETECT;
	DMA_size_t lenb = 0;

	DMA_size_t sector_512_c = 0;

	for(DMA_size_t n=0;n<MAX_RANGE;n++){
   63948:	04175704 	movi	r16,23900

		sector_512_c ++;
   6394c:	31800044 	addi	r6,r6,1

		if(sector_512_c == FFT_SIZE){
   63950:	3300011e 	bne	r6,r12,63958 <selectLoud+0x54>
			sector_512_c = 0;
   63954:	000d883a 	mov	r6,zero
		}

		int16_t sample = table[n];

		if(sample >= SELECT_DETECTION || sample <= -SELECT_DETECTION){
   63958:	4a00000b 	ldhu	r8,0(r9)
   6395c:	42001fc4 	addi	r8,r8,127
   63960:	423fffcc 	andi	r8,r8,65535
   63964:	6a00052e 	bgeu	r13,r8,6397c <selectLoud+0x78>

			if( lena == DETECT_NO_DETECT ){
   63968:	1280271e 	bne	r2,r10,63a08 <selectLoud+0x104>
				if(n - SELECT_SIZE < 0){
   6396c:	58c0240e 	bge	r11,r3,63a00 <selectLoud+0xfc>
   63970:	19fb0004 	addi	r7,r3,-5120
					start = 1;

					sector_512_c = 0;
				}else{
					start = n - SELECT_SIZE;
					sector_512_c = 0;
   63974:	000d883a 	mov	r6,zero
   63978:	00002306 	br	63a08 <selectLoud+0x104>


			lena = 0;
		}

		if(lena != DETECT_NO_DETECT){
   6397c:	12800826 	beq	r2,r10,639a0 <selectLoud+0x9c>
			lena++;
   63980:	10800044 	addi	r2,r2,1

			if(sector_512_c == (FFT_SIZE - 1)){
   63984:	3380061e 	bne	r6,r14,639a0 <selectLoud+0x9c>
				if(lena >= SELECT_SIZE){
   63988:	5880050e 	bge	r11,r2,639a0 <selectLoud+0x9c>

					stop = n;
					lenb = stop - start;
   6398c:	19c5c83a 	sub	r2,r3,r7

					if(lenb < MIN_SIZE){
   63990:	12354204 	addi	r8,r2,-11000
   63994:	7a001e2e 	bgeu	r15,r8,63a10 <selectLoud+0x10c>
						start = 0;
						stop = 0;
						lena = DETECT_NO_DETECT;
   63998:	00bfffc4 	movi	r2,-1

					stop = n;
					lenb = stop - start;

					if(lenb < MIN_SIZE){
						start = 0;
   6399c:	000f883a 	mov	r7,zero
	DMA_size_t lena = DETECT_NO_DETECT;
	DMA_size_t lenb = 0;

	DMA_size_t sector_512_c = 0;

	for(DMA_size_t n=0;n<MAX_RANGE;n++){
   639a0:	18c00044 	addi	r3,r3,1
   639a4:	4a400084 	addi	r9,r9,2
   639a8:	1c3fe81e 	bne	r3,r16,6394c <__alt_data_end+0xfffef94c>


	if(stop == 0){
		stop = MAX_RANGE - 1;

		lenb = stop - start;
   639ac:	009756c4 	movi	r2,23899
   639b0:	11c5c83a 	sub	r2,r2,r7

		if(lenb > MAX_SIZE || lenb < MIN_SIZE){
   639b4:	10f54204 	addi	r3,r2,-11000
   639b8:	0186d604 	movi	r6,7000
   639bc:	30c00e36 	bltu	r6,r3,639f8 <selectLoud+0xf4>
		return LOUD_FRAGMENT_NO_FRAGMENT;
	}

	DMA_size_t index = start;

	lenb = lenb & ROUND_TO_FOUR;
   639c0:	047fff04 	movi	r17,-4
   639c4:	1462703a 	and	r17,r2,r17

	DMA_copy_to_swap(memories,index,lenb * 2);
   639c8:	8c67883a 	add	r19,r17,r17
   639cc:	2825883a 	mov	r18,r5
   639d0:	980d883a 	mov	r6,r19
   639d4:	380b883a 	mov	r5,r7
   639d8:	2021883a 	mov	r16,r4
   639dc:	00611240 	call	61124 <DMA_copy_to_swap>
	DMA_paste_from_swap(memories,lenb * 2);
   639e0:	980b883a 	mov	r5,r19
   639e4:	8009883a 	mov	r4,r16
   639e8:	00611940 	call	61194 <DMA_paste_from_swap>

	*select_size = lenb;
	return LOUD_FRAGMENT_DETECT;
   639ec:	0005883a 	mov	r2,zero
	lenb = lenb & ROUND_TO_FOUR;

	DMA_copy_to_swap(memories,index,lenb * 2);
	DMA_paste_from_swap(memories,lenb * 2);

	*select_size = lenb;
   639f0:	94400015 	stw	r17,0(r18)
	return LOUD_FRAGMENT_DETECT;
   639f4:	00000806 	br	63a18 <selectLoud+0x114>
			lenb = DETECT_NO_DETECT;
		}
	}

	if(lenb <= 0){
		return LOUD_FRAGMENT_NO_FRAGMENT;
   639f8:	00800044 	movi	r2,1
   639fc:	00000606 	br	63a18 <selectLoud+0x114>

			if( lena == DETECT_NO_DETECT ){
				if(n - SELECT_SIZE < 0){
					start = 1;

					sector_512_c = 0;
   63a00:	000d883a 	mov	r6,zero

		if(sample >= SELECT_DETECTION || sample <= -SELECT_DETECTION){

			if( lena == DETECT_NO_DETECT ){
				if(n - SELECT_SIZE < 0){
					start = 1;
   63a04:	01c00044 	movi	r7,1
	for(DMA_size_t n=0;n<MAX_RANGE;n++){

		sector_512_c ++;

		if(sector_512_c == FFT_SIZE){
			sector_512_c = 0;
   63a08:	0005883a 	mov	r2,zero
   63a0c:	003fdc06 	br	63980 <__alt_data_end+0xfffef980>
			}
		}
	}


	if(stop == 0){
   63a10:	183feb1e 	bne	r3,zero,639c0 <__alt_data_end+0xfffef9c0>
   63a14:	003fe506 	br	639ac <__alt_data_end+0xfffef9ac>
	DMA_copy_to_swap(memories,index,lenb * 2);
	DMA_paste_from_swap(memories,lenb * 2);

	*select_size = lenb;
	return LOUD_FRAGMENT_DETECT;
}
   63a18:	dfc00417 	ldw	ra,16(sp)
   63a1c:	dcc00317 	ldw	r19,12(sp)
   63a20:	dc800217 	ldw	r18,8(sp)
   63a24:	dc400117 	ldw	r17,4(sp)
   63a28:	dc000017 	ldw	r16,0(sp)
   63a2c:	dec00504 	addi	sp,sp,20
   63a30:	f800283a 	ret

00063a34 <Scale_scaleX>:
#define INT_TO_FIXED_POINT(number) (uint32_t) (number << (FIXED_POINT_POS - 1))
#define FIXED_TO_INT_POINT(number) (uint32_t) (number >> (FIXED_POINT_POS - 1))

typedef uint32_t fixed_t;

void Scale_scaleX(volatile DMA_table_mem_t* table,DMA_size_t height, DMA_size_t width, DMA_position_t stoppos) {
   63a34:	defff804 	addi	sp,sp,-32
   63a38:	dc400115 	stw	r17,4(sp)
   63a3c:	2823883a 	mov	r17,r5
   63a40:	dc800215 	stw	r18,8(sp)
   63a44:	2025883a 	mov	r18,r4


	fixed_t delta =  INT_TO_FIXED_POINT(height)/ stoppos;
   63a48:	880893fa 	slli	r4,r17,15
#define INT_TO_FIXED_POINT(number) (uint32_t) (number << (FIXED_POINT_POS - 1))
#define FIXED_TO_INT_POINT(number) (uint32_t) (number >> (FIXED_POINT_POS - 1))

typedef uint32_t fixed_t;

void Scale_scaleX(volatile DMA_table_mem_t* table,DMA_size_t height, DMA_size_t width, DMA_position_t stoppos) {
   63a4c:	df000615 	stw	fp,24(sp)
   63a50:	dcc00315 	stw	r19,12(sp)
   63a54:	dc000015 	stw	r16,0(sp)


	fixed_t delta =  INT_TO_FIXED_POINT(height)/ stoppos;
   63a58:	380b883a 	mov	r5,r7
#define INT_TO_FIXED_POINT(number) (uint32_t) (number << (FIXED_POINT_POS - 1))
#define FIXED_TO_INT_POINT(number) (uint32_t) (number >> (FIXED_POINT_POS - 1))

typedef uint32_t fixed_t;

void Scale_scaleX(volatile DMA_table_mem_t* table,DMA_size_t height, DMA_size_t width, DMA_position_t stoppos) {
   63a5c:	dfc00715 	stw	ra,28(sp)
   63a60:	dd400515 	stw	r21,20(sp)
   63a64:	dd000415 	stw	r20,16(sp)
   63a68:	df000604 	addi	fp,sp,24
   63a6c:	3021883a 	mov	r16,r6
   63a70:	3827883a 	mov	r19,r7


	fixed_t delta =  INT_TO_FIXED_POINT(height)/ stoppos;
   63a74:	00647a40 	call	647a4 <__udivsi3>
	fixed_t deltar = delta;

    for (uint32_t no =0 ; no < width; no++) {
        int offset = no;

        uint16_t old_border[height];
   63a78:	8c47883a 	add	r3,r17,r17
   63a7c:	18c00104 	addi	r3,r3,4
   63a80:	1806d0ba 	srli	r3,r3,2
   63a84:	800e97fa 	slli	r7,r16,31
   63a88:	8415883a 	add	r10,r16,r16
   63a8c:	18c7883a 	add	r3,r3,r3
   63a90:	3c0fc83a 	sub	r7,r7,r16


	fixed_t delta =  INT_TO_FIXED_POINT(height)/ stoppos;
	fixed_t deltar = delta;

    for (uint32_t no =0 ; no < width; no++) {
   63a94:	0011883a 	mov	r8,zero
        int offset = no;

        uint16_t old_border[height];
   63a98:	18c7883a 	add	r3,r3,r3


	fixed_t delta =  INT_TO_FIXED_POINT(height)/ stoppos;
	fixed_t deltar = delta;

    for (uint32_t no =0 ; no < width; no++) {
   63a9c:	44003e26 	beq	r8,r16,63b98 <Scale_scaleX+0x164>
   63aa0:	d819883a 	mov	r12,sp
        int offset = no;

        uint16_t old_border[height];
   63aa4:	d8f7c83a 	sub	sp,sp,r3
   63aa8:	d80b883a 	mov	r5,sp
        uint16_t new_border[height];
   63aac:	d8f7c83a 	sub	sp,sp,r3

	fixed_t delta =  INT_TO_FIXED_POINT(height)/ stoppos;
	fixed_t deltar = delta;

    for (uint32_t no =0 ; no < width; no++) {
        int offset = no;
   63ab0:	400d883a 	mov	r6,r8

        uint16_t old_border[height];
        uint16_t new_border[height];
   63ab4:	d81d883a 	mov	r14,sp
   63ab8:	d817883a 	mov	r11,sp

        for (uint32_t n = 0; n < height; n++) {
   63abc:	2813883a 	mov	r9,r5
   63ac0:	d81b883a 	mov	r13,sp
   63ac4:	0009883a 	mov	r4,zero
   63ac8:	24400d26 	beq	r4,r17,63b00 <Scale_scaleX+0xcc>

            if (n < stoppos) {
   63acc:	24c0062e 	bgeu	r4,r19,63ae8 <Scale_scaleX+0xb4>
                old_border[n] = table[offset];
   63ad0:	319f883a 	add	r15,r6,r6
   63ad4:	93df883a 	add	r15,r18,r15
   63ad8:	7bc0000b 	ldhu	r15,0(r15)
                offset += width;
   63adc:	340d883a 	add	r6,r6,r16
        uint16_t new_border[height];

        for (uint32_t n = 0; n < height; n++) {

            if (n < stoppos) {
                old_border[n] = table[offset];
   63ae0:	4bc0000d 	sth	r15,0(r9)
   63ae4:	00000106 	br	63aec <Scale_scaleX+0xb8>
                offset += width;
            } else {
                old_border[n] = 0;
   63ae8:	4800000d 	sth	zero,0(r9)
            }

            new_border[n] = 0;
   63aec:	6800000d 	sth	zero,0(r13)
        int offset = no;

        uint16_t old_border[height];
        uint16_t new_border[height];

        for (uint32_t n = 0; n < height; n++) {
   63af0:	21000044 	addi	r4,r4,1
   63af4:	6b400084 	addi	r13,r13,2
   63af8:	4a400084 	addi	r9,r9,2
   63afc:	003ff206 	br	63ac8 <__alt_data_end+0xfffefac8>
   63b00:	1013883a 	mov	r9,r2
   63b04:	001b883a 	mov	r13,zero

            new_border[n] = 0;
        }

        int posX = 0;
        for (uint32_t n = 0; n < stoppos; n++) {
   63b08:	6cc01326 	beq	r13,r19,63b58 <Scale_scaleX+0x124>
   63b0c:	4889c83a 	sub	r4,r9,r2

        	fixed_t startPos = posX;
        	fixed_t stopPos = posX + deltar;

            for (uint32_t k = FIXED_TO_INT_POINT(startPos); k < FIXED_TO_INT_POINT(stopPos); k++) {
   63b10:	2008d3fa 	srli	r4,r4,15
   63b14:	483ed3fa 	srli	ra,r9,15
   63b18:	210d883a 	add	r6,r4,r4
   63b1c:	718d883a 	add	r6,r14,r6
   63b20:	27c0092e 	bgeu	r4,ra,63b48 <Scale_scaleX+0x114>

				if(k < height){
   63b24:	2440052e 	bgeu	r4,r17,63b3c <Scale_scaleX+0x108>
					if (new_border[k] < old_border[n])
   63b28:	2bc0000b 	ldhu	r15,0(r5)
   63b2c:	3540000b 	ldhu	r21,0(r6)
   63b30:	7d3fffcc 	andi	r20,r15,65535
   63b34:	ad00012e 	bgeu	r21,r20,63b3c <Scale_scaleX+0x108>
						new_border[k] = old_border[n];
   63b38:	33c0000d 	sth	r15,0(r6)
        for (uint32_t n = 0; n < stoppos; n++) {

        	fixed_t startPos = posX;
        	fixed_t stopPos = posX + deltar;

            for (uint32_t k = FIXED_TO_INT_POINT(startPos); k < FIXED_TO_INT_POINT(stopPos); k++) {
   63b3c:	21000044 	addi	r4,r4,1
   63b40:	31800084 	addi	r6,r6,2
   63b44:	003ff606 	br	63b20 <__alt_data_end+0xfffefb20>

            new_border[n] = 0;
        }

        int posX = 0;
        for (uint32_t n = 0; n < stoppos; n++) {
   63b48:	6b400044 	addi	r13,r13,1
   63b4c:	29400084 	addi	r5,r5,2
   63b50:	1253883a 	add	r9,r2,r9
   63b54:	003fec06 	br	63b08 <__alt_data_end+0xfffefb08>
   63b58:	41c9883a 	add	r4,r8,r7
   63b5c:	2109883a 	add	r4,r4,r4
   63b60:	000d883a 	mov	r6,zero
   63b64:	000b883a 	mov	r5,zero
   63b68:	328d883a 	add	r6,r6,r10

            posX += deltar;
        }

        offset = no;
        for (uint32_t n = 0; n < height; n++) {
   63b6c:	2c400726 	beq	r5,r17,63b8c <Scale_scaleX+0x158>

            table[offset] = new_border[n];
   63b70:	5b40000b 	ldhu	r13,0(r11)
   63b74:	3113883a 	add	r9,r6,r4
   63b78:	9253883a 	add	r9,r18,r9
   63b7c:	4b40000d 	sth	r13,0(r9)

            posX += deltar;
        }

        offset = no;
        for (uint32_t n = 0; n < height; n++) {
   63b80:	29400044 	addi	r5,r5,1
   63b84:	5ac00084 	addi	r11,r11,2
   63b88:	003ff706 	br	63b68 <__alt_data_end+0xfffefb68>


	fixed_t delta =  INT_TO_FIXED_POINT(height)/ stoppos;
	fixed_t deltar = delta;

    for (uint32_t no =0 ; no < width; no++) {
   63b8c:	42000044 	addi	r8,r8,1
   63b90:	6037883a 	mov	sp,r12
   63b94:	003fc106 	br	63a9c <__alt_data_end+0xfffefa9c>

        }

    }

}
   63b98:	e6fffa04 	addi	sp,fp,-24
   63b9c:	dfc00717 	ldw	ra,28(sp)
   63ba0:	df000617 	ldw	fp,24(sp)
   63ba4:	dd400517 	ldw	r21,20(sp)
   63ba8:	dd000417 	ldw	r20,16(sp)
   63bac:	dcc00317 	ldw	r19,12(sp)
   63bb0:	dc800217 	ldw	r18,8(sp)
   63bb4:	dc400117 	ldw	r17,4(sp)
   63bb8:	dc000017 	ldw	r16,0(sp)
   63bbc:	dec00804 	addi	sp,sp,32
   63bc0:	f800283a 	ret

00063bc4 <check_files>:
		return DATA_FALSE;
	}


	return DATA_TRUE;
}
   63bc4:	288005e0 	cmpeqi	r2,r5,23
   63bc8:	f800283a 	ret

00063bcc <app_selfcheck>:

Data_bool_t app_selfcheck(volatile Device_tree_t* tree,Detector_t* detector){
   63bcc:	deff5b04 	addi	sp,sp,-660
   63bd0:	dc80a315 	stw	r18,652(sp)
   63bd4:	dc00a115 	stw	r16,644(sp)
   63bd8:	dfc0a415 	stw	ra,656(sp)
   63bdc:	dc40a215 	stw	r17,648(sp)
   63be0:	2021883a 	mov	r16,r4
   63be4:	2825883a 	mov	r18,r5

	MIC_start();
   63be8:	00620080 	call	62008 <MIC_start>

	File_system_list_t files[32];
	uint8_t name_buffer[256];

	if(Prepare_file_system_list(files, name_buffer, 256, 16) == DATA_FALSE){
   63bec:	01c00404 	movi	r7,16
   63bf0:	01804004 	movi	r6,256
   63bf4:	d9406004 	addi	r5,sp,384
   63bf8:	d809883a 	mov	r4,sp
   63bfc:	00614c00 	call	614c0 <Prepare_file_system_list>
   63c00:	1000061e 	bne	r2,zero,63c1c <app_selfcheck+0x50>
		panic(tree -> buart,tree -> distancer ,PANIC_OTHER_ERROR);
   63c04:	81000817 	ldw	r4,32(r16)
   63c08:	81400917 	ldw	r5,36(r16)
   63c0c:	01800184 	movi	r6,6
   63c10:	0062ca40 	call	62ca4 <panic>
		return DATA_TRUE;
   63c14:	00800044 	movi	r2,1
   63c18:	00002506 	br	63cb0 <app_selfcheck+0xe4>


	Data_size_t recv_size = 0;


	if(Read_file_system(tree -> disk, files,32,&recv_size) != FILE_SYSTEM_OK){
   63c1c:	81000517 	ldw	r4,20(r16)
   63c20:	d9c0a004 	addi	r7,sp,640
   63c24:	01800804 	movi	r6,32
   63c28:	d80b883a 	mov	r5,sp
		panic(tree -> buart,tree -> distancer ,PANIC_OTHER_ERROR);
		return DATA_TRUE;
	}


	Data_size_t recv_size = 0;
   63c2c:	d800a015 	stw	zero,640(sp)


	if(Read_file_system(tree -> disk, files,32,&recv_size) != FILE_SYSTEM_OK){
   63c30:	00616680 	call	61668 <Read_file_system>
   63c34:	10000426 	beq	r2,zero,63c48 <app_selfcheck+0x7c>

		panic(tree -> buart,tree -> distancer ,PANIC_FILE_ERROR);
   63c38:	81000817 	ldw	r4,32(r16)
   63c3c:	01800084 	movi	r6,2
   63c40:	81400917 	ldw	r5,36(r16)
   63c44:	003ff206 	br	63c10 <__alt_data_end+0xfffefc10>
#define SIZE_FS 		23

Data_bool_t check_files(File_system_list_t* files, Data_size_t size){


	if(size != SIZE_FS){
   63c48:	d8c0a017 	ldw	r3,640(sp)
   63c4c:	008005c4 	movi	r2,23
   63c50:	04400044 	movi	r17,1
   63c54:	1880111e 	bne	r3,r2,63c9c <app_selfcheck+0xd0>
		return DATA_TRUE;
	}


	if(recv_size != 0){
		detector -> start = files[recv_size - 1].addr >> 4;
   63c58:	d8804217 	ldw	r2,264(sp)
	}else{
		panic(tree -> buart,tree -> distancer ,PANIC_FILE_ERROR);
		return DATA_TRUE;
	}

	if(selfcheck(detector) == DETECTOR_STATUS_DIAGNOSTIC_ERROR){
   63c5c:	9009883a 	mov	r4,r18
		return DATA_TRUE;
	}


	if(recv_size != 0){
		detector -> start = files[recv_size - 1].addr >> 4;
   63c60:	1004d13a 	srli	r2,r2,4
   63c64:	90800a15 	stw	r2,40(r18)
	}else{
		panic(tree -> buart,tree -> distancer ,PANIC_FILE_ERROR);
		return DATA_TRUE;
	}

	if(selfcheck(detector) == DETECTOR_STATUS_DIAGNOSTIC_ERROR){
   63c68:	00612000 	call	61200 <selfcheck>
   63c6c:	1025883a 	mov	r18,r2
   63c70:	1440081e 	bne	r2,r17,63c94 <app_selfcheck+0xc8>

		Disk_status_t d_status = init_disk(tree -> disk);
   63c74:	81000517 	ldw	r4,20(r16)
   63c78:	006194c0 	call	6194c <init_disk>

		if(d_status == DISK_STATUS_ERROR){
			 panic(tree -> buart,tree -> distancer ,PANIC_NO_DISK);
   63c7c:	81000817 	ldw	r4,32(r16)
   63c80:	81400917 	ldw	r5,36(r16)

	if(selfcheck(detector) == DETECTOR_STATUS_DIAGNOSTIC_ERROR){

		Disk_status_t d_status = init_disk(tree -> disk);

		if(d_status == DISK_STATUS_ERROR){
   63c84:	01800084 	movi	r6,2
   63c88:	11bfe11e 	bne	r2,r6,63c10 <__alt_data_end+0xfffefc10>
			 panic(tree -> buart,tree -> distancer ,PANIC_NO_DISK);
   63c8c:	900d883a 	mov	r6,r18
   63c90:	003fdf06 	br	63c10 <__alt_data_end+0xfffefc10>
			 return DATA_TRUE;
		}

	}

	return DATA_FALSE;
   63c94:	0005883a 	mov	r2,zero
   63c98:	00000506 	br	63cb0 <app_selfcheck+0xe4>
		panic(tree -> buart,tree -> distancer ,PANIC_FILE_ERROR);
		return DATA_TRUE;
	}

	if(!check_files(files,recv_size)){
		panic(tree -> buart,tree -> distancer ,PANIC_FILE_ERROR);
   63c9c:	81000817 	ldw	r4,32(r16)
   63ca0:	81400917 	ldw	r5,36(r16)
   63ca4:	01800084 	movi	r6,2
   63ca8:	0062ca40 	call	62ca4 <panic>
		return DATA_TRUE;
   63cac:	8805883a 	mov	r2,r17
		}

	}

	return DATA_FALSE;
}
   63cb0:	dfc0a417 	ldw	ra,656(sp)
   63cb4:	dc80a317 	ldw	r18,652(sp)
   63cb8:	dc40a217 	ldw	r17,648(sp)
   63cbc:	dc00a117 	ldw	r16,644(sp)
   63cc0:	dec0a504 	addi	sp,sp,660
   63cc4:	f800283a 	ret

00063cc8 <record_selfcheck>:

Data_bool_t record_selfcheck(volatile Device_tree_t* tree ,Detector_status_t decision_word){
   63cc8:	defffc04 	addi	sp,sp,-16
   63ccc:	dc400115 	stw	r17,4(sp)
   63cd0:	dc000015 	stw	r16,0(sp)
   63cd4:	dfc00315 	stw	ra,12(sp)
   63cd8:	dc800215 	stw	r18,8(sp)
	if(decision_word == DETECTOR_STATUS_CRC_ERROR){
   63cdc:	008001c4 	movi	r2,7
	}

	return DATA_FALSE;
}

Data_bool_t record_selfcheck(volatile Device_tree_t* tree ,Detector_status_t decision_word){
   63ce0:	2023883a 	mov	r17,r4
   63ce4:	04000044 	movi	r16,1
	if(decision_word == DETECTOR_STATUS_CRC_ERROR){
   63ce8:	2880031e 	bne	r5,r2,63cf8 <record_selfcheck+0x30>
		panic(tree -> buart,tree -> distancer ,PANIC_NO_DISK);
   63cec:	21000817 	ldw	r4,32(r4)
   63cf0:	89400917 	ldw	r5,36(r17)
   63cf4:	00001606 	br	63d50 <record_selfcheck+0x88>
		return DATA_TRUE;
	}

	if(decision_word == DETECTOR_STATUS_MICROPHONE_ERROR){
   63cf8:	00800184 	movi	r2,6
   63cfc:	2825883a 	mov	r18,r5
   63d00:	2880041e 	bne	r5,r2,63d14 <record_selfcheck+0x4c>
		panic(tree -> buart,tree -> distancer ,PANIC_NO_MIC_ERROR);
   63d04:	21000817 	ldw	r4,32(r4)
   63d08:	018000c4 	movi	r6,3
   63d0c:	89400917 	ldw	r5,36(r17)
   63d10:	00001006 	br	63d54 <record_selfcheck+0x8c>
		return DATA_TRUE;
	}

	if(decision_word == DETECTOR_STATUS_DISK_ERROR){
   63d14:	2c00061e 	bne	r5,r16,63d30 <record_selfcheck+0x68>
		panic(tree -> buart,tree -> distancer ,PANIC_NO_DISK);
   63d18:	21000817 	ldw	r4,32(r4)
   63d1c:	89400917 	ldw	r5,36(r17)
   63d20:	900d883a 	mov	r6,r18
   63d24:	0062ca40 	call	62ca4 <panic>
		return DATA_TRUE;
   63d28:	9005883a 	mov	r2,r18
   63d2c:	00000d06 	br	63d64 <record_selfcheck+0x9c>
	}

	if(decision_word == DETECTOR_STATUS_FILE_ERROR || decision_word == DETECTOR_STATUS_CRC_ERROR){
   63d30:	28bffe44 	addi	r2,r5,-7
   63d34:	80800a36 	bltu	r16,r2,63d60 <record_selfcheck+0x98>


		Disk_status_t d_status = init_disk(tree -> disk);
   63d38:	21000517 	ldw	r4,20(r4)
   63d3c:	006194c0 	call	6194c <init_disk>

		if(d_status == DISK_STATUS_ERROR){
			panic(tree -> buart,tree -> distancer ,PANIC_NO_DISK);
   63d40:	89000817 	ldw	r4,32(r17)
   63d44:	89400917 	ldw	r5,36(r17)
	if(decision_word == DETECTOR_STATUS_FILE_ERROR || decision_word == DETECTOR_STATUS_CRC_ERROR){


		Disk_status_t d_status = init_disk(tree -> disk);

		if(d_status == DISK_STATUS_ERROR){
   63d48:	01800084 	movi	r6,2
   63d4c:	1180011e 	bne	r2,r6,63d54 <record_selfcheck+0x8c>
			panic(tree -> buart,tree -> distancer ,PANIC_NO_DISK);
   63d50:	800d883a 	mov	r6,r16
		}else{
			panic(tree -> buart,tree -> distancer ,PANIC_FILE_ERROR);
   63d54:	0062ca40 	call	62ca4 <panic>
		}
		return DATA_TRUE;
   63d58:	8005883a 	mov	r2,r16
   63d5c:	00000106 	br	63d64 <record_selfcheck+0x9c>

	}

	return DATA_FALSE;
   63d60:	0005883a 	mov	r2,zero
}
   63d64:	dfc00317 	ldw	ra,12(sp)
   63d68:	dc800217 	ldw	r18,8(sp)
   63d6c:	dc400117 	ldw	r17,4(sp)
   63d70:	dc000017 	ldw	r16,0(sp)
   63d74:	dec00404 	addi	sp,sp,16
   63d78:	f800283a 	ret

00063d7c <playing>:
typedef enum Sound_bank{
	SOUND_BANK_1 = 1,
	SOUND_BANK_2 = 2
}Sound_bank_t;

Disk_status_load_t playing(volatile Speaker_t* speaker){
   63d7c:	defffd04 	addi	sp,sp,-12
   63d80:	dc000015 	stw	r16,0(sp)
   63d84:	2021883a 	mov	r16,r4

	gpio_pulse_pin((Gpio_distance_t*)speaker ->gpio,GPIO_PIN_READY,0);
   63d88:	21000317 	ldw	r4,12(r4)
   63d8c:	000d883a 	mov	r6,zero
   63d90:	000b883a 	mov	r5,zero
typedef enum Sound_bank{
	SOUND_BANK_1 = 1,
	SOUND_BANK_2 = 2
}Sound_bank_t;

Disk_status_load_t playing(volatile Speaker_t* speaker){
   63d94:	dc400115 	stw	r17,4(sp)
   63d98:	dfc00215 	stw	ra,8(sp)

	gpio_pulse_pin((Gpio_distance_t*)speaker ->gpio,GPIO_PIN_READY,0);

	while(Speaker_wait_for_finish(speaker) == DATA_TRUE){
   63d9c:	04400044 	movi	r17,1
	SOUND_BANK_2 = 2
}Sound_bank_t;

Disk_status_load_t playing(volatile Speaker_t* speaker){

	gpio_pulse_pin((Gpio_distance_t*)speaker ->gpio,GPIO_PIN_READY,0);
   63da0:	00630680 	call	63068 <gpio_pulse_pin>

	while(Speaker_wait_for_finish(speaker) == DATA_TRUE){
   63da4:	8009883a 	mov	r4,r16
   63da8:	00640700 	call	64070 <Speaker_wait_for_finish>
   63dac:	1440031e 	bne	r2,r17,63dbc <playing+0x40>
		BLE_console(speaker ->console);
   63db0:	81000017 	ldw	r4,0(r16)
   63db4:	0062a280 	call	62a28 <BLE_console>
   63db8:	003ffa06 	br	63da4 <__alt_data_end+0xfffefda4>
	}

	return DISK_LOAD_OK;
}
   63dbc:	0005883a 	mov	r2,zero
   63dc0:	dfc00217 	ldw	ra,8(sp)
   63dc4:	dc400117 	ldw	r17,4(sp)
   63dc8:	dc000017 	ldw	r16,0(sp)
   63dcc:	dec00304 	addi	sp,sp,12
   63dd0:	f800283a 	ret

00063dd4 <Speaker_play_music>:

Sound_status_t Speaker_play_music(volatile Speaker_t* speaker,Disk_sectors_t sector, Sound_bank_t* bank){
   63dd4:	defffd04 	addi	sp,sp,-12

	if(*bank == SOUND_BANK_1){
   63dd8:	30c00017 	ldw	r3,0(r6)
	}

	return DISK_LOAD_OK;
}

Sound_status_t Speaker_play_music(volatile Speaker_t* speaker,Disk_sectors_t sector, Sound_bank_t* bank){
   63ddc:	dc000015 	stw	r16,0(sp)
   63de0:	2021883a 	mov	r16,r4

	if(*bank == SOUND_BANK_1){
		load_disk(speaker -> disk, sector, KB_PACK_SIZE, SOUND_BUFFER_SIZE);
   63de4:	21000217 	ldw	r4,8(r4)
	}

	return DISK_LOAD_OK;
}

Sound_status_t Speaker_play_music(volatile Speaker_t* speaker,Disk_sectors_t sector, Sound_bank_t* bank){
   63de8:	dc400115 	stw	r17,4(sp)
   63dec:	dfc00215 	stw	ra,8(sp)

	if(*bank == SOUND_BANK_1){
   63df0:	00800044 	movi	r2,1
	}

	return DISK_LOAD_OK;
}

Sound_status_t Speaker_play_music(volatile Speaker_t* speaker,Disk_sectors_t sector, Sound_bank_t* bank){
   63df4:	3023883a 	mov	r17,r6
   63df8:	297fffcc 	andi	r5,r5,65535

	if(*bank == SOUND_BANK_1){
   63dfc:	1880061e 	bne	r3,r2,63e18 <Speaker_play_music+0x44>
		load_disk(speaker -> disk, sector, KB_PACK_SIZE, SOUND_BUFFER_SIZE);
   63e00:	01c80004 	movi	r7,8192
   63e04:	018007c4 	movi	r6,31
   63e08:	00618c00 	call	618c0 <load_disk>
		Speaker_read_first_half(speaker);
   63e0c:	8009883a 	mov	r4,r16
   63e10:	0063fc40 	call	63fc4 <Speaker_read_first_half>
   63e14:	00000506 	br	63e2c <Speaker_play_music+0x58>
	}else{
		load_disk(speaker -> disk, sector, KB_PACK_SIZE, 0);
   63e18:	000f883a 	mov	r7,zero
   63e1c:	018007c4 	movi	r6,31
   63e20:	00618c00 	call	618c0 <load_disk>
		Speaker_second_first_half(speaker);
   63e24:	8009883a 	mov	r4,r16
   63e28:	00640180 	call	64018 <Speaker_second_first_half>
	}

	if(playing(speaker) == DISK_LOAD_FAIL){
   63e2c:	8009883a 	mov	r4,r16
   63e30:	0063d7c0 	call	63d7c <playing>
   63e34:	00c00044 	movi	r3,1
   63e38:	10c00726 	beq	r2,r3,63e58 <Speaker_play_music+0x84>
		return SOUND_STATUS_DISK_ERROR;
	}



	if(*bank == SOUND_BANK_1){
   63e3c:	88800017 	ldw	r2,0(r17)
   63e40:	10c0031e 	bne	r2,r3,63e50 <Speaker_play_music+0x7c>
		*bank = SOUND_BANK_2;
   63e44:	00800084 	movi	r2,2
   63e48:	88800015 	stw	r2,0(r17)
   63e4c:	00000106 	br	63e54 <Speaker_play_music+0x80>
	}else{
		*bank = SOUND_BANK_1;
   63e50:	88c00015 	stw	r3,0(r17)
	}

	return SOUND_STATUS_OK;
   63e54:	0005883a 	mov	r2,zero
}
   63e58:	dfc00217 	ldw	ra,8(sp)
   63e5c:	dc400117 	ldw	r17,4(sp)
   63e60:	dc000017 	ldw	r16,0(sp)
   63e64:	dec00304 	addi	sp,sp,12
   63e68:	f800283a 	ret

00063e6c <Speaker_preload>:

Sound_status_t Speaker_preload(volatile Speaker_t* speaker,Disk_sectors_t sector){
   63e6c:	defffd04 	addi	sp,sp,-12
   63e70:	dc400115 	stw	r17,4(sp)
   63e74:	2023883a 	mov	r17,r4

	load_disk(speaker -> disk, sector, KB_PACK_SIZE, 0);
   63e78:	21000217 	ldw	r4,8(r4)
   63e7c:	000f883a 	mov	r7,zero
   63e80:	018007c4 	movi	r6,31
   63e84:	297fffcc 	andi	r5,r5,65535
	}

	return SOUND_STATUS_OK;
}

Sound_status_t Speaker_preload(volatile Speaker_t* speaker,Disk_sectors_t sector){
   63e88:	dc000015 	stw	r16,0(sp)
   63e8c:	dfc00215 	stw	ra,8(sp)
	load_disk(speaker -> disk, sector, KB_PACK_SIZE, 0);

	while(1){
		Disk_status_load_t status = check_disk(speaker -> disk);

		if(status == DISK_LOAD_FAIL){
   63e90:	04000044 	movi	r16,1
	return SOUND_STATUS_OK;
}

Sound_status_t Speaker_preload(volatile Speaker_t* speaker,Disk_sectors_t sector){

	load_disk(speaker -> disk, sector, KB_PACK_SIZE, 0);
   63e94:	00618c00 	call	618c0 <load_disk>

	while(1){
		Disk_status_load_t status = check_disk(speaker -> disk);
   63e98:	89000217 	ldw	r4,8(r17)
   63e9c:	00619280 	call	61928 <check_disk>

		if(status == DISK_LOAD_FAIL){
   63ea0:	14000426 	beq	r2,r16,63eb4 <Speaker_preload+0x48>
			return DISK_LOAD_FAIL;
		}

		if(status == DISK_LOAD_OK){
   63ea4:	10000526 	beq	r2,zero,63ebc <Speaker_preload+0x50>
			break;
		}
		BLE_console(speaker ->console);
   63ea8:	89000017 	ldw	r4,0(r17)
   63eac:	0062a280 	call	62a28 <BLE_console>
	}
   63eb0:	003ff906 	br	63e98 <__alt_data_end+0xfffefe98>

	while(1){
		Disk_status_load_t status = check_disk(speaker -> disk);

		if(status == DISK_LOAD_FAIL){
			return DISK_LOAD_FAIL;
   63eb4:	8005883a 	mov	r2,r16
   63eb8:	00000106 	br	63ec0 <Speaker_preload+0x54>
			break;
		}
		BLE_console(speaker ->console);
	}

	return SOUND_STATUS_OK;
   63ebc:	0005883a 	mov	r2,zero
}
   63ec0:	dfc00217 	ldw	ra,8(sp)
   63ec4:	dc400117 	ldw	r17,4(sp)
   63ec8:	dc000017 	ldw	r16,0(sp)
   63ecc:	dec00304 	addi	sp,sp,12
   63ed0:	f800283a 	ret

00063ed4 <start_speaker>:

Sound_status_t start_speaker(volatile Speaker_t* speaker){
   63ed4:	deffff04 	addi	sp,sp,-4
   63ed8:	dfc00015 	stw	ra,0(sp)

	Speaker_read_first_half(speaker);
   63edc:	0063fc40 	call	63fc4 <Speaker_read_first_half>
	return SOUND_STATUS_OK;
}
   63ee0:	0005883a 	mov	r2,zero
   63ee4:	dfc00017 	ldw	ra,0(sp)
   63ee8:	dec00104 	addi	sp,sp,4
   63eec:	f800283a 	ret

00063ef0 <say>:


Sound_status_t say(volatile Speaker_t* speaker,uint8_t* filename){
   63ef0:	defff904 	addi	sp,sp,-28
   63ef4:	dc400515 	stw	r17,20(sp)
   63ef8:	2023883a 	mov	r17,r4

	File_system_list_t file;

	Sound_bank_t bank = SOUND_BANK_1;
	File_system_status_t status = File_exists(speaker -> disk, &file, filename);
   63efc:	21000217 	ldw	r4,8(r4)
	Speaker_read_first_half(speaker);
	return SOUND_STATUS_OK;
}


Sound_status_t say(volatile Speaker_t* speaker,uint8_t* filename){
   63f00:	dc000415 	stw	r16,16(sp)

	File_system_list_t file;

	Sound_bank_t bank = SOUND_BANK_1;
	File_system_status_t status = File_exists(speaker -> disk, &file, filename);
   63f04:	280d883a 	mov	r6,r5

Sound_status_t say(volatile Speaker_t* speaker,uint8_t* filename){

	File_system_list_t file;

	Sound_bank_t bank = SOUND_BANK_1;
   63f08:	04000044 	movi	r16,1
	File_system_status_t status = File_exists(speaker -> disk, &file, filename);
   63f0c:	d80b883a 	mov	r5,sp
	Speaker_read_first_half(speaker);
	return SOUND_STATUS_OK;
}


Sound_status_t say(volatile Speaker_t* speaker,uint8_t* filename){
   63f10:	dfc00615 	stw	ra,24(sp)

	File_system_list_t file;

	Sound_bank_t bank = SOUND_BANK_1;
   63f14:	dc000315 	stw	r16,12(sp)
	File_system_status_t status = File_exists(speaker -> disk, &file, filename);
   63f18:	00615100 	call	61510 <File_exists>


	if(status == FILE_SYSTEM_EXISTS){
   63f1c:	00c00104 	movi	r3,4
   63f20:	10c0181e 	bne	r2,r3,63f84 <say+0x94>

		if(Speaker_preload(speaker,file.addr) == SOUND_STATUS_DISK_ERROR){
   63f24:	d940000b 	ldhu	r5,0(sp)
   63f28:	8809883a 	mov	r4,r17
   63f2c:	0063e6c0 	call	63e6c <Speaker_preload>
   63f30:	14001626 	beq	r2,r16,63f8c <say+0x9c>
			return SOUND_STATUS_DISK_ERROR;
		}

		for(int n=file.addr + 2;n<file.addr + file.len;n+=2){
   63f34:	dc000017 	ldw	r16,0(sp)
   63f38:	d8800117 	ldw	r2,4(sp)
   63f3c:	d8c00017 	ldw	r3,0(sp)
   63f40:	84000084 	addi	r16,r16,2
   63f44:	1885883a 	add	r2,r3,r2
   63f48:	8080062e 	bgeu	r16,r2,63f64 <say+0x74>
			Sound_status_t status = Speaker_play_music(speaker,n,&bank);
   63f4c:	d9800304 	addi	r6,sp,12
   63f50:	817fffcc 	andi	r5,r16,65535
   63f54:	8809883a 	mov	r4,r17
   63f58:	0063dd40 	call	63dd4 <Speaker_play_music>

			if(status != SOUND_STATUS_OK){
   63f5c:	103ff626 	beq	r2,zero,63f38 <__alt_data_end+0xfffeff38>
   63f60:	00000d06 	br	63f98 <say+0xa8>
				return status;
			}
		}

		gpio_stop_flash((Gpio_distance_t*)speaker -> gpio);
   63f64:	89000317 	ldw	r4,12(r17)
   63f68:	00630d40 	call	630d4 <gpio_stop_flash>
		gpio_set_pin((Gpio_distance_t*)speaker -> gpio,GPIO_PIN_READY,GPIO_PIN_UP);
   63f6c:	89000317 	ldw	r4,12(r17)
   63f70:	01800044 	movi	r6,1
   63f74:	000b883a 	mov	r5,zero
   63f78:	0062fb00 	call	62fb0 <gpio_set_pin>

		return SOUND_STATUS_OK;
   63f7c:	0005883a 	mov	r2,zero
   63f80:	00000506 	br	63f98 <say+0xa8>
	}else if(status == FILE_SYSTEM_NOT_EXISTS){
   63f84:	00c00144 	movi	r3,5
   63f88:	10c00226 	beq	r2,r3,63f94 <say+0xa4>
		return SOUND_STATUS_NO_FILE;
	}else{
		return SOUND_STATUS_DISK_ERROR;
   63f8c:	00800044 	movi	r2,1
   63f90:	00000106 	br	63f98 <say+0xa8>
		gpio_stop_flash((Gpio_distance_t*)speaker -> gpio);
		gpio_set_pin((Gpio_distance_t*)speaker -> gpio,GPIO_PIN_READY,GPIO_PIN_UP);

		return SOUND_STATUS_OK;
	}else if(status == FILE_SYSTEM_NOT_EXISTS){
		return SOUND_STATUS_NO_FILE;
   63f94:	008000c4 	movi	r2,3
	}else{
		return SOUND_STATUS_DISK_ERROR;
	}
}
   63f98:	dfc00617 	ldw	ra,24(sp)
   63f9c:	dc400517 	ldw	r17,20(sp)
   63fa0:	dc000417 	ldw	r16,16(sp)
   63fa4:	dec00704 	addi	sp,sp,28
   63fa8:	f800283a 	ret

00063fac <audio_isr>:
#define SOUND_BUFFER_SIZE	(uint32_t) 8192

static void audio_isr(void* context){

	Speaker_t* speaker = (Speaker_t*) context;
	speaker -> flag = SPEAKER_FLAG_UP;
   63fac:	00800044 	movi	r2,1
   63fb0:	20800115 	stw	r2,4(r4)

	*AUDIO_IRQ = 0;
   63fb4:	008000b4 	movhi	r2,2
   63fb8:	10980004 	addi	r2,r2,24576
   63fbc:	10000015 	stw	zero,0(r2)
   63fc0:	f800283a 	ret

00063fc4 <Speaker_read_first_half>:
}

void Speaker_read_first_half(volatile Speaker_t* speaker){

	DMA_table_mem_t* table = (DMA_table_mem_t*) speaker -> disk ->memories ->table;
   63fc4:	20800217 	ldw	r2,8(r4)

	*AUDIO_START_ADDR = (uint32_t) &table[0];
   63fc8:	00c000b4 	movhi	r3,2
   63fcc:	18d80104 	addi	r3,r3,24580
	*AUDIO_IRQ = 0;
}

void Speaker_read_first_half(volatile Speaker_t* speaker){

	DMA_table_mem_t* table = (DMA_table_mem_t*) speaker -> disk ->memories ->table;
   63fd0:	10800417 	ldw	r2,16(r2)
   63fd4:	10800017 	ldw	r2,0(r2)

	*AUDIO_START_ADDR = (uint32_t) &table[0];
   63fd8:	18800015 	stw	r2,0(r3)
	*AUDIO_STOP_ADDR = (uint32_t) &table[SOUND_BUFFER_SIZE - 2];
   63fdc:	00c000b4 	movhi	r3,2
   63fe0:	108fff04 	addi	r2,r2,16380
   63fe4:	18d80204 	addi	r3,r3,24584
   63fe8:	18800015 	stw	r2,0(r3)
	*AUDIO_VOLUME = speaker ->volume;
   63fec:	20800403 	ldbu	r2,16(r4)
   63ff0:	00c000b4 	movhi	r3,2
   63ff4:	18d80304 	addi	r3,r3,24588
   63ff8:	10803fcc 	andi	r2,r2,255
   63ffc:	18800015 	stw	r2,0(r3)

	speaker ->flag = SPEAKER_FLAG_DOWN;

	*AUDIO_START = 1;
   64000:	008000b4 	movhi	r2,2

	*AUDIO_START_ADDR = (uint32_t) &table[0];
	*AUDIO_STOP_ADDR = (uint32_t) &table[SOUND_BUFFER_SIZE - 2];
	*AUDIO_VOLUME = speaker ->volume;

	speaker ->flag = SPEAKER_FLAG_DOWN;
   64004:	20000115 	stw	zero,4(r4)

	*AUDIO_START = 1;
   64008:	00c00044 	movi	r3,1
   6400c:	10980404 	addi	r2,r2,24592
   64010:	10c00015 	stw	r3,0(r2)
   64014:	f800283a 	ret

00064018 <Speaker_second_first_half>:
}

void Speaker_second_first_half(volatile Speaker_t* speaker){
	DMA_table_mem_t* table = (DMA_table_mem_t*) speaker -> disk ->memories ->table;
   64018:	20800217 	ldw	r2,8(r4)

	*AUDIO_START_ADDR = (uint32_t) &table[SOUND_BUFFER_SIZE];
   6401c:	00c000b4 	movhi	r3,2
   64020:	18d80104 	addi	r3,r3,24580

	*AUDIO_START = 1;
}

void Speaker_second_first_half(volatile Speaker_t* speaker){
	DMA_table_mem_t* table = (DMA_table_mem_t*) speaker -> disk ->memories ->table;
   64024:	10800417 	ldw	r2,16(r2)
   64028:	10800017 	ldw	r2,0(r2)

	*AUDIO_START_ADDR = (uint32_t) &table[SOUND_BUFFER_SIZE];
   6402c:	11500004 	addi	r5,r2,16384
   64030:	19400015 	stw	r5,0(r3)
	*AUDIO_STOP_ADDR = (uint32_t) &table[(2*SOUND_BUFFER_SIZE) - 2];
   64034:	00c000b4 	movhi	r3,2
   64038:	109fff04 	addi	r2,r2,32764
   6403c:	18d80204 	addi	r3,r3,24584
   64040:	18800015 	stw	r2,0(r3)
	*AUDIO_VOLUME = speaker ->volume;
   64044:	20800403 	ldbu	r2,16(r4)
   64048:	00c000b4 	movhi	r3,2
   6404c:	18d80304 	addi	r3,r3,24588
   64050:	10803fcc 	andi	r2,r2,255
   64054:	18800015 	stw	r2,0(r3)

	speaker ->flag = SPEAKER_FLAG_DOWN;

	*AUDIO_START = 1;
   64058:	008000b4 	movhi	r2,2

	*AUDIO_START_ADDR = (uint32_t) &table[SOUND_BUFFER_SIZE];
	*AUDIO_STOP_ADDR = (uint32_t) &table[(2*SOUND_BUFFER_SIZE) - 2];
	*AUDIO_VOLUME = speaker ->volume;

	speaker ->flag = SPEAKER_FLAG_DOWN;
   6405c:	20000115 	stw	zero,4(r4)

	*AUDIO_START = 1;
   64060:	00c00044 	movi	r3,1
   64064:	10980404 	addi	r2,r2,24592
   64068:	10c00015 	stw	r3,0(r2)
   6406c:	f800283a 	ret

00064070 <Speaker_wait_for_finish>:
}

Data_bool_t Speaker_wait_for_finish(volatile Speaker_t* speaker){
	if(speaker ->flag == SPEAKER_FLAG_DOWN){
   64070:	20800117 	ldw	r2,4(r4)
   64074:	10000326 	beq	r2,zero,64084 <Speaker_wait_for_finish+0x14>
		return DATA_TRUE;
	}else{
		speaker -> flag = SPEAKER_FLAG_DOWN;
   64078:	20000115 	stw	zero,4(r4)
		return DATA_FALSE;
   6407c:	0005883a 	mov	r2,zero
   64080:	f800283a 	ret
	*AUDIO_START = 1;
}

Data_bool_t Speaker_wait_for_finish(volatile Speaker_t* speaker){
	if(speaker ->flag == SPEAKER_FLAG_DOWN){
		return DATA_TRUE;
   64084:	00800044 	movi	r2,1
	}else{
		speaker -> flag = SPEAKER_FLAG_DOWN;
		return DATA_FALSE;
	}
}
   64088:	f800283a 	ret

0006408c <Speaker_init>:



void Speaker_init(volatile Speaker_t* speaker){
   6408c:	defffd04 	addi	sp,sp,-12
	alt_ic_isr_register(PWMAUDIO_0_IRQ_INTERRUPT_CONTROLLER_ID,PWMAUDIO_0_IRQ,audio_isr,(Speaker_t*)speaker,0);
   64090:	018001b4 	movhi	r6,6
	}
}



void Speaker_init(volatile Speaker_t* speaker){
   64094:	dc000115 	stw	r16,4(sp)
	alt_ic_isr_register(PWMAUDIO_0_IRQ_INTERRUPT_CONTROLLER_ID,PWMAUDIO_0_IRQ,audio_isr,(Speaker_t*)speaker,0);
   64098:	200f883a 	mov	r7,r4
	}
}



void Speaker_init(volatile Speaker_t* speaker){
   6409c:	2021883a 	mov	r16,r4
	alt_ic_isr_register(PWMAUDIO_0_IRQ_INTERRUPT_CONTROLLER_ID,PWMAUDIO_0_IRQ,audio_isr,(Speaker_t*)speaker,0);
   640a0:	d8000015 	stw	zero,0(sp)
   640a4:	318feb04 	addi	r6,r6,16300
   640a8:	01400184 	movi	r5,6
   640ac:	0009883a 	mov	r4,zero
	}
}



void Speaker_init(volatile Speaker_t* speaker){
   640b0:	dfc00215 	stw	ra,8(sp)
	alt_ic_isr_register(PWMAUDIO_0_IRQ_INTERRUPT_CONTROLLER_ID,PWMAUDIO_0_IRQ,audio_isr,(Speaker_t*)speaker,0);
   640b4:	00648b00 	call	648b0 <alt_ic_isr_register>
	start_speaker(speaker);
   640b8:	8009883a 	mov	r4,r16
}
   640bc:	dfc00217 	ldw	ra,8(sp)
   640c0:	dc000117 	ldw	r16,4(sp)
   640c4:	dec00304 	addi	sp,sp,12



void Speaker_init(volatile Speaker_t* speaker){
	alt_ic_isr_register(PWMAUDIO_0_IRQ_INTERRUPT_CONTROLLER_ID,PWMAUDIO_0_IRQ,audio_isr,(Speaker_t*)speaker,0);
	start_speaker(speaker);
   640c8:	0063ed41 	jmpi	63ed4 <start_speaker>

000640cc <Control_count_sum>:
 *      Author: micha
 */
#include "control_sum_types.h"
#include "inttypes.h"

Simple_control_sum_t Control_count_sum(uint8_t* data, Simple_control_sum_size_t size){
   640cc:	214b883a 	add	r5,r4,r5
	Simple_control_sum_t counted_sum = 0;
   640d0:	0005883a 	mov	r2,zero

	for(Simple_control_sum_size_t n = 0 ; n < size ; n++){

		for(int32_t bitcounter = 7; bitcounter >= 0; bitcounter --){
   640d4:	023fffc4 	movi	r8,-1
#include "inttypes.h"

Simple_control_sum_t Control_count_sum(uint8_t* data, Simple_control_sum_size_t size){
	Simple_control_sum_t counted_sum = 0;

	for(Simple_control_sum_size_t n = 0 ; n < size ; n++){
   640d8:	29000926 	beq	r5,r4,64100 <Control_count_sum+0x34>

		for(int32_t bitcounter = 7; bitcounter >= 0; bitcounter --){
			counted_sum += (data[n] >> bitcounter) & 0x1;
   640dc:	21c00003 	ldbu	r7,0(r4)
   640e0:	00c001c4 	movi	r3,7
   640e4:	38cdd83a 	sra	r6,r7,r3
Simple_control_sum_t Control_count_sum(uint8_t* data, Simple_control_sum_size_t size){
	Simple_control_sum_t counted_sum = 0;

	for(Simple_control_sum_size_t n = 0 ; n < size ; n++){

		for(int32_t bitcounter = 7; bitcounter >= 0; bitcounter --){
   640e8:	18ffffc4 	addi	r3,r3,-1
			counted_sum += (data[n] >> bitcounter) & 0x1;
   640ec:	3180004c 	andi	r6,r6,1
   640f0:	3085883a 	add	r2,r6,r2
Simple_control_sum_t Control_count_sum(uint8_t* data, Simple_control_sum_size_t size){
	Simple_control_sum_t counted_sum = 0;

	for(Simple_control_sum_size_t n = 0 ; n < size ; n++){

		for(int32_t bitcounter = 7; bitcounter >= 0; bitcounter --){
   640f4:	1a3ffb1e 	bne	r3,r8,640e4 <__alt_data_end+0xffff00e4>
   640f8:	21000044 	addi	r4,r4,1
   640fc:	003ff606 	br	640d8 <__alt_data_end+0xffff00d8>


	}

	return ~counted_sum;
}
   64100:	0084303a 	nor	r2,zero,r2
   64104:	f800283a 	ret

00064108 <from64toChar>:
#define END_OF_STRING 		0

typedef uint32_t Data_position_t;

uint8_t from64toChar(uint8_t character){
    if(character <= 9){
   64108:	20803fcc 	andi	r2,r4,255
   6410c:	00c00244 	movi	r3,9
   64110:	18800236 	bltu	r3,r2,6411c <from64toChar+0x14>
        return character + '0';
   64114:	20800c04 	addi	r2,r4,48
   64118:	f800283a 	ret
    }else if(character >= 10 && character <= 25 + 10){
   6411c:	20fffd84 	addi	r3,r4,-10
   64120:	18c03fcc 	andi	r3,r3,255
   64124:	01400644 	movi	r5,25
   64128:	28c00236 	bltu	r5,r3,64134 <from64toChar+0x2c>
        return character - 10 + 'A';
   6412c:	20800dc4 	addi	r2,r4,55
   64130:	f800283a 	ret
    }else if(character >= 26 + 10 && character <= 26 + 25 + 10){
   64134:	20fff704 	addi	r3,r4,-36
   64138:	18c03fcc 	andi	r3,r3,255
   6413c:	28c00236 	bltu	r5,r3,64148 <from64toChar+0x40>
        return character - 26 - 10 + 'a';
   64140:	20800f44 	addi	r2,r4,61
   64144:	f800283a 	ret
    }else if(character == 26+26+10){
        return ' ';
    }else{
        return 0;
   64148:	10800fa0 	cmpeqi	r2,r2,62
   6414c:	1004917a 	slli	r2,r2,5
    }
}
   64150:	f800283a 	ret

00064154 <from64toBytes>:

Data_bool_t from64toBytes(uint8_t* data,uint8_t* string,Parse_size_t size){
   64154:	defff704 	addi	sp,sp,-36
   64158:	ddc00715 	stw	r23,28(sp)
   6415c:	dd800615 	stw	r22,24(sp)
   64160:	dd400515 	stw	r21,20(sp)
   64164:	dd000415 	stw	r20,16(sp)
   64168:	dcc00315 	stw	r19,12(sp)
   6416c:	dc400115 	stw	r17,4(sp)
   64170:	dc000015 	stw	r16,0(sp)
   64174:	dfc00815 	stw	ra,32(sp)
   64178:	dc800215 	stw	r18,8(sp)
   6417c:	282b883a 	mov	r21,r5
   64180:	2023883a 	mov	r17,r4
   64184:	21a9883a 	add	r20,r4,r6

    Parse_buffer_t buffer = 0;
    Parse_size_t index = 0;

    Parse_size_t k = 0;
   64188:	0027883a 	mov	r19,zero
}

Data_bool_t from64toBytes(uint8_t* data,uint8_t* string,Parse_size_t size){

    Parse_buffer_t buffer = 0;
    Parse_size_t index = 0;
   6418c:	0005883a 	mov	r2,zero
    }
}

Data_bool_t from64toBytes(uint8_t* data,uint8_t* string,Parse_size_t size){

    Parse_buffer_t buffer = 0;
   64190:	0021883a 	mov	r16,zero
    for(Parse_size_t n = 0 ; n < size ; n++){

        buffer = (buffer << BYTE_OFFSET) | data[n];
        index ++;

        if(index == TRIPLETS){
   64194:	058000c4 	movi	r22,3

            Parse_size_t shift = 3 * BASE_64_BASE;
            for(Parse_size_t p = 0; p < IN_PACKET ; p++){
   64198:	05fffe84 	movi	r23,-6
    Parse_buffer_t buffer = 0;
    Parse_size_t index = 0;

    Parse_size_t k = 0;

    for(Parse_size_t n = 0 ; n < size ; n++){
   6419c:	a4401426 	beq	r20,r17,641f0 <from64toBytes+0x9c>

        buffer = (buffer << BYTE_OFFSET) | data[n];
   641a0:	8020923a 	slli	r16,r16,8
   641a4:	88c00003 	ldbu	r3,0(r17)
        index ++;
   641a8:	10800044 	addi	r2,r2,1

    Parse_size_t k = 0;

    for(Parse_size_t n = 0 ; n < size ; n++){

        buffer = (buffer << BYTE_OFFSET) | data[n];
   641ac:	1c20b03a 	or	r16,r3,r16
        index ++;

        if(index == TRIPLETS){
   641b0:	15800d1e 	bne	r2,r22,641e8 <from64toBytes+0x94>
   641b4:	04800484 	movi	r18,18

            Parse_size_t shift = 3 * BASE_64_BASE;
            for(Parse_size_t p = 0; p < IN_PACKET ; p++){

                uint8_t base = (buffer >> shift) & BIT_6_MASK;
                string[k] = from64toChar(base);
   641b8:	8488d83a 	srl	r4,r16,r18
   641bc:	21000fcc 	andi	r4,r4,63
   641c0:	00641080 	call	64108 <from64toChar>
   641c4:	acc7883a 	add	r3,r21,r19
   641c8:	18800005 	stb	r2,0(r3)

                if(string[k] == END_OF_STRING){
   641cc:	10803fcc 	andi	r2,r2,255
   641d0:	10000926 	beq	r2,zero,641f8 <from64toBytes+0xa4>
                    return DATA_FALSE;
                }

                k++;
                shift -= BASE_64_BASE;
   641d4:	94bffe84 	addi	r18,r18,-6

                if(string[k] == END_OF_STRING){
                    return DATA_FALSE;
                }

                k++;
   641d8:	9cc00044 	addi	r19,r19,1
        index ++;

        if(index == TRIPLETS){

            Parse_size_t shift = 3 * BASE_64_BASE;
            for(Parse_size_t p = 0; p < IN_PACKET ; p++){
   641dc:	95fff61e 	bne	r18,r23,641b8 <__alt_data_end+0xffff01b8>

                k++;
                shift -= BASE_64_BASE;
            }

            index = 0;
   641e0:	0005883a 	mov	r2,zero
            buffer = 0;
   641e4:	0021883a 	mov	r16,zero
   641e8:	8c400044 	addi	r17,r17,1
   641ec:	003feb06 	br	6419c <__alt_data_end+0xffff019c>
        }
    }

    return DATA_TRUE;
   641f0:	00800044 	movi	r2,1
   641f4:	00000106 	br	641fc <from64toBytes+0xa8>

                uint8_t base = (buffer >> shift) & BIT_6_MASK;
                string[k] = from64toChar(base);

                if(string[k] == END_OF_STRING){
                    return DATA_FALSE;
   641f8:	0005883a 	mov	r2,zero
            buffer = 0;
        }
    }

    return DATA_TRUE;
}
   641fc:	dfc00817 	ldw	ra,32(sp)
   64200:	ddc00717 	ldw	r23,28(sp)
   64204:	dd800617 	ldw	r22,24(sp)
   64208:	dd400517 	ldw	r21,20(sp)
   6420c:	dd000417 	ldw	r20,16(sp)
   64210:	dcc00317 	ldw	r19,12(sp)
   64214:	dc800217 	ldw	r18,8(sp)
   64218:	dc400117 	ldw	r17,4(sp)
   6421c:	dc000017 	ldw	r16,0(sp)
   64220:	dec00904 	addi	sp,sp,36
   64224:	f800283a 	ret

00064228 <read_16_value>:
		value = (value << 8) | *ptr;

		ptr++;
	}

	return value;
   64228:	20800003 	ldbu	r2,0(r4)
   6422c:	20c00043 	ldbu	r3,1(r4)
   64230:	1004923a 	slli	r2,r2,8
}
   64234:	10c4b03a 	or	r2,r2,r3
   64238:	f800283a 	ret

0006423c <read_32_value>:

uint32_t read_32_value(uint8_t* read){
   6423c:	20c00104 	addi	r3,r4,4
	uint32_t value = 0;
   64240:	0005883a 	mov	r2,zero
	uint8_t* ptr = read;

	for(Data_position_t n=0; n < 4 ; n++){

		value = (value << 8) | *ptr;
   64244:	21400003 	ldbu	r5,0(r4)
   64248:	1004923a 	slli	r2,r2,8

		ptr++;
   6424c:	21000044 	addi	r4,r4,1
	uint32_t value = 0;
	uint8_t* ptr = read;

	for(Data_position_t n=0; n < 4 ; n++){

		value = (value << 8) | *ptr;
   64250:	2884b03a 	or	r2,r5,r2

uint32_t read_32_value(uint8_t* read){
	uint32_t value = 0;
	uint8_t* ptr = read;

	for(Data_position_t n=0; n < 4 ; n++){
   64254:	193ffb1e 	bne	r3,r4,64244 <__alt_data_end+0xffff0244>

		ptr++;
	}

	return value;
}
   64258:	f800283a 	ret

0006425c <is_empty_str>:

Data_bool_t is_empty_str(uint8_t* read1,Data_size_t size){
   6425c:	214b883a 	add	r5,r4,r5
	for(Data_position_t n = 0 ; n < size ; n++){
   64260:	21400526 	beq	r4,r5,64278 <is_empty_str+0x1c>
   64264:	21000044 	addi	r4,r4,1
		if(read1[n] != 0)
   64268:	20bfffc3 	ldbu	r2,-1(r4)
   6426c:	103ffc26 	beq	r2,zero,64260 <__alt_data_end+0xffff0260>
			return DATA_FALSE;
   64270:	0005883a 	mov	r2,zero

	}
	return DATA_TRUE;

}
   64274:	f800283a 	ret
	for(Data_position_t n = 0 ; n < size ; n++){
		if(read1[n] != 0)
			return DATA_FALSE;

	}
	return DATA_TRUE;
   64278:	00800044 	movi	r2,1
   6427c:	f800283a 	ret

00064280 <str_clr>:

}

void str_clr(uint8_t* read1,Data_size_t size){
   64280:	214b883a 	add	r5,r4,r5
	for(Data_position_t n = 0 ; n < size ; n++){
   64284:	21400326 	beq	r4,r5,64294 <str_clr+0x14>
		read1[n] = 0;
   64288:	20000005 	stb	zero,0(r4)
   6428c:	21000044 	addi	r4,r4,1
   64290:	003ffc06 	br	64284 <__alt_data_end+0xffff0284>

	}

}
   64294:	f800283a 	ret

00064298 <str_cpy>:

Data_bool_t str_cpy(uint8_t* read1,uint8_t* read2,Data_size_t size){
	for(Data_position_t n = 0 ; n < size ; n++){
   64298:	0005883a 	mov	r2,zero
   6429c:	11800b26 	beq	r2,r6,642cc <str_cpy+0x34>

		if(read1[n] == 0){
   642a0:	2087883a 	add	r3,r4,r2
   642a4:	19c00003 	ldbu	r7,0(r3)
   642a8:	2887883a 	add	r3,r5,r2
   642ac:	3a003fcc 	andi	r8,r7,255
   642b0:	4000031e 	bne	r8,zero,642c0 <str_cpy+0x28>
			read2[n] = 0;
   642b4:	18000005 	stb	zero,0(r3)
			return DATA_TRUE;
   642b8:	00800044 	movi	r2,1
   642bc:	f800283a 	ret
		}

		read2[n] = read1[n];
   642c0:	19c00005 	stb	r7,0(r3)
	}

}

Data_bool_t str_cpy(uint8_t* read1,uint8_t* read2,Data_size_t size){
	for(Data_position_t n = 0 ; n < size ; n++){
   642c4:	10800044 	addi	r2,r2,1
   642c8:	003ff406 	br	6429c <__alt_data_end+0xffff029c>

		read2[n] = read1[n];

	}

	return DATA_FALSE;
   642cc:	0005883a 	mov	r2,zero
}
   642d0:	f800283a 	ret

000642d4 <compare>:

Data_bool_t compare(uint8_t* read1,uint8_t* read2,Data_size_t size){
   642d4:	298d883a 	add	r6,r5,r6
	for(Data_position_t n = 0 ; n < size ; n++){
   642d8:	29800926 	beq	r5,r6,64300 <compare+0x2c>

		if(read1[n] == 0){
   642dc:	20c00003 	ldbu	r3,0(r4)
   642e0:	18000726 	beq	r3,zero,64300 <compare+0x2c>
			break;
		}

		if(read1[n] != read2[n]){
   642e4:	28800003 	ldbu	r2,0(r5)
   642e8:	21000044 	addi	r4,r4,1
   642ec:	29400044 	addi	r5,r5,1
   642f0:	10803fcc 	andi	r2,r2,255
   642f4:	18bff826 	beq	r3,r2,642d8 <__alt_data_end+0xffff02d8>
			return DATA_FALSE;
   642f8:	0005883a 	mov	r2,zero
		}

	}

	return DATA_TRUE;
}
   642fc:	f800283a 	ret
			return DATA_FALSE;
		}

	}

	return DATA_TRUE;
   64300:	00800044 	movi	r2,1
   64304:	f800283a 	ret

00064308 <printnum>:
 */
#include "sys/alt_stdio.h"
#include "inttypes.h"
#define MAX_RANGE (int)100000000

void printnum(int number){
   64308:	defff904 	addi	sp,sp,-28
   6430c:	dc000015 	stw	r16,0(sp)

	int numbuf = number;

	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
   64310:	04017db4 	movhi	r16,1526
 */
#include "sys/alt_stdio.h"
#include "inttypes.h"
#define MAX_RANGE (int)100000000

void printnum(int number){
   64314:	dd000415 	stw	r20,16(sp)
   64318:	dc800215 	stw	r18,8(sp)
   6431c:	dc400115 	stw	r17,4(sp)
   64320:	dfc00615 	stw	ra,24(sp)
   64324:	dd400515 	stw	r21,20(sp)
   64328:	dcc00315 	stw	r19,12(sp)
   6432c:	2025883a 	mov	r18,r4
   64330:	04400244 	movi	r17,9

	int numbuf = number;

	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
   64334:	84384004 	addi	r16,r16,-7936

void printnum(int number){

	int numbuf = number;

	char started = 0;
   64338:	0029883a 	mov	r20,zero

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
		int num = numbuf / n;
   6433c:	800b883a 	mov	r5,r16
   64340:	9009883a 	mov	r4,r18
   64344:	00646ac0 	call	646ac <__divsi3>
		int eq = n * num;
   64348:	800b883a 	mov	r5,r16
   6434c:	1009883a 	mov	r4,r2
	int numbuf = number;

	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
		int num = numbuf / n;
   64350:	1027883a 	mov	r19,r2
		int eq = n * num;
   64354:	00648600 	call	64860 <__mulsi3>
   64358:	102b883a 	mov	r21,r2

		if(num != 0){
   6435c:	9800041e 	bne	r19,zero,64370 <printnum+0x68>
			started = 1;
		}

		if(started){
   64360:	a0803fcc 	andi	r2,r20,255
   64364:	1080201c 	xori	r2,r2,128
   64368:	10bfe004 	addi	r2,r2,-128
   6436c:	10000526 	beq	r2,zero,64384 <printnum+0x7c>
			alt_printf("%x",num);
   64370:	010001b4 	movhi	r4,6
   64374:	980b883a 	mov	r5,r19
   64378:	2113dc04 	addi	r4,r4,20336
   6437c:	0064ab00 	call	64ab0 <alt_printf>
   64380:	05000044 	movi	r20,1

	int numbuf = number;

	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
   64384:	8009883a 	mov	r4,r16
   64388:	01400284 	movi	r5,10
   6438c:	00646ac0 	call	646ac <__divsi3>
   64390:	8c7fffc4 	addi	r17,r17,-1
		if(started){
			alt_printf("%x",num);
		}


		numbuf -= eq;
   64394:	9565c83a 	sub	r18,r18,r21

	int numbuf = number;

	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
   64398:	1021883a 	mov	r16,r2
   6439c:	883fe71e 	bne	r17,zero,6433c <__alt_data_end+0xffff033c>
		}


		numbuf -= eq;
	}
}
   643a0:	dfc00617 	ldw	ra,24(sp)
   643a4:	dd400517 	ldw	r21,20(sp)
   643a8:	dd000417 	ldw	r20,16(sp)
   643ac:	dcc00317 	ldw	r19,12(sp)
   643b0:	dc800217 	ldw	r18,8(sp)
   643b4:	dc400117 	ldw	r17,4(sp)
   643b8:	dc000017 	ldw	r16,0(sp)
   643bc:	dec00704 	addi	sp,sp,28
   643c0:	f800283a 	ret

000643c4 <snprintnum>:

void snprintnum(uint8_t* buffer, int number){
   643c4:	defff804 	addi	sp,sp,-32
   643c8:	dc800215 	stw	r18,8(sp)

	int numbuf = number;
	int index = 0;
	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
   643cc:	04817db4 	movhi	r18,1526

		numbuf -= eq;
	}
}

void snprintnum(uint8_t* buffer, int number){
   643d0:	dd800615 	stw	r22,24(sp)
   643d4:	dd400515 	stw	r21,20(sp)
   643d8:	dd000415 	stw	r20,16(sp)
   643dc:	dcc00315 	stw	r19,12(sp)
   643e0:	dc000015 	stw	r16,0(sp)
   643e4:	dfc00715 	stw	ra,28(sp)
   643e8:	dc400115 	stw	r17,4(sp)
   643ec:	202b883a 	mov	r21,r4
   643f0:	2829883a 	mov	r20,r5
   643f4:	04c00244 	movi	r19,9

	int numbuf = number;
	int index = 0;
	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
   643f8:	94b84004 	addi	r18,r18,-7936

void snprintnum(uint8_t* buffer, int number){

	int numbuf = number;
	int index = 0;
	char started = 0;
   643fc:	002d883a 	mov	r22,zero
}

void snprintnum(uint8_t* buffer, int number){

	int numbuf = number;
	int index = 0;
   64400:	0021883a 	mov	r16,zero
	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
		int num = numbuf / n;
   64404:	900b883a 	mov	r5,r18
   64408:	a009883a 	mov	r4,r20
   6440c:	00646ac0 	call	646ac <__divsi3>
   64410:	1023883a 	mov	r17,r2
		int eq = n * num;
   64414:	900b883a 	mov	r5,r18
   64418:	1009883a 	mov	r4,r2
   6441c:	00648600 	call	64860 <__mulsi3>

		if(num != 0){
   64420:	8800041e 	bne	r17,zero,64434 <snprintnum+0x70>
			started = 1;
		}

		if(started){
   64424:	b0c03fcc 	andi	r3,r22,255
   64428:	18c0201c 	xori	r3,r3,128
   6442c:	18ffe004 	addi	r3,r3,-128
   64430:	18000526 	beq	r3,zero,64448 <snprintnum+0x84>
			buffer[index] = num + '0';
   64434:	ac07883a 	add	r3,r21,r16
   64438:	8c400c04 	addi	r17,r17,48
   6443c:	1c400005 	stb	r17,0(r3)
			index ++;
   64440:	84000044 	addi	r16,r16,1
   64444:	05800044 	movi	r22,1

	int numbuf = number;
	int index = 0;
	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
   64448:	9009883a 	mov	r4,r18
   6444c:	01400284 	movi	r5,10
			buffer[index] = num + '0';
			index ++;
		}


		numbuf -= eq;
   64450:	a0a9c83a 	sub	r20,r20,r2
   64454:	9cffffc4 	addi	r19,r19,-1

	int numbuf = number;
	int index = 0;
	char started = 0;

	for(int n= MAX_RANGE ; n>0 ; n/=10 ){
   64458:	00646ac0 	call	646ac <__divsi3>
   6445c:	1025883a 	mov	r18,r2
   64460:	983fe81e 	bne	r19,zero,64404 <__alt_data_end+0xffff0404>
		}


		numbuf -= eq;
	}
	buffer[index] = 0;
   64464:	ac21883a 	add	r16,r21,r16
   64468:	80000005 	stb	zero,0(r16)
}
   6446c:	dfc00717 	ldw	ra,28(sp)
   64470:	dd800617 	ldw	r22,24(sp)
   64474:	dd400517 	ldw	r21,20(sp)
   64478:	dd000417 	ldw	r20,16(sp)
   6447c:	dcc00317 	ldw	r19,12(sp)
   64480:	dc800217 	ldw	r18,8(sp)
   64484:	dc400117 	ldw	r17,4(sp)
   64488:	dc000017 	ldw	r16,0(sp)
   6448c:	dec00804 	addi	sp,sp,32
   64490:	f800283a 	ret

00064494 <reset_processor>:

#define ALT_CPU_RESET_ADDR 0x00060000

void reset_processor(){

	  NIOS2_WRITE_STATUS(0);
   64494:	0001703a 	wrctl	status,zero
	  NIOS2_WRITE_IENABLE(0);
   64498:	000170fa 	wrctl	ienable,zero
   6449c:	f800283a 	ret

000644a0 <timer_isr>:
#define GPIO_DISTANCE_CHECK_DIST 		(volatile uint32_t*) 0x27008

static void timer_isr (void * context){

	volatile Timer_t* timer = (Timer_t*) context;
	timer -> nano_timer ++;
   644a0:	20800017 	ldw	r2,0(r4)

#define GPIO_DISTANCE_START_SIGNAL 		(volatile uint32_t*) 0x27000
#define GPIO_DISTANCE_WRTIE 			(volatile uint32_t*) 0x27004
#define GPIO_DISTANCE_CHECK_DIST 		(volatile uint32_t*) 0x27008

static void timer_isr (void * context){
   644a4:	defffe04 	addi	sp,sp,-8
   644a8:	dc000015 	stw	r16,0(sp)

	volatile Timer_t* timer = (Timer_t*) context;
	timer -> nano_timer ++;
   644ac:	10800044 	addi	r2,r2,1

#define GPIO_DISTANCE_START_SIGNAL 		(volatile uint32_t*) 0x27000
#define GPIO_DISTANCE_WRTIE 			(volatile uint32_t*) 0x27004
#define GPIO_DISTANCE_CHECK_DIST 		(volatile uint32_t*) 0x27008

static void timer_isr (void * context){
   644b0:	dfc00115 	stw	ra,4(sp)

	volatile Timer_t* timer = (Timer_t*) context;
	timer -> nano_timer ++;
   644b4:	20800015 	stw	r2,0(r4)

	if(timer -> nano_timer == 10){
   644b8:	20c00017 	ldw	r3,0(r4)
   644bc:	00800284 	movi	r2,10

#define GPIO_DISTANCE_START_SIGNAL 		(volatile uint32_t*) 0x27000
#define GPIO_DISTANCE_WRTIE 			(volatile uint32_t*) 0x27004
#define GPIO_DISTANCE_CHECK_DIST 		(volatile uint32_t*) 0x27008

static void timer_isr (void * context){
   644c0:	2021883a 	mov	r16,r4

	volatile Timer_t* timer = (Timer_t*) context;
	timer -> nano_timer ++;

	if(timer -> nano_timer == 10){
   644c4:	18801a1e 	bne	r3,r2,64530 <timer_isr+0x90>
		timer -> timer ++;
   644c8:	20800217 	ldw	r2,8(r4)
   644cc:	10800044 	addi	r2,r2,1
   644d0:	20800215 	stw	r2,8(r4)
		timer -> milis_timer ++;
   644d4:	20800117 	ldw	r2,4(r4)
   644d8:	10800044 	addi	r2,r2,1
   644dc:	20800115 	stw	r2,4(r4)

		if(timer -> milis_timer ==  1000){
   644e0:	20c00117 	ldw	r3,4(r4)
   644e4:	0080fa04 	movi	r2,1000
   644e8:	1880101e 	bne	r3,r2,6452c <timer_isr+0x8c>
			timer -> datetime ++;
   644ec:	20800317 	ldw	r2,12(r4)
   644f0:	20c00417 	ldw	r3,16(r4)
   644f4:	11000044 	addi	r4,r2,1
   644f8:	2085803a 	cmpltu	r2,r4,r2
   644fc:	10c5883a 	add	r2,r2,r3
   64500:	81000315 	stw	r4,12(r16)
   64504:	80800415 	stw	r2,16(r16)

			if(timer -> datetime == 100000000){
   64508:	81000317 	ldw	r4,12(r16)
   6450c:	00c17db4 	movhi	r3,1526
   64510:	80800417 	ldw	r2,16(r16)
   64514:	18f84004 	addi	r3,r3,-7936
   64518:	20c0031e 	bne	r4,r3,64528 <timer_isr+0x88>
   6451c:	1000021e 	bne	r2,zero,64528 <timer_isr+0x88>
				timer -> datetime = 0;
   64520:	80000315 	stw	zero,12(r16)
   64524:	80000415 	stw	zero,16(r16)
			}
			timer -> milis_timer = 0;
   64528:	80000115 	stw	zero,4(r16)
		}


		timer -> nano_timer = 0;
   6452c:	80000015 	stw	zero,0(r16)

	}

	animate_gpio_status(timer -> gpio,timer -> nano_timer);
   64530:	81000617 	ldw	r4,24(r16)
   64534:	81400017 	ldw	r5,0(r16)
   64538:	00635d40 	call	635d4 <animate_gpio_status>
	irq_distance_measurement(timer ->mdistance);
   6453c:	81000517 	ldw	r4,20(r16)
   64540:	00631940 	call	63194 <irq_distance_measurement>

	*TIMER_FLAG_IRQ_RET = 0;
   64544:	008000b4 	movhi	r2,2
   64548:	10880004 	addi	r2,r2,8192
   6454c:	10000015 	stw	zero,0(r2)
}
   64550:	dfc00117 	ldw	ra,4(sp)
   64554:	dc000017 	ldw	r16,0(sp)
   64558:	dec00204 	addi	sp,sp,8
   6455c:	f800283a 	ret

00064560 <Timer_init>:


void Timer_init(volatile Timer_t* timer){
   64560:	defffe04 	addi	sp,sp,-8
	// Timer config
	*TIMER_SET_MAX_TIME = TIMER_CYCLE;
   64564:	008000b4 	movhi	r2,2

	*TIMER_FLAG_IRQ_RET = 0;
}


void Timer_init(volatile Timer_t* timer){
   64568:	dfc00115 	stw	ra,4(sp)
	// Timer config
	*TIMER_SET_MAX_TIME = TIMER_CYCLE;
   6456c:	00c9c404 	movi	r3,10000
   64570:	10880204 	addi	r2,r2,8200
   64574:	10c00015 	stw	r3,0(r2)
	*TIMER_ENABLE_TIMER = 1;
   64578:	008000b4 	movhi	r2,2
   6457c:	01400044 	movi	r5,1
   64580:	10880304 	addi	r2,r2,8204
   64584:	11400015 	stw	r5,0(r2)

	timer -> timer = 0;
   64588:	20000215 	stw	zero,8(r4)
	timer -> datetime = 0;
   6458c:	20000315 	stw	zero,12(r4)
   64590:	20000415 	stw	zero,16(r4)
	timer -> nano_timer = 0;
   64594:	20000015 	stw	zero,0(r4)
	timer -> milis_timer = 0;
   64598:	20000115 	stw	zero,4(r4)

	alt_ic_isr_register(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID, BASICTIMER_IRQ, timer_isr, (Timer_t*) timer, 0);
   6459c:	018001b4 	movhi	r6,6
   645a0:	200f883a 	mov	r7,r4
   645a4:	d8000015 	stw	zero,0(sp)
   645a8:	31912804 	addi	r6,r6,17568
   645ac:	0009883a 	mov	r4,zero
   645b0:	00648b00 	call	648b0 <alt_ic_isr_register>
}
   645b4:	dfc00117 	ldw	ra,4(sp)
   645b8:	dec00204 	addi	sp,sp,8
   645bc:	f800283a 	ret

000645c0 <Timer_reset>:

void Timer_reset(volatile Timer_t* timer){
   645c0:	defffd04 	addi	sp,sp,-12
   645c4:	dc000015 	stw	r16,0(sp)
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   645c8:	04000044 	movi	r16,1
	timer -> milis_timer = 0;

	alt_ic_isr_register(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID, BASICTIMER_IRQ, timer_isr, (Timer_t*) timer, 0);
}

void Timer_reset(volatile Timer_t* timer){
   645cc:	dc400115 	stw	r17,4(sp)
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   645d0:	800b883a 	mov	r5,r16
	timer -> milis_timer = 0;

	alt_ic_isr_register(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID, BASICTIMER_IRQ, timer_isr, (Timer_t*) timer, 0);
}

void Timer_reset(volatile Timer_t* timer){
   645d4:	2023883a 	mov	r17,r4
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   645d8:	0009883a 	mov	r4,zero
	timer -> milis_timer = 0;

	alt_ic_isr_register(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID, BASICTIMER_IRQ, timer_isr, (Timer_t*) timer, 0);
}

void Timer_reset(volatile Timer_t* timer){
   645dc:	dfc00215 	stw	ra,8(sp)
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   645e0:	00648ec0 	call	648ec <alt_ic_irq_disable>
	timer -> timer = 0;
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   645e4:	800b883a 	mov	r5,r16
   645e8:	0009883a 	mov	r4,zero
	alt_ic_isr_register(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID, BASICTIMER_IRQ, timer_isr, (Timer_t*) timer, 0);
}

void Timer_reset(volatile Timer_t* timer){
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
	timer -> timer = 0;
   645ec:	88000215 	stw	zero,8(r17)
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}
   645f0:	dfc00217 	ldw	ra,8(sp)
   645f4:	dc400117 	ldw	r17,4(sp)
   645f8:	dc000017 	ldw	r16,0(sp)
   645fc:	dec00304 	addi	sp,sp,12
}

void Timer_reset(volatile Timer_t* timer){
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
	timer -> timer = 0;
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   64600:	00648b41 	jmpi	648b4 <alt_ic_irq_enable>

00064604 <Timer_get_datetime>:
}

int timess = 0;

Datetime_t Timer_get_datetime(volatile Timer_t* timer){
   64604:	defffc04 	addi	sp,sp,-16
   64608:	dc000015 	stw	r16,0(sp)
	Datetime_t time = 0;

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   6460c:	04000044 	movi	r16,1
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

int timess = 0;

Datetime_t Timer_get_datetime(volatile Timer_t* timer){
   64610:	dc400115 	stw	r17,4(sp)
	Datetime_t time = 0;

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   64614:	800b883a 	mov	r5,r16
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

int timess = 0;

Datetime_t Timer_get_datetime(volatile Timer_t* timer){
   64618:	2023883a 	mov	r17,r4
	Datetime_t time = 0;

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   6461c:	0009883a 	mov	r4,zero
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
}

int timess = 0;

Datetime_t Timer_get_datetime(volatile Timer_t* timer){
   64620:	dfc00315 	stw	ra,12(sp)
   64624:	dc800215 	stw	r18,8(sp)
	Datetime_t time = 0;

	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   64628:	00648ec0 	call	648ec <alt_ic_irq_disable>
	time = timer ->datetime;
   6462c:	8c800317 	ldw	r18,12(r17)
   64630:	8c400417 	ldw	r17,16(r17)
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   64634:	800b883a 	mov	r5,r16
   64638:	0009883a 	mov	r4,zero
   6463c:	00648b40 	call	648b4 <alt_ic_irq_enable>

	return time;
}
   64640:	9005883a 	mov	r2,r18
   64644:	8807883a 	mov	r3,r17
   64648:	dfc00317 	ldw	ra,12(sp)
   6464c:	dc800217 	ldw	r18,8(sp)
   64650:	dc400117 	ldw	r17,4(sp)
   64654:	dc000017 	ldw	r16,0(sp)
   64658:	dec00404 	addi	sp,sp,16
   6465c:	f800283a 	ret

00064660 <Timer_get_time>:

Timer_time_t Timer_get_time(volatile Timer_t* timer){
   64660:	defffd04 	addi	sp,sp,-12
   64664:	dc000015 	stw	r16,0(sp)

	Timer_time_t m_timer = 0;
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   64668:	04000044 	movi	r16,1
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);

	return time;
}

Timer_time_t Timer_get_time(volatile Timer_t* timer){
   6466c:	dc400115 	stw	r17,4(sp)

	Timer_time_t m_timer = 0;
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   64670:	800b883a 	mov	r5,r16
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);

	return time;
}

Timer_time_t Timer_get_time(volatile Timer_t* timer){
   64674:	2023883a 	mov	r17,r4

	Timer_time_t m_timer = 0;
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   64678:	0009883a 	mov	r4,zero
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);

	return time;
}

Timer_time_t Timer_get_time(volatile Timer_t* timer){
   6467c:	dfc00215 	stw	ra,8(sp)

	Timer_time_t m_timer = 0;
	alt_ic_irq_disable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   64680:	00648ec0 	call	648ec <alt_ic_irq_disable>
	m_timer = timer -> timer;
   64684:	8c400217 	ldw	r17,8(r17)
	alt_ic_irq_enable(BASICTIMER_IRQ_INTERRUPT_CONTROLLER_ID,BASICTIMER_IRQ);
   64688:	800b883a 	mov	r5,r16
   6468c:	0009883a 	mov	r4,zero
   64690:	00648b40 	call	648b4 <alt_ic_irq_enable>

	return m_timer;
}
   64694:	8805883a 	mov	r2,r17
   64698:	dfc00217 	ldw	ra,8(sp)
   6469c:	dc400117 	ldw	r17,4(sp)
   646a0:	dc000017 	ldw	r16,0(sp)
   646a4:	dec00304 	addi	sp,sp,12
   646a8:	f800283a 	ret

000646ac <__divsi3>:
   646ac:	20001b16 	blt	r4,zero,6471c <__divsi3+0x70>
   646b0:	000f883a 	mov	r7,zero
   646b4:	28001616 	blt	r5,zero,64710 <__divsi3+0x64>
   646b8:	200d883a 	mov	r6,r4
   646bc:	29001a2e 	bgeu	r5,r4,64728 <__divsi3+0x7c>
   646c0:	00800804 	movi	r2,32
   646c4:	00c00044 	movi	r3,1
   646c8:	00000106 	br	646d0 <__divsi3+0x24>
   646cc:	10000d26 	beq	r2,zero,64704 <__divsi3+0x58>
   646d0:	294b883a 	add	r5,r5,r5
   646d4:	10bfffc4 	addi	r2,r2,-1
   646d8:	18c7883a 	add	r3,r3,r3
   646dc:	293ffb36 	bltu	r5,r4,646cc <__alt_data_end+0xffff06cc>
   646e0:	0005883a 	mov	r2,zero
   646e4:	18000726 	beq	r3,zero,64704 <__divsi3+0x58>
   646e8:	0005883a 	mov	r2,zero
   646ec:	31400236 	bltu	r6,r5,646f8 <__divsi3+0x4c>
   646f0:	314dc83a 	sub	r6,r6,r5
   646f4:	10c4b03a 	or	r2,r2,r3
   646f8:	1806d07a 	srli	r3,r3,1
   646fc:	280ad07a 	srli	r5,r5,1
   64700:	183ffa1e 	bne	r3,zero,646ec <__alt_data_end+0xffff06ec>
   64704:	38000126 	beq	r7,zero,6470c <__divsi3+0x60>
   64708:	0085c83a 	sub	r2,zero,r2
   6470c:	f800283a 	ret
   64710:	014bc83a 	sub	r5,zero,r5
   64714:	39c0005c 	xori	r7,r7,1
   64718:	003fe706 	br	646b8 <__alt_data_end+0xffff06b8>
   6471c:	0109c83a 	sub	r4,zero,r4
   64720:	01c00044 	movi	r7,1
   64724:	003fe306 	br	646b4 <__alt_data_end+0xffff06b4>
   64728:	00c00044 	movi	r3,1
   6472c:	003fee06 	br	646e8 <__alt_data_end+0xffff06e8>

00064730 <__modsi3>:
   64730:	20001716 	blt	r4,zero,64790 <__modsi3+0x60>
   64734:	000f883a 	mov	r7,zero
   64738:	2005883a 	mov	r2,r4
   6473c:	28001216 	blt	r5,zero,64788 <__modsi3+0x58>
   64740:	2900162e 	bgeu	r5,r4,6479c <__modsi3+0x6c>
   64744:	01800804 	movi	r6,32
   64748:	00c00044 	movi	r3,1
   6474c:	00000106 	br	64754 <__modsi3+0x24>
   64750:	30000a26 	beq	r6,zero,6477c <__modsi3+0x4c>
   64754:	294b883a 	add	r5,r5,r5
   64758:	31bfffc4 	addi	r6,r6,-1
   6475c:	18c7883a 	add	r3,r3,r3
   64760:	293ffb36 	bltu	r5,r4,64750 <__alt_data_end+0xffff0750>
   64764:	18000526 	beq	r3,zero,6477c <__modsi3+0x4c>
   64768:	1806d07a 	srli	r3,r3,1
   6476c:	11400136 	bltu	r2,r5,64774 <__modsi3+0x44>
   64770:	1145c83a 	sub	r2,r2,r5
   64774:	280ad07a 	srli	r5,r5,1
   64778:	183ffb1e 	bne	r3,zero,64768 <__alt_data_end+0xffff0768>
   6477c:	38000126 	beq	r7,zero,64784 <__modsi3+0x54>
   64780:	0085c83a 	sub	r2,zero,r2
   64784:	f800283a 	ret
   64788:	014bc83a 	sub	r5,zero,r5
   6478c:	003fec06 	br	64740 <__alt_data_end+0xffff0740>
   64790:	0109c83a 	sub	r4,zero,r4
   64794:	01c00044 	movi	r7,1
   64798:	003fe706 	br	64738 <__alt_data_end+0xffff0738>
   6479c:	00c00044 	movi	r3,1
   647a0:	003ff106 	br	64768 <__alt_data_end+0xffff0768>

000647a4 <__udivsi3>:
   647a4:	200d883a 	mov	r6,r4
   647a8:	2900152e 	bgeu	r5,r4,64800 <__udivsi3+0x5c>
   647ac:	28001416 	blt	r5,zero,64800 <__udivsi3+0x5c>
   647b0:	00800804 	movi	r2,32
   647b4:	00c00044 	movi	r3,1
   647b8:	00000206 	br	647c4 <__udivsi3+0x20>
   647bc:	10000e26 	beq	r2,zero,647f8 <__udivsi3+0x54>
   647c0:	28000516 	blt	r5,zero,647d8 <__udivsi3+0x34>
   647c4:	294b883a 	add	r5,r5,r5
   647c8:	10bfffc4 	addi	r2,r2,-1
   647cc:	18c7883a 	add	r3,r3,r3
   647d0:	293ffa36 	bltu	r5,r4,647bc <__alt_data_end+0xffff07bc>
   647d4:	18000826 	beq	r3,zero,647f8 <__udivsi3+0x54>
   647d8:	0005883a 	mov	r2,zero
   647dc:	31400236 	bltu	r6,r5,647e8 <__udivsi3+0x44>
   647e0:	314dc83a 	sub	r6,r6,r5
   647e4:	10c4b03a 	or	r2,r2,r3
   647e8:	1806d07a 	srli	r3,r3,1
   647ec:	280ad07a 	srli	r5,r5,1
   647f0:	183ffa1e 	bne	r3,zero,647dc <__alt_data_end+0xffff07dc>
   647f4:	f800283a 	ret
   647f8:	0005883a 	mov	r2,zero
   647fc:	f800283a 	ret
   64800:	00c00044 	movi	r3,1
   64804:	003ff406 	br	647d8 <__alt_data_end+0xffff07d8>

00064808 <__umodsi3>:
   64808:	2005883a 	mov	r2,r4
   6480c:	2900122e 	bgeu	r5,r4,64858 <__umodsi3+0x50>
   64810:	28001116 	blt	r5,zero,64858 <__umodsi3+0x50>
   64814:	01800804 	movi	r6,32
   64818:	00c00044 	movi	r3,1
   6481c:	00000206 	br	64828 <__umodsi3+0x20>
   64820:	30000c26 	beq	r6,zero,64854 <__umodsi3+0x4c>
   64824:	28000516 	blt	r5,zero,6483c <__umodsi3+0x34>
   64828:	294b883a 	add	r5,r5,r5
   6482c:	31bfffc4 	addi	r6,r6,-1
   64830:	18c7883a 	add	r3,r3,r3
   64834:	293ffa36 	bltu	r5,r4,64820 <__alt_data_end+0xffff0820>
   64838:	18000626 	beq	r3,zero,64854 <__umodsi3+0x4c>
   6483c:	1806d07a 	srli	r3,r3,1
   64840:	11400136 	bltu	r2,r5,64848 <__umodsi3+0x40>
   64844:	1145c83a 	sub	r2,r2,r5
   64848:	280ad07a 	srli	r5,r5,1
   6484c:	183ffb1e 	bne	r3,zero,6483c <__alt_data_end+0xffff083c>
   64850:	f800283a 	ret
   64854:	f800283a 	ret
   64858:	00c00044 	movi	r3,1
   6485c:	003ff706 	br	6483c <__alt_data_end+0xffff083c>

00064860 <__mulsi3>:
   64860:	0005883a 	mov	r2,zero
   64864:	20000726 	beq	r4,zero,64884 <__mulsi3+0x24>
   64868:	20c0004c 	andi	r3,r4,1
   6486c:	2008d07a 	srli	r4,r4,1
   64870:	18000126 	beq	r3,zero,64878 <__mulsi3+0x18>
   64874:	1145883a 	add	r2,r2,r5
   64878:	294b883a 	add	r5,r5,r5
   6487c:	203ffa1e 	bne	r4,zero,64868 <__alt_data_end+0xffff0868>
   64880:	f800283a 	ret
   64884:	f800283a 	ret

00064888 <memcpy>:
   64888:	2005883a 	mov	r2,r4
   6488c:	2007883a 	mov	r3,r4
   64890:	218d883a 	add	r6,r4,r6
   64894:	19800526 	beq	r3,r6,648ac <memcpy+0x24>
   64898:	29000003 	ldbu	r4,0(r5)
   6489c:	18c00044 	addi	r3,r3,1
   648a0:	29400044 	addi	r5,r5,1
   648a4:	193fffc5 	stb	r4,-1(r3)
   648a8:	003ffa06 	br	64894 <__alt_data_end+0xffff0894>
   648ac:	f800283a 	ret

000648b0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   648b0:	006493c1 	jmpi	6493c <alt_iic_isr_register>

000648b4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   648b4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   648b8:	00bfff84 	movi	r2,-2
   648bc:	2084703a 	and	r2,r4,r2
   648c0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   648c4:	00c00044 	movi	r3,1
   648c8:	d0a00b17 	ldw	r2,-32724(gp)
   648cc:	194a983a 	sll	r5,r3,r5
   648d0:	288ab03a 	or	r5,r5,r2
   648d4:	d1600b15 	stw	r5,-32724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   648d8:	d0a00b17 	ldw	r2,-32724(gp)
   648dc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   648e0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   648e4:	0005883a 	mov	r2,zero
   648e8:	f800283a 	ret

000648ec <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   648ec:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   648f0:	00bfff84 	movi	r2,-2
   648f4:	2084703a 	and	r2,r4,r2
   648f8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   648fc:	00ffff84 	movi	r3,-2
   64900:	d0a00b17 	ldw	r2,-32724(gp)
   64904:	194a183a 	rol	r5,r3,r5
   64908:	288a703a 	and	r5,r5,r2
   6490c:	d1600b15 	stw	r5,-32724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   64910:	d0a00b17 	ldw	r2,-32724(gp)
   64914:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   64918:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   6491c:	0005883a 	mov	r2,zero
   64920:	f800283a 	ret

00064924 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   64924:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   64928:	00800044 	movi	r2,1
   6492c:	1144983a 	sll	r2,r2,r5
   64930:	10c4703a 	and	r2,r2,r3
}
   64934:	1004c03a 	cmpne	r2,r2,zero
   64938:	f800283a 	ret

0006493c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   6493c:	00c007c4 	movi	r3,31
   64940:	19401616 	blt	r3,r5,6499c <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   64944:	defffe04 	addi	sp,sp,-8
   64948:	dfc00115 	stw	ra,4(sp)
   6494c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   64950:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   64954:	00ffff84 	movi	r3,-2
   64958:	80c6703a 	and	r3,r16,r3
   6495c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   64960:	280490fa 	slli	r2,r5,3
   64964:	00c001f4 	movhi	r3,7
   64968:	18c2d004 	addi	r3,r3,2880
   6496c:	1885883a 	add	r2,r3,r2
   64970:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   64974:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   64978:	30000226 	beq	r6,zero,64984 <alt_iic_isr_register+0x48>
   6497c:	00648b40 	call	648b4 <alt_ic_irq_enable>
   64980:	00000106 	br	64988 <alt_iic_isr_register+0x4c>
   64984:	00648ec0 	call	648ec <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   64988:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   6498c:	dfc00117 	ldw	ra,4(sp)
   64990:	dc000017 	ldw	r16,0(sp)
   64994:	dec00204 	addi	sp,sp,8
   64998:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   6499c:	00bffa84 	movi	r2,-22
   649a0:	f800283a 	ret

000649a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   649a4:	deffff04 	addi	sp,sp,-4
   649a8:	010001b4 	movhi	r4,6
   649ac:	014001b4 	movhi	r5,6
   649b0:	dfc00015 	stw	ra,0(sp)
   649b4:	2113dd04 	addi	r4,r4,20340
   649b8:	2953e004 	addi	r5,r5,20352

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   649bc:	2140061e 	bne	r4,r5,649d8 <alt_load+0x34>
   649c0:	010001b4 	movhi	r4,6
   649c4:	014001b4 	movhi	r5,6
   649c8:	21000804 	addi	r4,r4,32
   649cc:	29400804 	addi	r5,r5,32
   649d0:	2140121e 	bne	r4,r5,64a1c <alt_load+0x78>
   649d4:	00000b06 	br	64a04 <alt_load+0x60>
   649d8:	00c001b4 	movhi	r3,6
   649dc:	18d3e004 	addi	r3,r3,20352
   649e0:	1907c83a 	sub	r3,r3,r4
   649e4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   649e8:	10fff526 	beq	r2,r3,649c0 <__alt_data_end+0xffff09c0>
    {
      *to++ = *from++;
   649ec:	114f883a 	add	r7,r2,r5
   649f0:	39c00017 	ldw	r7,0(r7)
   649f4:	110d883a 	add	r6,r2,r4
   649f8:	10800104 	addi	r2,r2,4
   649fc:	31c00015 	stw	r7,0(r6)
   64a00:	003ff906 	br	649e8 <__alt_data_end+0xffff09e8>
   64a04:	010001b4 	movhi	r4,6
   64a08:	014001b4 	movhi	r5,6
   64a0c:	21135104 	addi	r4,r4,19780
   64a10:	29535104 	addi	r5,r5,19780

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   64a14:	2140101e 	bne	r4,r5,64a58 <alt_load+0xb4>
   64a18:	00000b06 	br	64a48 <alt_load+0xa4>
   64a1c:	00c001b4 	movhi	r3,6
   64a20:	18c06004 	addi	r3,r3,384
   64a24:	1907c83a 	sub	r3,r3,r4
   64a28:	0005883a 	mov	r2,zero
  {
    while( to != end )
   64a2c:	10fff526 	beq	r2,r3,64a04 <__alt_data_end+0xffff0a04>
    {
      *to++ = *from++;
   64a30:	114f883a 	add	r7,r2,r5
   64a34:	39c00017 	ldw	r7,0(r7)
   64a38:	110d883a 	add	r6,r2,r4
   64a3c:	10800104 	addi	r2,r2,4
   64a40:	31c00015 	stw	r7,0(r6)
   64a44:	003ff906 	br	64a2c <__alt_data_end+0xffff0a2c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   64a48:	0064cc00 	call	64cc0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   64a4c:	dfc00017 	ldw	ra,0(sp)
   64a50:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   64a54:	0064cc41 	jmpi	64cc4 <alt_icache_flush_all>
   64a58:	00c001b4 	movhi	r3,6
   64a5c:	18d3dd04 	addi	r3,r3,20340
   64a60:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   64a64:	0005883a 	mov	r2,zero
  {
    while( to != end )
   64a68:	18bff726 	beq	r3,r2,64a48 <__alt_data_end+0xffff0a48>
    {
      *to++ = *from++;
   64a6c:	114f883a 	add	r7,r2,r5
   64a70:	39c00017 	ldw	r7,0(r7)
   64a74:	110d883a 	add	r6,r2,r4
   64a78:	10800104 	addi	r2,r2,4
   64a7c:	31c00015 	stw	r7,0(r6)
   64a80:	003ff906 	br	64a68 <__alt_data_end+0xffff0a68>

00064a84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   64a84:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   64a88:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   64a8c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   64a90:	0064c680 	call	64c68 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   64a94:	0064c880 	call	64c88 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   64a98:	d1a00c17 	ldw	r6,-32720(gp)
   64a9c:	d1600d17 	ldw	r5,-32716(gp)
   64aa0:	d1200e17 	ldw	r4,-32712(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   64aa4:	dfc00017 	ldw	ra,0(sp)
   64aa8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   64aac:	00601bc1 	jmpi	601bc <main>

00064ab0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   64ab0:	defff204 	addi	sp,sp,-56
   64ab4:	2005883a 	mov	r2,r4
   64ab8:	dfc00a15 	stw	ra,40(sp)
   64abc:	df000915 	stw	fp,36(sp)
   64ac0:	ddc00815 	stw	r23,32(sp)
   64ac4:	dd800715 	stw	r22,28(sp)
   64ac8:	dd400615 	stw	r21,24(sp)
   64acc:	dd000515 	stw	r20,20(sp)
   64ad0:	dcc00415 	stw	r19,16(sp)
   64ad4:	dc800315 	stw	r18,12(sp)
   64ad8:	dc400215 	stw	r17,8(sp)
   64adc:	dc000115 	stw	r16,4(sp)
   64ae0:	d9400b15 	stw	r5,44(sp)
   64ae4:	d9800c15 	stw	r6,48(sp)
   64ae8:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   64aec:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   64af0:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   64af4:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   64af8:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   64afc:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   64b00:	11000007 	ldb	r4,0(r2)
   64b04:	20003a26 	beq	r4,zero,64bf0 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   64b08:	24000226 	beq	r4,r16,64b14 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   64b0c:	14400044 	addi	r17,r2,1
   64b10:	00001406 	br	64b64 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   64b14:	14400084 	addi	r17,r2,2
   64b18:	10800047 	ldb	r2,1(r2)
   64b1c:	10003426 	beq	r2,zero,64bf0 <alt_printf+0x140>
            {
                if (c == '%')
   64b20:	1400021e 	bne	r2,r16,64b2c <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   64b24:	8009883a 	mov	r4,r16
   64b28:	00000e06 	br	64b64 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   64b2c:	1480051e 	bne	r2,r18,64b44 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   64b30:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   64b34:	ad800104 	addi	r22,r21,4
   64b38:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   64b3c:	0064c200 	call	64c20 <alt_putchar>
   64b40:	00002906 	br	64be8 <alt_printf+0x138>
                }
                else if (c == 'x')
   64b44:	14c0201e 	bne	r2,r19,64bc8 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   64b48:	adc00017 	ldw	r23,0(r21)
   64b4c:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   64b50:	b8000326 	beq	r23,zero,64b60 <alt_printf+0xb0>
   64b54:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   64b58:	00c003c4 	movi	r3,15
   64b5c:	00000306 	br	64b6c <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   64b60:	01000c04 	movi	r4,48
   64b64:	0064c200 	call	64c20 <alt_putchar>
                        continue;
   64b68:	00001f06 	br	64be8 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   64b6c:	1d84983a 	sll	r2,r3,r22
   64b70:	15c4703a 	and	r2,r2,r23
   64b74:	1000021e 	bne	r2,zero,64b80 <alt_printf+0xd0>
                        digit_shift -= 4;
   64b78:	b5bfff04 	addi	r22,r22,-4
   64b7c:	003ffb06 	br	64b6c <__alt_data_end+0xffff0b6c>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   64b80:	070003c4 	movi	fp,15
                        if (digit <= 9)
   64b84:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   64b88:	b0001716 	blt	r22,zero,64be8 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   64b8c:	e588983a 	sll	r4,fp,r22
   64b90:	25c8703a 	and	r4,r4,r23
   64b94:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   64b98:	19000236 	bltu	r3,r4,64ba4 <alt_printf+0xf4>
                            c = '0' + digit;
   64b9c:	21000c04 	addi	r4,r4,48
   64ba0:	00000106 	br	64ba8 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   64ba4:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   64ba8:	21003fcc 	andi	r4,r4,255
   64bac:	2100201c 	xori	r4,r4,128
   64bb0:	213fe004 	addi	r4,r4,-128
   64bb4:	d8c00015 	stw	r3,0(sp)
   64bb8:	0064c200 	call	64c20 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   64bbc:	b5bfff04 	addi	r22,r22,-4
   64bc0:	d8c00017 	ldw	r3,0(sp)
   64bc4:	003ff006 	br	64b88 <__alt_data_end+0xffff0b88>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   64bc8:	1500071e 	bne	r2,r20,64be8 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   64bcc:	ad800017 	ldw	r22,0(r21)
   64bd0:	ad400104 	addi	r21,r21,4

                    while(*s)
   64bd4:	b1000007 	ldb	r4,0(r22)
   64bd8:	20000326 	beq	r4,zero,64be8 <alt_printf+0x138>
                      alt_putchar(*s++);
   64bdc:	b5800044 	addi	r22,r22,1
   64be0:	0064c200 	call	64c20 <alt_putchar>
   64be4:	003ffb06 	br	64bd4 <__alt_data_end+0xffff0bd4>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   64be8:	8805883a 	mov	r2,r17
   64bec:	003fc406 	br	64b00 <__alt_data_end+0xffff0b00>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   64bf0:	dfc00a17 	ldw	ra,40(sp)
   64bf4:	df000917 	ldw	fp,36(sp)
   64bf8:	ddc00817 	ldw	r23,32(sp)
   64bfc:	dd800717 	ldw	r22,28(sp)
   64c00:	dd400617 	ldw	r21,24(sp)
   64c04:	dd000517 	ldw	r20,20(sp)
   64c08:	dcc00417 	ldw	r19,16(sp)
   64c0c:	dc800317 	ldw	r18,12(sp)
   64c10:	dc400217 	ldw	r17,8(sp)
   64c14:	dc000117 	ldw	r16,4(sp)
   64c18:	dec00e04 	addi	sp,sp,56
   64c1c:	f800283a 	ret

00064c20 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   64c20:	defffd04 	addi	sp,sp,-12
   64c24:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   64c28:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   64c2c:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   64c30:	010001b4 	movhi	r4,6
   64c34:	000f883a 	mov	r7,zero
   64c38:	01800044 	movi	r6,1
   64c3c:	d80b883a 	mov	r5,sp
   64c40:	2113df04 	addi	r4,r4,20348
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   64c44:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   64c48:	0064c8c0 	call	64c8c <altera_avalon_jtag_uart_write>
   64c4c:	00ffffc4 	movi	r3,-1
   64c50:	10c00126 	beq	r2,r3,64c58 <alt_putchar+0x38>
        return -1;
    }
    return c;
   64c54:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   64c58:	dfc00217 	ldw	ra,8(sp)
   64c5c:	dc000117 	ldw	r16,4(sp)
   64c60:	dec00304 	addi	sp,sp,12
   64c64:	f800283a 	ret

00064c68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   64c68:	deffff04 	addi	sp,sp,-4
   64c6c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
   64c70:	0064d3c0 	call	64d3c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   64c74:	00800044 	movi	r2,1
   64c78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   64c7c:	dfc00017 	ldw	ra,0(sp)
   64c80:	dec00104 	addi	sp,sp,4
   64c84:	f800283a 	ret

00064c88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   64c88:	f800283a 	ret

00064c8c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   64c8c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   64c90:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   64c94:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   64c98:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   64c9c:	2980072e 	bgeu	r5,r6,64cbc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   64ca0:	38c00037 	ldwio	r3,0(r7)
   64ca4:	18ffffec 	andhi	r3,r3,65535
   64ca8:	183ffc26 	beq	r3,zero,64c9c <__alt_data_end+0xffff0c9c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   64cac:	28c00007 	ldb	r3,0(r5)
   64cb0:	20c00035 	stwio	r3,0(r4)
   64cb4:	29400044 	addi	r5,r5,1
   64cb8:	003ff806 	br	64c9c <__alt_data_end+0xffff0c9c>

  return count;
}
   64cbc:	f800283a 	ret

00064cc0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   64cc0:	f800283a 	ret

00064cc4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   64cc4:	f800283a 	ret

00064cc8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   64cc8:	213ffe84 	addi	r4,r4,-6
   64ccc:	008003c4 	movi	r2,15
   64cd0:	11001636 	bltu	r2,r4,64d2c <alt_exception_cause_generated_bad_addr+0x64>
   64cd4:	200890ba 	slli	r4,r4,2
   64cd8:	008001b4 	movhi	r2,6
   64cdc:	10933b04 	addi	r2,r2,19692
   64ce0:	2089883a 	add	r4,r4,r2
   64ce4:	20800017 	ldw	r2,0(r4)
   64ce8:	1000683a 	jmp	r2
   64cec:	00064d34 	movhi	zero,6452
   64cf0:	00064d34 	movhi	zero,6452
   64cf4:	00064d2c 	andhi	zero,zero,6452
   64cf8:	00064d2c 	andhi	zero,zero,6452
   64cfc:	00064d2c 	andhi	zero,zero,6452
   64d00:	00064d34 	movhi	zero,6452
   64d04:	00064d2c 	andhi	zero,zero,6452
   64d08:	00064d2c 	andhi	zero,zero,6452
   64d0c:	00064d34 	movhi	zero,6452
   64d10:	00064d34 	movhi	zero,6452
   64d14:	00064d2c 	andhi	zero,zero,6452
   64d18:	00064d34 	movhi	zero,6452
   64d1c:	00064d2c 	andhi	zero,zero,6452
   64d20:	00064d2c 	andhi	zero,zero,6452
   64d24:	00064d2c 	andhi	zero,zero,6452
   64d28:	00064d34 	movhi	zero,6452
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   64d2c:	0005883a 	mov	r2,zero
   64d30:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   64d34:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   64d38:	f800283a 	ret

00064d3c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   64d3c:	000170fa 	wrctl	ienable,zero
   64d40:	f800283a 	ret
